{"version":3,"file":"walletconnect-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWCEthRpcConnectionOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"],"names":["UserRejectedRequestError","name","_this","constructor","message","Error","WalletConnectConnector","config","supportedChainIds","rpc","Object","keys","map","k","Number","undefined","handleChainChanged","_this2","bind","handleAccountsChanged","handleDisconnect","chainId","emitUpdate","accounts","account","emitDeactivate","activate","this","walletConnectProvider","on","_this4","enable","then","error","provider","m","WalletConnectProvider","getProvider","getChainId","Promise","resolve","getAccount","deactivate","removeListener","disconnect","close","AbstractConnector"],"mappings":"44CAUaA,8DAGJC,KAAOC,EAAKC,YAAYF,OACxBG,QAAU,sDAJ2BC,QAgBjCC,yBAKCC,WAbgBC,EAAmBC,uBAcvC,CAAED,qBAAsCD,EAdpBC,IAAAA,kBAAmBC,IAAAA,IAC3CD,IAIGC,EAAMC,OAAOC,KAAKF,GAAKG,KAAI,SAAAC,UAAKC,OAAOD,WAAME,aAW7CR,OAASA,IAETS,mBAAqBC,EAAKD,mBAAmBE,aAC7CC,sBAAwBF,EAAKE,sBAAsBD,aACnDE,iBAAmBH,EAAKG,iBAAiBF,+CAGxCF,mBAAA,SAAmBK,QAIpBC,WAAW,CAAED,QAAAA,OAGZF,sBAAA,SAAsBI,QAIvBD,WAAW,CAAEE,QAASD,EAAS,QAG9BH,iBAAA,gBAIDK,oBAGMC,8BACNC,2BAKAC,sBAAsBC,GAAG,eAAgBC,EAAKd,sBAC9CY,sBAAsBC,GAAG,kBAAmBC,EAAKX,yBACjDS,sBAAsBC,GAAG,aAAcC,EAAKV,kCAE3BU,EAAKF,sBACxBG,SACAC,MAAK,SAACT,UAA+BA,EAAS,aACxC,SAACU,MAEgB,sBAAlBA,EAAM7B,cACF,IAAIJ,QAGNiC,qBATJT,SAYC,CAAEU,SAAUJ,EAAKF,sBAAuBJ,QAAAA,wBArB1CM,EAAKF,6CAC4B,8QAAO,yCAAoCI,MAAK,SAAAG,+BAAKA,SAAAA,aAAcA,qBAAjGC,KACDR,sBAAwB,IAAIQ,EAAsBN,EAAKvB,oGAsBnD8B,kDACJV,KAAKC,6DAGDU,iCACJC,QAAQC,QAAQb,KAAKC,sBAAsBP,+CAGvCoB,iCACJF,QAAQC,QAAQb,KAAKC,sBAAsBL,UAAUS,MAAK,SAACT,UAA+BA,EAAS,4CAGrGmB,WAAA,WACDf,KAAKC,6BACFA,sBAAsBe,eAAe,aAAchB,KAAKP,uBACxDQ,sBAAsBe,eAAe,eAAgBhB,KAAKX,yBAC1DY,sBAAsBe,eAAe,kBAAmBhB,KAAKR,4BAC7DS,sBAAsBgB,iBAIlBC,4BACXlB,KAAKF,0EAnFmCqB,2CAtBf"}