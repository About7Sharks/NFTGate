"use strict";
// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>
// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>
// Licensed under the Apache License, version 2.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletLinkRelay = void 0;
const bind_decorator_1 = __importDefault(require("bind-decorator"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const WalletLinkAnalytics_1 = require("../connection/WalletLinkAnalytics");
const WalletLinkConnection_1 = require("../connection/WalletLinkConnection");
const init_1 = require("../init");
const util_1 = require("../util");
const aes256gcm = __importStar(require("./aes256gcm"));
const Session_1 = require("./Session");
const WalletLinkRelayAbstract_1 = require("./WalletLinkRelayAbstract");
const Web3Method_1 = require("./Web3Method");
const Web3RequestCanceledMessage_1 = require("./Web3RequestCanceledMessage");
const Web3RequestMessage_1 = require("./Web3RequestMessage");
const Web3Response_1 = require("./Web3Response");
const Web3ResponseMessage_1 = require("./Web3ResponseMessage");
class WalletLinkRelay {
    constructor(options) {
        this.accountsCallback = null;
        this.chainIdCallback = null;
        this.jsonRpcUrlCallback = null;
        this.appName = "";
        this.appLogoUrl = null;
        this.subscriptions = new rxjs_1.Subscription();
        this.walletLinkUrl = options.walletLinkUrl;
        this.storage = options.storage;
        this._session =
            Session_1.Session.load(options.storage) || new Session_1.Session(options.storage).save();
        this.relayEventManager = options.relayEventManager;
        this.walletLinkAnalytics = options.walletLinkAnalytics
            ? options.walletLinkAnalytics
            : new WalletLinkAnalytics_1.WalletLinkAnalytics();
        this.connection = new WalletLinkConnection_1.WalletLinkConnection(this._session.id, this._session.key, this.walletLinkUrl, this.walletLinkAnalytics);
        this.subscriptions.add(this.connection.incomingEvent$
            .pipe((0, operators_1.filter)(m => m.event === "Web3Response"))
            .subscribe({ next: this.handleIncomingEvent }));
        this.subscriptions.add(this.connection.linked$
            .pipe((0, operators_1.skip)(1), (0, operators_1.tap)((linked) => {
            var _a;
            this.isLinked = linked;
            const cachedAddresses = this.storage.getItem(WalletLinkRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);
            if (cachedAddresses) {
                const addresses = cachedAddresses.split(" ");
                if (addresses[0] !== "" && !linked) {
                    const sessionIdHash = Session_1.Session.hash(this._session.id);
                    (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.UNLINKED_ERROR_STATE, { sessionIdHash });
                }
            }
        }))
            .subscribe());
        // if session is marked destroyed, reset and reload
        this.subscriptions.add(this.connection.sessionConfig$
            .pipe((0, operators_1.filter)(c => !!c.metadata && c.metadata.__destroyed === "1"))
            .subscribe(() => {
            var _a;
            const alreadyDestroyed = this.connection.isDestroyed;
            (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.METADATA_DESTROYED, {
                alreadyDestroyed,
                sessionIdHash: Session_1.Session.hash(this._session.id)
            });
            return this.resetAndReload();
        }));
        this.subscriptions.add(this.connection.sessionConfig$
            .pipe((0, operators_1.filter)(c => c.metadata && c.metadata.WalletUsername !== undefined))
            .pipe((0, operators_1.mergeMap)(c => aes256gcm.decrypt(c.metadata.WalletUsername, this._session.secret)))
            .subscribe({
            next: walletUsername => {
                this.storage.setItem(WalletLinkRelayAbstract_1.WALLET_USER_NAME_KEY, walletUsername);
            },
            error: () => {
                var _a;
                (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.GENERAL_ERROR, { message: 'Had error decrypting', value: 'username' });
            }
        }));
        this.subscriptions.add(this.connection.sessionConfig$
            .pipe((0, operators_1.filter)(c => c.metadata && c.metadata.ChainId !== undefined))
            .pipe((0, operators_1.mergeMap)(c => aes256gcm.decrypt(c.metadata.ChainId, this._session.secret)))
            .pipe((0, operators_1.distinctUntilChanged)())
            .subscribe({
            next: chainId => {
                if (this.chainIdCallback) {
                    this.chainIdCallback(chainId);
                }
            },
            error: () => {
                var _a;
                (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.GENERAL_ERROR, { message: 'Had error decrypting', value: 'chainId' });
            }
        }));
        this.subscriptions.add(this.connection.sessionConfig$
            .pipe((0, operators_1.filter)(c => c.metadata && c.metadata.JsonRpcUrl !== undefined))
            .pipe((0, operators_1.mergeMap)(c => aes256gcm.decrypt(c.metadata.JsonRpcUrl, this._session.secret)))
            .pipe((0, operators_1.distinctUntilChanged)())
            .subscribe({
            next: jsonRpcURl => {
                if (this.jsonRpcUrlCallback) {
                    this.jsonRpcUrlCallback(jsonRpcURl);
                }
            },
            error: () => {
                var _a;
                (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.GENERAL_ERROR, { message: 'Had error decrypting', value: 'jsonRpcUrl' });
            }
        }));
        this.subscriptions.add(this.connection.sessionConfig$
            .pipe((0, operators_1.filter)(c => c.metadata && c.metadata.EthereumAddress !== undefined))
            .pipe((0, operators_1.mergeMap)(c => aes256gcm.decrypt(c.metadata.EthereumAddress, this._session.secret)))
            .subscribe({
            next: selectedAddress => {
                if (this.accountsCallback) {
                    this.accountsCallback([selectedAddress]);
                }
                if (WalletLinkRelay.accountRequestCallbackIds.size > 0) {
                    // We get the ethereum address from the metadata.  If for whatever
                    // reason we don't get a response via an explicit web3 message
                    // we can still fulfill the eip1102 request.
                    Array.from(WalletLinkRelay.accountRequestCallbackIds.values()).forEach(id => {
                        const message = (0, Web3ResponseMessage_1.Web3ResponseMessage)({
                            id,
                            response: (0, Web3Response_1.RequestEthereumAccountsResponse)([
                                selectedAddress
                            ])
                        });
                        this.invokeCallback(Object.assign(Object.assign({}, message), { id }));
                    });
                    WalletLinkRelay.accountRequestCallbackIds.clear();
                }
            },
            error: () => {
                var _a;
                (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.GENERAL_ERROR, { message: 'Had error decrypting', value: 'selectedAddress' });
            }
        }));
        this.ui = options.walletLinkUIConstructor({
            walletLinkUrl: options.walletLinkUrl,
            version: options.version,
            darkMode: options.darkMode,
            session: this._session,
            connected$: this.connection.connected$
        });
        this.connection.connect();
    }
    attachUI() {
        this.ui.attach();
    }
    resetAndReload() {
        this.connection
            .setSessionMetadata("__destroyed", "1")
            .pipe((0, operators_1.timeout)(1000), (0, operators_1.catchError)(_ => (0, rxjs_1.of)(null)))
            .subscribe(_ => {
            var _a, _b;
            try {
                this.subscriptions.unsubscribe();
            }
            catch (err) {
                (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.GENERAL_ERROR, {
                    message: "Had error unsubscribing"
                });
            }
            (_b = this.walletLinkAnalytics) === null || _b === void 0 ? void 0 : _b.sendEvent(init_1.EVENTS.SESSION_STATE_CHANGE, {
                method: "relay::resetAndReload",
                sessionMetadataChange: "__destroyed, 1",
                sessionIdHash: Session_1.Session.hash(this._session.id)
            });
            this.connection.destroy();
            this.storage.clear();
            this.ui.reloadUI();
        }, err => {
            var _a;
            (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.FAILURE, {
                method: "relay::resetAndReload",
                message: `faled to reset and relod with ${err}`,
                sessionIdHash: Session_1.Session.hash(this._session.id)
            });
        });
    }
    setAppInfo(appName, appLogoUrl) {
        this.appName = appName;
        this.appLogoUrl = appLogoUrl;
    }
    getStorageItem(key) {
        return this.storage.getItem(key);
    }
    get session() {
        return this._session;
    }
    setStorageItem(key, value) {
        this.storage.setItem(key, value);
    }
    requestEthereumAccounts() {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.requestEthereumAccounts,
            params: {
                appName: this.appName,
                appLogoUrl: this.appLogoUrl || null
            }
        });
    }
    signEthereumMessage(message, address, addPrefix, typedDataJson) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.signEthereumMessage,
            params: {
                message: (0, util_1.hexStringFromBuffer)(message, true),
                address,
                addPrefix,
                typedDataJson: typedDataJson || null
            }
        });
    }
    ethereumAddressFromSignedMessage(message, signature, addPrefix) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.ethereumAddressFromSignedMessage,
            params: {
                message: (0, util_1.hexStringFromBuffer)(message, true),
                signature: (0, util_1.hexStringFromBuffer)(signature, true),
                addPrefix
            }
        });
    }
    signEthereumTransaction(params) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.signEthereumTransaction,
            params: {
                fromAddress: params.fromAddress,
                toAddress: params.toAddress,
                weiValue: (0, util_1.bigIntStringFromBN)(params.weiValue),
                data: (0, util_1.hexStringFromBuffer)(params.data, true),
                nonce: params.nonce,
                gasPriceInWei: params.gasPriceInWei
                    ? (0, util_1.bigIntStringFromBN)(params.gasPriceInWei)
                    : null,
                maxFeePerGas: params.gasPriceInWei
                    ? (0, util_1.bigIntStringFromBN)(params.gasPriceInWei)
                    : null,
                maxPriorityFeePerGas: params.gasPriceInWei
                    ? (0, util_1.bigIntStringFromBN)(params.gasPriceInWei)
                    : null,
                gasLimit: params.gasLimit ? (0, util_1.bigIntStringFromBN)(params.gasLimit) : null,
                chainId: params.chainId,
                shouldSubmit: false
            }
        });
    }
    signAndSubmitEthereumTransaction(params) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.signEthereumTransaction,
            params: {
                fromAddress: params.fromAddress,
                toAddress: params.toAddress,
                weiValue: (0, util_1.bigIntStringFromBN)(params.weiValue),
                data: (0, util_1.hexStringFromBuffer)(params.data, true),
                nonce: params.nonce,
                gasPriceInWei: params.gasPriceInWei
                    ? (0, util_1.bigIntStringFromBN)(params.gasPriceInWei)
                    : null,
                maxFeePerGas: params.maxFeePerGas
                    ? (0, util_1.bigIntStringFromBN)(params.maxFeePerGas)
                    : null,
                maxPriorityFeePerGas: params.maxPriorityFeePerGas
                    ? (0, util_1.bigIntStringFromBN)(params.maxPriorityFeePerGas)
                    : null,
                gasLimit: params.gasLimit ? (0, util_1.bigIntStringFromBN)(params.gasLimit) : null,
                chainId: params.chainId,
                shouldSubmit: true
            }
        });
    }
    submitEthereumTransaction(signedTransaction, chainId) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.submitEthereumTransaction,
            params: {
                signedTransaction: (0, util_1.hexStringFromBuffer)(signedTransaction, true),
                chainId
            }
        });
    }
    scanQRCode(regExp) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.scanQRCode,
            params: { regExp }
        });
    }
    arbitraryRequest(data) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.arbitrary,
            params: { data }
        });
    }
    addEthereumChain(chainId, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.addEthereumChain,
            params: {
                chainId,
                blockExplorerUrls,
                chainName,
                iconUrls,
                nativeCurrency
            }
        });
    }
    sendRequest(request) {
        let hideSnackbarItem = null;
        const id = (0, util_1.randomBytesHex)(8);
        const cancel = () => {
            this.publishWeb3RequestCanceledEvent(id);
            this.handleWeb3ResponseMessage((0, Web3ResponseMessage_1.Web3ResponseMessage)({
                id,
                response: (0, Web3Response_1.ErrorResponse)(request.method, "User rejected request")
            }));
            hideSnackbarItem === null || hideSnackbarItem === void 0 ? void 0 : hideSnackbarItem();
        };
        const promise = new Promise((resolve, reject) => {
            var _a;
            const isRequestAccounts = request.method === Web3Method_1.Web3Method.requestEthereumAccounts;
            const isSwitchEthereumChain = request.method === Web3Method_1.Web3Method.switchEthereumChain;
            if (isRequestAccounts) {
                const userAgent = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) || null;
                if (userAgent &&
                    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {
                    window.location.href = `https://go.cb-w.com/xoXnYwQimhb?cb_url=${window.location.href}`;
                    return;
                }
                if (this.ui.inlineAccountsResponse()) {
                    const onAccounts = (accounts) => {
                        this.handleWeb3ResponseMessage((0, Web3ResponseMessage_1.Web3ResponseMessage)({
                            id,
                            response: (0, Web3Response_1.RequestEthereumAccountsResponse)(accounts)
                        }));
                    };
                    this.ui.requestEthereumAccounts({
                        onCancel: cancel,
                        onAccounts
                    });
                }
                else {
                    this.ui.requestEthereumAccounts({
                        onCancel: cancel
                    });
                }
                WalletLinkRelay.accountRequestCallbackIds.add(id);
            }
            else if (request.method === Web3Method_1.Web3Method.switchEthereumChain ||
                request.method === Web3Method_1.Web3Method.addEthereumChain) {
                const cancel = () => {
                    this.handleWeb3ResponseMessage((0, Web3ResponseMessage_1.Web3ResponseMessage)({
                        id,
                        response: (0, Web3Response_1.SwitchEthereumChainResponse)(false)
                    }));
                };
                const approve = () => {
                    this.handleWeb3ResponseMessage((0, Web3ResponseMessage_1.Web3ResponseMessage)({
                        id,
                        response: (0, Web3Response_1.SwitchEthereumChainResponse)(true)
                    }));
                };
                this.ui.switchEthereumChain({
                    onCancel: cancel,
                    onApprove: approve,
                    chainId: request.params.chainId
                });
                if (!this.ui.inlineSwitchEthereumChain()) {
                    hideSnackbarItem = this.ui.showConnecting({
                        onCancel: cancel,
                        onResetConnection: this.resetAndReload
                    });
                }
            }
            else if (this.ui.isStandalone()) {
                const onCancel = () => {
                    this.handleWeb3ResponseMessage((0, Web3ResponseMessage_1.Web3ResponseMessage)({
                        id,
                        response: (0, Web3Response_1.ErrorResponse)(request.method, "User rejected request")
                    }));
                };
                const onSuccess = (response) => {
                    this.handleWeb3ResponseMessage((0, Web3ResponseMessage_1.Web3ResponseMessage)({
                        id,
                        response: response
                    }));
                };
                switch (request.method) {
                    case Web3Method_1.Web3Method.signEthereumMessage:
                        this.ui.signEthereumMessage({
                            request: request,
                            onSuccess,
                            onCancel
                        });
                        break;
                    case Web3Method_1.Web3Method.signEthereumTransaction:
                        this.ui.signEthereumTransaction({
                            request: request,
                            onSuccess,
                            onCancel
                        });
                        break;
                    case Web3Method_1.Web3Method.submitEthereumTransaction:
                        this.ui.submitEthereumTransaction({
                            request: request,
                            onSuccess,
                            onCancel
                        });
                        break;
                    case Web3Method_1.Web3Method.ethereumAddressFromSignedMessage:
                        this.ui.ethereumAddressFromSignedMessage({
                            request: request,
                            onSuccess
                        });
                        break;
                    default:
                        onCancel();
                        break;
                }
            }
            else {
                hideSnackbarItem = this.ui.showConnecting({
                    onCancel: cancel,
                    onResetConnection: this.resetAndReload
                });
            }
            this.relayEventManager.callbacks.set(id, response => {
                this.ui.hideRequestEthereumAccounts();
                hideSnackbarItem === null || hideSnackbarItem === void 0 ? void 0 : hideSnackbarItem();
                if (response.errorMessage) {
                    return reject(new Error(response.errorMessage));
                }
                resolve(response);
            });
            if ((isRequestAccounts && this.ui.inlineAccountsResponse()) ||
                (isSwitchEthereumChain && this.ui.inlineSwitchEthereumChain()) ||
                this.ui.isStandalone()) {
                return;
            }
            this.publishWeb3RequestEvent(id, request);
        });
        return { promise, cancel };
    }
    setConnectDisabled(disabled) {
        this.ui.setConnectDisabled(disabled);
    }
    setAccountsCallback(accountsCallback) {
        this.accountsCallback = accountsCallback;
    }
    setChainIdCallback(chainIdCallback) {
        this.chainIdCallback = chainIdCallback;
        this.ui.setChainIdCallback(chainIdCallback);
    }
    setJsonRpcUrlCallback(jsonRpcUrlCallback) {
        this.jsonRpcUrlCallback = jsonRpcUrlCallback;
    }
    publishWeb3RequestEvent(id, request) {
        const message = (0, Web3RequestMessage_1.Web3RequestMessage)({ id, request });
        this.subscriptions.add(this.publishEvent("Web3Request", message, true).subscribe({
            error: err => {
                this.handleWeb3ResponseMessage((0, Web3ResponseMessage_1.Web3ResponseMessage)({
                    id: message.id,
                    response: {
                        method: message.request.method,
                        errorMessage: err.message
                    }
                }));
            }
        }));
    }
    publishWeb3RequestCanceledEvent(id) {
        const message = (0, Web3RequestCanceledMessage_1.Web3RequestCanceledMessage)(id);
        this.subscriptions.add(this.publishEvent("Web3RequestCanceled", message, false).subscribe());
    }
    publishEvent(event, message, callWebhook) {
        const secret = this.session.secret;
        return new rxjs_1.Observable(subscriber => {
            aes256gcm
                .encrypt(JSON.stringify(Object.assign(Object.assign({}, message), { origin: location.origin })), secret)
                .then((encrypted) => {
                subscriber.next(encrypted);
                subscriber.complete();
            });
        }).pipe((0, operators_1.mergeMap)((encrypted) => {
            return this.connection.publishEvent(event, encrypted, callWebhook);
        }));
    }
    handleIncomingEvent(event) {
        try {
            this.subscriptions.add(aes256gcm
                .decrypt(event.data, this.session.secret)
                .pipe((0, operators_1.map)(c => JSON.parse(c)))
                .subscribe({
                next: json => {
                    const message = (0, Web3ResponseMessage_1.isWeb3ResponseMessage)(json) ? json : null;
                    if (!message) {
                        return;
                    }
                    this.handleWeb3ResponseMessage(message);
                },
                error: () => {
                    var _a;
                    (_a = this.walletLinkAnalytics) === null || _a === void 0 ? void 0 : _a.sendEvent(init_1.EVENTS.GENERAL_ERROR, { message: 'Had error decrypting', value: 'incomingEvent' });
                }
            }));
        }
        catch (_a) {
            return;
        }
    }
    handleWeb3ResponseMessage(message) {
        const { response } = message;
        if ((0, Web3Response_1.isRequestEthereumAccountsResponse)(response)) {
            Array.from(WalletLinkRelay.accountRequestCallbackIds.values()).forEach(id => this.invokeCallback(Object.assign(Object.assign({}, message), { id })));
            WalletLinkRelay.accountRequestCallbackIds.clear();
            return;
        }
        this.invokeCallback(message);
    }
    invokeCallback(message) {
        const callback = this.relayEventManager.callbacks.get(message.id);
        if (callback) {
            callback(message.response);
            this.relayEventManager.callbacks.delete(message.id);
        }
    }
    switchEthereumChain(chainId) {
        return this.sendRequest({
            method: Web3Method_1.Web3Method.switchEthereumChain,
            params: {
                chainId
            }
        });
    }
}
WalletLinkRelay.accountRequestCallbackIds = new Set();
__decorate([
    bind_decorator_1.default
], WalletLinkRelay.prototype, "resetAndReload", null);
__decorate([
    bind_decorator_1.default
], WalletLinkRelay.prototype, "handleIncomingEvent", null);
exports.WalletLinkRelay = WalletLinkRelay;
