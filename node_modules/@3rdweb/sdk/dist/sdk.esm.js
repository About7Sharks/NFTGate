import fetch$1 from 'node-fetch';
import { arrayify, hexZeroPad } from '@ethersproject/bytes';
import { Contract } from '@ethersproject/contracts';
import { ERC20__factory, Forwarder__factory, Coin__factory, ProtocolControl__factory, NFTCollection__factory, Royalty__factory, NFT__factory, Market__factory, Pack__factory, LazyNFT__factory, DataStore__factory, ERC1155__factory, ERC721__factory, ERC165__factory, Registry__factory } from '@3rdweb/contracts';
import { AddressZero } from '@ethersproject/constants';
import { formatUnits, parseUnits } from '@ethersproject/units';
import { ethers, BigNumber, Signer } from 'ethers';
import { $enum } from 'ts-enum-util';
import { Provider } from '@ethersproject/providers';
import { JsonProperty, PropertyConvertingMode, JsonObject, JsonConvert } from 'json2typescript';
import { __decorate } from 'tslib';
import { BigNumber as BigNumber$1 } from '@ethersproject/bignumber';
import { keccak256 } from '@ethersproject/keccak256';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

if (!globalThis.FormData) {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  globalThis.FormData = /*#__PURE__*/require("form-data");
}
/**
 *
 * @param ipfsUrl - the ipfs:// uri
 * @param gatewayUrl - the gateway url
 * @returns the fully formed IPFS url
 * @internal
 */


function replaceIpfsWithGateway(ipfsUrl, gatewayUrl) {
  if (!ipfsUrl || typeof ipfsUrl !== "string") {
    return "";
  }

  if (!gatewayUrl.endsWith("/")) {
    gatewayUrl = gatewayUrl + "/";
  }

  return ipfsUrl.replace("ipfs://", gatewayUrl);
}
/**
 * A helper function to upload arbitrary data to IPFS and return the resulting IPFS uri.
 * @param data - stringified JSON || File
 * @param contractAddress - (Optional) the contract address to associate the data with
 * @param signerAddress - (Optional) the wallet address of the actor that is uploading the file
 * @returns The `ipfs://<hash>` uri of the uploaded file
 * @public
 */

function uploadToIPFS(_x, _x2, _x3) {
  return _uploadToIPFS.apply(this, arguments);
}
/**
 * @internal
 */

function _uploadToIPFS() {
  _uploadToIPFS = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(data, contractAddress, signerAddress) {
    var headers, formData, res, body;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            headers = {
              "X-App-Name": "CONSOLE-TS-SDK-" + contractAddress,
              "X-Public-Address": signerAddress || ""
            };
            formData = new FormData();
            formData.append("file", data);
            _context.next = 5;
            return fetch("https://upload.nftlabs.co/upload", {
              method: "POST",
              body: formData,
              headers: headers
            });

          case 5:
            res = _context.sent;
            _context.next = 8;
            return res.json();

          case 8:
            body = _context.sent;
            return _context.abrupt("return", body.IpfsUri);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _uploadToIPFS.apply(this, arguments);
}

function uploadMetadata(_x4, _x5, _x6) {
  return _uploadMetadata.apply(this, arguments);
}

function _uploadMetadata() {
  _uploadMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(metadata, contractAddress, signerAddress) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof metadata === "string")) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return", metadata);

          case 2:
            _context2.next = 4;
            return uploadToIPFS(JSON.stringify(metadata), contractAddress, signerAddress);

          case 4:
            return _context2.abrupt("return", _context2.sent);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _uploadMetadata.apply(this, arguments);
}

/**
 * @internal
 */

var InterfaceId_IERC721 = /*#__PURE__*/arrayify("0x80ac58cd");
/**
 * @internal
 */

var InterfaceId_IERC1155 = /*#__PURE__*/arrayify("0xd9b67a26");
var contractUriABI = [{
  inputs: [],
  name: "contractURI",
  outputs: [{
    internalType: "string",
    name: "",
    type: "string"
  }],
  stateMutability: "view",
  type: "function"
}];
/**
 * @internal
 */

function getContractMetadata(_x, _x2, _x3) {
  return _getContractMetadata.apply(this, arguments);
}
/**
 * @internal
 */

function _getContractMetadata() {
  _getContractMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(provider, address, ipfsGatewayUrl) {
    var contract, uri, gatewayUrl, meta, metadata, entity;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            contract = new Contract(address, contractUriABI, provider);
            _context.next = 3;
            return contract.contractURI();

          case 3:
            uri = _context.sent;
            gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);
            _context.next = 7;
            return fetch(gatewayUrl);

          case 7:
            meta = _context.sent;
            _context.next = 10;
            return meta.json();

          case 10:
            metadata = _context.sent;
            entity = _extends({}, metadata, {
              uri: uri,
              image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl)
            });
            return _context.abrupt("return", entity);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getContractMetadata.apply(this, arguments);
}

function isContract(_x4, _x5) {
  return _isContract.apply(this, arguments);
}

function _isContract() {
  _isContract = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(provider, address) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return provider.getCode(address);

          case 2:
            _context2.t0 = _context2.sent;
            return _context2.abrupt("return", _context2.t0 !== "0x");

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _isContract.apply(this, arguments);
}

/**
 * @internal
 */

function getCurrencyMetadata(_x, _x2) {
  return _getCurrencyMetadata.apply(this, arguments);
}
/**
 * @internal
 */

function _getCurrencyMetadata() {
  _getCurrencyMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(providerOrSigner, asset) {
    var erc20, _yield$Promise$all, name, symbol, decimals;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (!(asset.toLowerCase() !== AddressZero)) {
              _context.next = 10;
              break;
            }

            erc20 = ERC20__factory.connect(asset, providerOrSigner);
            _context.next = 5;
            return Promise.all([erc20.name(), erc20.symbol(), erc20.decimals()]);

          case 5:
            _yield$Promise$all = _context.sent;
            name = _yield$Promise$all[0];
            symbol = _yield$Promise$all[1];
            decimals = _yield$Promise$all[2];
            return _context.abrupt("return", {
              name: name,
              symbol: symbol,
              decimals: decimals
            });

          case 10:
            _context.next = 14;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](0);

          case 14:
            return _context.abrupt("return", {
              name: "",
              symbol: "",
              decimals: 0
            });

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 12]]);
  }));
  return _getCurrencyMetadata.apply(this, arguments);
}

function getCurrencyValue(_x3, _x4, _x5) {
  return _getCurrencyValue.apply(this, arguments);
}

function _getCurrencyValue() {
  _getCurrencyValue = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(providerOrSigner, asset, price) {
    var metadata;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getCurrencyMetadata(providerOrSigner, asset);

          case 2:
            metadata = _context2.sent;
            return _context2.abrupt("return", _extends({}, metadata, {
              value: price.toString(),
              displayValue: formatUnits(price, metadata.decimals)
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getCurrencyValue.apply(this, arguments);
}

/**
 * Error that may get thrown if IPFS returns nothing for a given uri.
 * @public
 */
var NotFoundError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(NotFoundError, _Error);

  /** @internal */
  function NotFoundError() {
    return _Error.call(this, "NOT_FOUND") || this;
  }

  return NotFoundError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var ChainId;

(function (ChainId) {
  ChainId[ChainId["Mainnet"] = 1] = "Mainnet";
  ChainId[ChainId["Ropsten"] = 3] = "Ropsten";
  ChainId[ChainId["Rinkeby"] = 4] = "Rinkeby";
  ChainId[ChainId["Goerli"] = 5] = "Goerli";
  ChainId[ChainId["Kovan"] = 42] = "Kovan";
  ChainId[ChainId["BSC"] = 56] = "BSC";
  ChainId[ChainId["xDai"] = 100] = "xDai";
  ChainId[ChainId["Polygon"] = 137] = "Polygon";
  ChainId[ChainId["Moonriver"] = 1285] = "Moonriver";
  ChainId[ChainId["Mumbai"] = 80001] = "Mumbai";
  ChainId[ChainId["Harmony"] = 1666600000] = "Harmony";
  ChainId[ChainId["Localhost"] = 1337] = "Localhost";
  ChainId[ChainId["Hardhat"] = 31337] = "Hardhat";
  ChainId[ChainId["Fantom"] = 250] = "Fantom";
  ChainId[ChainId["FantomTestnet"] = 4002] = "FantomTestnet";
  ChainId[ChainId["Avalanche"] = 43114] = "Avalanche";
  ChainId[ChainId["AvalancheFujiTestnet"] = 43113] = "AvalancheFujiTestnet";
})(ChainId || (ChainId = {}));

var _ChainlinkVrf;
/**
 *
 * @internal
 */

var ChainlinkVrf = (_ChainlinkVrf = {}, _ChainlinkVrf[ChainId.Polygon] = {
  vrfCoordinator: "0x3d2341ADb2D31f1c5530cDC622016af293177AE0",
  linkTokenAddress: "0xb0897686c545045aFc77CF20eC7A532E3120E0F1",
  keyHash: "0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",
  fees: /*#__PURE__*/ethers.utils.parseEther("0.0001")
}, _ChainlinkVrf[ChainId.Mumbai] = {
  vrfCoordinator: "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
  linkTokenAddress: "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
  keyHash: "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
  fees: /*#__PURE__*/ethers.utils.parseEther("0.0001")
}, _ChainlinkVrf[ChainId.Rinkeby] = {
  vrfCoordinator: "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
  linkTokenAddress: "0x01be23585060835e02b77ef475b0cc51aa1e0709",
  keyHash: "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
  fees: /*#__PURE__*/ethers.utils.parseEther("0.1")
}, _ChainlinkVrf[ChainId.Mainnet] = {
  vrfCoordinator: "0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",
  linkTokenAddress: "0x514910771AF9Ca656af840dff83E8264EcF986CA",
  keyHash: "0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",
  fees: /*#__PURE__*/ethers.utils.parseEther("2")
}, _ChainlinkVrf);

/**
 * The type of Modules that are available.
 * @public
 */

var ModuleType;

(function (ModuleType) {
  ModuleType[ModuleType["CURRENCY"] = 0] = "CURRENCY";
  ModuleType[ModuleType["COLLECTION"] = 1] = "COLLECTION";
  ModuleType[ModuleType["NFT"] = 2] = "NFT";
  ModuleType[ModuleType["DYNAMIC_NFT"] = 3] = "DYNAMIC_NFT";
  ModuleType[ModuleType["ACCESS_NFT"] = 4] = "ACCESS_NFT";
  ModuleType[ModuleType["PACK"] = 5] = "PACK";
  ModuleType[ModuleType["MARKET"] = 6] = "MARKET";
  ModuleType[ModuleType["DROP"] = 7] = "DROP";
  ModuleType[ModuleType["DATASTORE"] = 8] = "DATASTORE";
  ModuleType[ModuleType["SPLITS"] = 9] = "SPLITS";
})(ModuleType || (ModuleType = {}));
/**
 *
 * @param moduleName - a supported module name
 * @returns The {@link ModuleType} or undefined
 * @public
 */


function convertNameToModuleType(moduleName) {
  return $enum(ModuleType).getValueOrDefault(moduleName == null ? void 0 : moduleName.toUpperCase(), undefined);
}
/**
 *
 * @param moduleType - A {@link ModuleType}
 * @returns The name of the given {@link ModuleType} or undefined
 * @public
 */

function convertModuleTypeToName(moduleType) {
  return $enum(ModuleType).getKeyOrDefault(moduleType, undefined);
}

var tokenUriABI = [{
  inputs: [{
    internalType: "uint256",
    name: "tokenId",
    type: "uint256"
  }],
  name: "tokenURI",
  outputs: [{
    internalType: "string",
    name: "",
    type: "string"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "",
    type: "uint256"
  }],
  name: "uri",
  outputs: [{
    internalType: "string",
    name: "",
    type: "string"
  }],
  stateMutability: "view",
  type: "function"
}];
/**
/* @internal
 */

function getMetadataWithoutContract(_x, _x2, _x3, _x4) {
  return _getMetadataWithoutContract.apply(this, arguments);
}
/**
/* @internal
 */

function _getMetadataWithoutContract() {
  _getMetadataWithoutContract = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(provider, contractAddress, tokenId, ipfsGatewayUrl) {
    var contract;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            contract = new Contract(contractAddress, tokenUriABI, provider);
            return _context.abrupt("return", getTokenMetadata(contract, tokenId, ipfsGatewayUrl));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getMetadataWithoutContract.apply(this, arguments);
}

function getTokenMetadata(_x5, _x6, _x7) {
  return _getTokenMetadata.apply(this, arguments);
}
/**
/* @internal
 */

function _getTokenMetadata() {
  _getTokenMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(contract, tokenId, ipfsGatewayUrl) {
    var uri, gatewayUrl, meta, metadata, entity;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getTokenUri(contract, tokenId);

          case 2:
            uri = _context2.sent;

            if (uri) {
              _context2.next = 5;
              break;
            }

            throw new NotFoundError();

          case 5:
            gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);
            _context2.next = 8;
            return fetch(gatewayUrl);

          case 8:
            meta = _context2.sent;
            _context2.next = 11;
            return meta.json();

          case 11:
            metadata = _context2.sent;
            entity = _extends({}, metadata, {
              id: tokenId,
              uri: uri,
              image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl)
            });
            return _context2.abrupt("return", entity);

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getTokenMetadata.apply(this, arguments);
}

function getTokenUri(_x8, _x9) {
  return _getTokenUri.apply(this, arguments);
}

function _getTokenUri() {
  _getTokenUri = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(contract, tokenId) {
    var uri;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            uri = "";
            _context3.prev = 1;
            _context3.next = 4;
            return contract.tokenURI(tokenId);

          case 4:
            uri = _context3.sent;
            _context3.next = 9;
            break;

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3["catch"](1);

          case 9:
            if (uri) {
              _context3.next = 18;
              break;
            }

            _context3.prev = 10;
            _context3.next = 13;
            return contract.uri(tokenId);

          case 13:
            uri = _context3.sent;
            _context3.next = 18;
            break;

          case 16:
            _context3.prev = 16;
            _context3.t1 = _context3["catch"](10);

          case 18:
            return _context3.abrupt("return", uri);

          case 19:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[1, 7], [10, 16]]);
  }));
  return _getTokenUri.apply(this, arguments);
}

/**
 *
 * @internal
 */

var RolesMap = {
  admin: "admin",
  minter: "minter",
  pauser: "pauser",
  transfer: "transfer",
  editor: "editor",
  lister: "lister"
};
/**
 *
 * @internal
 */

var _role = {
  admin: "",
  transfer: "TRANSFER_ROLE",
  minter: "MINTER_ROLE",
  pauser: "PAUSER_ROLE",
  editor: "EDITOR_ROLE",
  lister: "LISTER_ROLE"
};
/**
 * @internal
 */

function getRoleHash(role) {
  if (role === "admin") {
    return ethers.utils.hexZeroPad([0], 32);
  }

  return ethers.utils.keccak256(ethers.utils.toUtf8Bytes(_role[role]));
}

/**
 * @internal
 */

function getGasStationUrl(chainId) {
  if (!chainId) {
    return null;
  }

  if (chainId === ChainId.Polygon) {
    return "https://gasstation-mainnet.matic.network";
  }

  return null;
}
/**
 *
 * @returns the gas price
 * @internal
 */


function getGasPriceForChain(_x, _x2, _x3) {
  return _getGasPriceForChain.apply(this, arguments);
}

function _getGasPriceForChain() {
  _getGasPriceForChain = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(chainId, speed, maxGasPrice) {
    var gasStationUrl, data, gas;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            gasStationUrl = getGasStationUrl(chainId);

            if (gasStationUrl) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", null);

          case 3:
            _context.prev = 3;
            _context.next = 6;
            return fetch(gasStationUrl);

          case 6:
            _context.next = 8;
            return _context.sent.json();

          case 8:
            data = _context.sent;
            gas = data[speed];

            if (!(gas > 0)) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("return", Math.min(gas, maxGasPrice));

          case 12:
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](3);
            console.error("failed to fetch gas", _context.t0);

          case 17:
            return _context.abrupt("return", null);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 14]]);
  }));
  return _getGasPriceForChain.apply(this, arguments);
}

var _CONTRACT_ADDRESSES;
var FORWARDER_ADDRESS = "0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81";
var CONTRACT_ADDRESSES = (_CONTRACT_ADDRESSES = {}, _CONTRACT_ADDRESSES[ChainId.Mainnet] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Rinkeby] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Polygon] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Mumbai] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Avalanche] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.AvalancheFujiTestnet] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Fantom] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.FantomTestnet] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES);
function getContractAddressByChainId(chainId) {
  return CONTRACT_ADDRESSES[chainId]["registry"];
}

/**
 * @internal
 * @param condition - any truthy condition to assert
 * @param message  - optional message to use if the condition is falsy
 */

function invariant(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/**
 * @internal
 */

var ForwardRequest = [{
  name: "from",
  type: "address"
}, {
  name: "to",
  type: "address"
}, {
  name: "value",
  type: "uint256"
}, {
  name: "gas",
  type: "uint256"
}, {
  name: "nonce",
  type: "uint256"
}, {
  name: "data",
  type: "bytes"
}];
var _nonces = {};
function getAndIncrementNonce(_x, _x2) {
  return _getAndIncrementNonce.apply(this, arguments);
}

function _getAndIncrementNonce() {
  _getAndIncrementNonce = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(forwarder, address) {
    var nonce;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (address in _nonces) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return forwarder.getNonce(address);

          case 3:
            _nonces[address] = _context.sent;

          case 4:
            nonce = _nonces[address];
            _nonces[address] = BigNumber.from(_nonces[address]).add(1);
            return _context.abrupt("return", nonce);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getAndIncrementNonce.apply(this, arguments);
}

/**
 * The root Module class. All other Modules extend this.
 * @remarks This should never be instantiated directly.
 * @public
 */

var Module = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function Module(providerOrSigner, address, options, sdk) {
    this.address = void 0;
    this.ipfsGatewayUrl = void 0;
    this.options = void 0;
    this.sdk = void 0;
    this._providerOrSigner = null;
    this._signer = null;
    this.contract = void 0;
    this.readOnlyContract = void 0;
    this.address = address;
    this.options = options;
    this.ipfsGatewayUrl = options.ipfsGatewayUrl;
    this.setProviderOrSigner(providerOrSigner);
    this.contract = this.connectContract();
    this.readOnlyContract = this.options.readOnlyRpcUrl ? this.contract.connect(ethers.getDefaultProvider(this.options.readOnlyRpcUrl)) : this.contract;
    this.sdk = sdk;
  }
  /**
   * @public
   * @returns whether the given contract exists on-chain
   */


  var _proto = Module.prototype;

  _proto.exists =
  /*#__PURE__*/
  function () {
    var _exists = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var provider;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getProvider();

            case 2:
              provider = _context.sent;
              !provider ? process.env.NODE_ENV !== "production" ? invariant(false, "exists() -- No Provider") : invariant(false) : void 0;
              return _context.abrupt("return", isContract(provider, this.address));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function exists() {
      return _exists.apply(this, arguments);
    }

    return exists;
  }()
  /**
   * @public
   * Get the metadata of the contract.
   */
  ;

  _proto.getMetadata =
  /*#__PURE__*/
  function () {
    var _getMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var contract, type;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.exists();

            case 2:
              if (_context2.sent) {
                _context2.next = 6;
                break;
              }

              process.env.NODE_ENV !== "production" ? invariant(false, "contract does not exist") : invariant(false);
              _context2.next = 7;
              break;

            case 6:

            case 7:
              contract = this.connectContract();
              type = this.getModuleType();
              _context2.next = 11;
              return getContractMetadata(this.getProviderOrSigner(), contract.address, this.options.ipfsGatewayUrl);

            case 11:
              _context2.t0 = _context2.sent;
              _context2.t1 = contract.address;
              _context2.t2 = type;
              return _context2.abrupt("return", {
                metadata: _context2.t0,
                address: _context2.t1,
                type: _context2.t2
              });

            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getMetadata() {
      return _getMetadata.apply(this, arguments);
    }

    return getMetadata;
  }()
  /**
   * @public
   * Set new metadata on the contract and return it if successful.
   * @param metadata - The metadata to set.
   */
  ;

  _proto.setMetadata =
  /*#__PURE__*/
  function () {
    var _setMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(metadata) {
      var uri;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.exists();

            case 2:
              if (_context3.sent) {
                _context3.next = 6;
                break;
              }

              process.env.NODE_ENV !== "production" ? invariant(false, "contract does not exist") : invariant(false);
              _context3.next = 7;
              break;

            case 6:

            case 7:
              _context3.next = 9;
              return uploadMetadata(metadata);

            case 9:
              uri = _context3.sent;
              _context3.next = 12;
              return this.sendTransaction("setContractURI", [uri]);

            case 12:
              return _context3.abrupt("return", this.getMetadata());

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function setMetadata(_x) {
      return _setMetadata.apply(this, arguments);
    }

    return setMetadata;
  }()
  /**
   * @internal
   */
  ;

  _proto.setProviderOrSigner = function setProviderOrSigner(providerOrSigner) {
    this.providerOrSigner = providerOrSigner;

    if (Signer.isSigner(providerOrSigner)) {
      this.signer = providerOrSigner;
    }

    this.contract = this.connectContract();
    this.readOnlyContract = this.options.readOnlyRpcUrl ? this.contract.connect(ethers.getDefaultProvider(this.options.readOnlyRpcUrl)) : this.contract;
  }
  /**
   * @internal
   */
  ;

  _proto.clearSigner = function clearSigner() {
    this.signer = null;
  }
  /**
   * @internal
   */
  ;

  _proto.getProviderOrSigner = function getProviderOrSigner() {
    return this.signer || this.providerOrSigner;
  }
  /**
   * @internal
   */
  ;

  _proto.getSigner = function getSigner() {
    if (Signer.isSigner(this.signer)) {
      return this.signer;
    }

    return null;
  }
  /**
   * @internal
   */
  ;

  _proto.hasValidSigner = function hasValidSigner() {
    return Signer.isSigner(this.signer);
  }
  /**
   * @internal
   */
  ;

  _proto.getSignerAddress =
  /*#__PURE__*/
  function () {
    var _getSignerAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var signer;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              signer = this.getSigner();
              !signer ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot get signer address without valid signer") : invariant(false) : void 0;
              _context4.next = 4;
              return signer.getAddress();

            case 4:
              return _context4.abrupt("return", _context4.sent);

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getSignerAddress() {
      return _getSignerAddress.apply(this, arguments);
    }

    return getSignerAddress;
  }()
  /**
   * @internal
   */
  ;

  _proto.getProvider =
  /*#__PURE__*/
  function () {
    var _getProvider = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      var provider;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              provider = Signer.isSigner(this.getProviderOrSigner()) ? this.providerOrSigner.provider : this.providerOrSigner;
              return _context5.abrupt("return", provider);

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getProvider() {
      return _getProvider.apply(this, arguments);
    }

    return getProvider;
  }()
  /**
   * @internal
   */
  ;

  _proto.getChainID =
  /*#__PURE__*/
  function () {
    var _getChainID = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      var provider, _yield$provider$getNe, chainId;

      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.getProvider();

            case 2:
              provider = _context6.sent;
              !provider ? process.env.NODE_ENV !== "production" ? invariant(false, "getChainID() -- No Provider") : invariant(false) : void 0;
              _context6.next = 6;
              return provider.getNetwork();

            case 6:
              _yield$provider$getNe = _context6.sent;
              chainId = _yield$provider$getNe.chainId;
              return _context6.abrupt("return", chainId);

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getChainID() {
      return _getChainID.apply(this, arguments);
    }

    return getChainID;
  }()
  /**
   * @virtual
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    throw new Error("connectContract has to be implemented");
  }
  /**
   * @virtual
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    throw new Error("getModuleType has to be implemented");
  }
  /**
   * @internal
   */
  ;

  _proto.getCallOverrides =
  /*#__PURE__*/
  function () {
    var _getCallOverrides = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      var chainId, speed, maxGasPrice, gasPriceChain;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.getChainID();

            case 2:
              chainId = _context7.sent;
              speed = this.options.gasSpeed;
              maxGasPrice = this.options.maxGasPriceInGwei;
              _context7.next = 7;
              return getGasPriceForChain(chainId, speed, maxGasPrice);

            case 7:
              gasPriceChain = _context7.sent;

              if (gasPriceChain) {
                _context7.next = 10;
                break;
              }

              return _context7.abrupt("return", {});

            case 10:
              return _context7.abrupt("return", {
                gasPrice: ethers.utils.parseUnits(gasPriceChain.toString(), "gwei")
              });

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getCallOverrides() {
      return _getCallOverrides.apply(this, arguments);
    }

    return getCallOverrides;
  }()
  /**
   * @internal
   */
  ;

  _proto.sendTransaction =
  /*#__PURE__*/
  function () {
    var _sendTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(fn, args, callOverrides) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (callOverrides) {
                _context8.next = 4;
                break;
              }

              _context8.next = 3;
              return this.getCallOverrides();

            case 3:
              callOverrides = _context8.sent;

            case 4:
              if (!this.options.transactionRelayerUrl) {
                _context8.next = 10;
                break;
              }

              _context8.next = 7;
              return this.sendGaslessTransaction(fn, args, callOverrides);

            case 7:
              return _context8.abrupt("return", _context8.sent);

            case 10:
              _context8.next = 12;
              return this.sendAndWaitForTransaction(fn, args, callOverrides);

            case 12:
              return _context8.abrupt("return", _context8.sent);

            case 13:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function sendTransaction(_x2, _x3, _x4) {
      return _sendTransaction.apply(this, arguments);
    }

    return sendTransaction;
  }()
  /**
   * @internal
   */
  ;

  _proto.sendAndWaitForTransaction =
  /*#__PURE__*/
  function () {
    var _sendAndWaitForTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(fn, args, callOverrides) {
      var _contract$functions;

      var contract, tx;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              contract = this.contract;
              _context9.next = 3;
              return (_contract$functions = contract.functions)[fn].apply(_contract$functions, args.concat([callOverrides]));

            case 3:
              tx = _context9.sent;

              if (!tx.wait) {
                _context9.next = 8;
                break;
              }

              _context9.next = 7;
              return tx.wait();

            case 7:
              return _context9.abrupt("return", _context9.sent);

            case 8:
              return _context9.abrupt("return", tx);

            case 9:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function sendAndWaitForTransaction(_x5, _x6, _x7) {
      return _sendAndWaitForTransaction.apply(this, arguments);
    }

    return sendAndWaitForTransaction;
  }()
  /**
   * @internal
   */
  ;

  _proto.sendGaslessTransaction =
  /*#__PURE__*/
  function () {
    var _sendGaslessTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(fn, args, callOverrides) {
      var _contract$estimateGas;

      var signer, provider, chainId, contract, from, to, value, data, gas, forwarderAddress, forwarder, nonce, domain, types, message, signature, txHash;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              console.log("callOverrides", callOverrides);
              signer = this.getSigner();
              !signer ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot execute gasless transaction without valid signer") : invariant(false) : void 0;
              _context10.next = 5;
              return this.getProvider();

            case 5:
              provider = _context10.sent;
              !provider ? process.env.NODE_ENV !== "production" ? invariant(false, "no provider to execute transaction") : invariant(false) : void 0;
              _context10.next = 9;
              return this.getChainID();

            case 9:
              chainId = _context10.sent;
              contract = this.contract;
              _context10.next = 13;
              return this.getSignerAddress();

            case 13:
              from = _context10.sent;
              to = this.address;
              value = 0;
              data = contract["interface"].encodeFunctionData(fn, args);
              _context10.next = 19;
              return (_contract$estimateGas = contract.estimateGas)[fn].apply(_contract$estimateGas, args);

            case 19:
              gas = _context10.sent.mul(2);
              forwarderAddress = this.options.transactionRelayerForwarderAddress;
              forwarder = Forwarder__factory.connect(forwarderAddress, this.getProviderOrSigner());
              _context10.next = 24;
              return getAndIncrementNonce(forwarder, from);

            case 24:
              nonce = _context10.sent;
              domain = {
                name: "GSNv2 Forwarder",
                version: "0.0.1",
                chainId: chainId,
                verifyingContract: forwarderAddress
              };
              types = {
                ForwardRequest: ForwardRequest
              };
              message = {
                from: from,
                to: to,
                value: BigNumber.from(value).toString(),
                gas: BigNumber.from(gas).toString(),
                nonce: BigNumber.from(nonce).toString(),
                data: data
              };
              _context10.next = 30;
              return signer._signTypedData(domain, types, message);

            case 30:
              signature = _context10.sent;
              _context10.next = 33;
              return this.options.transactionRelayerSendFunction(message, signature);

            case 33:
              txHash = _context10.sent;
              _context10.next = 36;
              return provider.waitForTransaction(txHash);

            case 36:
              return _context10.abrupt("return", _context10.sent);

            case 37:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function sendGaslessTransaction(_x8, _x9, _x10) {
      return _sendGaslessTransaction.apply(this, arguments);
    }

    return sendGaslessTransaction;
  }();

  _proto.parseEventLogs = function parseEventLogs(eventName, logs) {
    if (!logs) {
      return null;
    }

    var contract = this.contract;

    for (var _iterator = _createForOfIteratorHelperLoose(logs), _step; !(_step = _iterator()).done;) {
      var log = _step.value;

      try {
        var event = contract["interface"].decodeEventLog(eventName, log.data, log.topics);
        return event; // eslint-disable-next-line no-empty
      } catch (e) {}
    }

    return null;
  };

  _createClass(Module, [{
    key: "providerOrSigner",
    get:
    /**
     * @readonly
     */

    /**
     * @internal
     * @readonly
     */

    /**
     * @internal
     * @readonly
     */

    /**
     * @internal
     */

    /**
     * @internal
     */
    function get() {
      return this.signer || this._providerOrSigner || this.getProviderOrSigner();
    },
    set: function set(value) {
      this._providerOrSigner = value;
    }
    /**
     * @internal
     */

  }, {
    key: "signer",
    get:
    /**
     * @internal
     */
    function get() {
      return this._signer;
    },
    set: function set(value) {
      this._signer = value;
    }
    /**
     * Contract connects to the SDK signer or provider
     * @internal
     */

  }]);

  return Module;
}();
/**
 * Extends the {@link Module} class to add {@link Role} functionality.
 *
 * @public
 */

var ModuleWithRoles = /*#__PURE__*/function (_Module) {
  _inheritsLoose(ModuleWithRoles, _Module);

  var _proto2 = ModuleWithRoles.prototype;

  /**
   * @virtual
   * @internal
   */
  _proto2.getModuleRoles = function getModuleRoles() {
    throw new Error("getModuleRoles has to be implemented by a subclass");
  }
  /**
   * @internal
   */
  ;

  /** @internal */
  function ModuleWithRoles(providerOrSigner, address, options, sdk) {
    return _Module.call(this, providerOrSigner, address, options, sdk) || this;
  }
  /**
   * Call this to get a list of addresses that are members of a specific role.
   *
   * @param role - The {@link IRoles | role} to to get a memberlist for.
   * @returns The list of addresses that are members of the specific role.
   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.
   * @see {@link ModuleWithRoles.getAllRoleMembers | getAllRoleMembers} to get get a list of addresses for all supported roles on the module.
   * @example Say you want to get the list of addresses that are members of the {@link IRoles.minter | minter} role.
   * ```typescript
   * const minterAddresses: string[] = await module.getRoleMemberList("minter");
   * ```
   *
   * @public
   */


  _proto2.getRoleMembers =
  /*#__PURE__*/
  function () {
    var _getRoleMembers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(role) {
      var contract, roleHash, count;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              !this.roles.includes(role) ? process.env.NODE_ENV !== "production" ? invariant(false, "this module does not support the \"" + role + "\" role") : invariant(false) : void 0;
              contract = this.contract;
              roleHash = getRoleHash(role);
              _context11.next = 5;
              return contract.getRoleMemberCount(roleHash);

            case 5:
              count = _context11.sent.toNumber();
              _context11.next = 8;
              return Promise.all(Array.from(Array(count).keys()).map(function (i) {
                return contract.getRoleMember(roleHash, i);
              }));

            case 8:
              return _context11.abrupt("return", _context11.sent);

            case 9:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function getRoleMembers(_x11) {
      return _getRoleMembers.apply(this, arguments);
    }

    return getRoleMembers;
  }()
  /**
   * Call this to get get a list of addresses for all supported roles on the module.
   *
   * @see {@link ModuleWithRoles.getRoleMembers | getRoleMembers} to get a list of addresses that are members of a specific role.
   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.
   * @throws If the module does not support roles this will throw an {@link InvariantError}.
   *
   * @public
   */
  ;

  _proto2.getAllRoleMembers =
  /*#__PURE__*/
  function () {
    var _getAllRoleMembers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
      var roles, _iterator2, _step2, role;

      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              !this.roles.length ? process.env.NODE_ENV !== "production" ? invariant(false, "this module has no support for roles") : invariant(false) : void 0;
              roles = {};
              _iterator2 = _createForOfIteratorHelperLoose(this.roles);

            case 3:
              if ((_step2 = _iterator2()).done) {
                _context12.next = 10;
                break;
              }

              role = _step2.value;
              _context12.next = 7;
              return this.getRoleMembers(role);

            case 7:
              roles[role] = _context12.sent;

            case 8:
              _context12.next = 3;
              break;

            case 10:
              return _context12.abrupt("return", roles);

            case 11:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function getAllRoleMembers() {
      return _getAllRoleMembers.apply(this, arguments);
    }

    return getAllRoleMembers;
  }()
  /**
   * Call this to grant a role to a specific address.
   *
   * @remarks
   *
   * Make sure you are sure you want to grant the role to the address.
   *
   * @param role - The {@link IRoles | role} to grant to the address
   * @param address - The address to grant the role to
   * @returns The transaction receipt
   * @throws If you are trying to grant does not exist on the module this will throw an {@link InvariantError}.
   *
   * @public
   */
  ;

  _proto2.grantRole =
  /*#__PURE__*/
  function () {
    var _grantRole = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(role, address) {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              !this.roles.includes(role) ? process.env.NODE_ENV !== "production" ? invariant(false, "this module does not support the \"" + role + "\" role") : invariant(false) : void 0;
              _context13.next = 3;
              return this.sendTransaction("grantRole", [getRoleHash(role), address]);

            case 3:
              return _context13.abrupt("return", _context13.sent);

            case 4:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function grantRole(_x12, _x13) {
      return _grantRole.apply(this, arguments);
    }

    return grantRole;
  }()
  /**
   * Call this to revoke a role from a specific address.
   *
   * @remarks
   *
   * -- Caution --
   *
   * This will let you remove yourself from the role, too.
   * If you remove yourself from the {@link IRoles.admin | admin} role, you will no longer be able to administer the module.
   * There is no way to recover from this.
   *
   * @param role - The {@link IRoles | role} to revoke
   * @param address - The address to revoke the role from
   * @returns The transaction receipt
   * @throws If you are trying to revoke does not exist on the module this will throw an {@link InvariantError}.
   *
   * @public
   */
  ;

  _proto2.revokeRole =
  /*#__PURE__*/
  function () {
    var _revokeRole = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(role, address) {
      var signerAddress;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              !this.roles.includes(role) ? process.env.NODE_ENV !== "production" ? invariant(false, "this module does not support the \"" + role + "\" role") : invariant(false) : void 0;
              _context14.next = 3;
              return this.getSignerAddress();

            case 3:
              signerAddress = _context14.sent;

              if (!(signerAddress.toLowerCase() === address.toLowerCase())) {
                _context14.next = 10;
                break;
              }

              _context14.next = 7;
              return this.sendTransaction("renounceRole", [getRoleHash(role), address]);

            case 7:
              return _context14.abrupt("return", _context14.sent);

            case 10:
              _context14.next = 12;
              return this.sendTransaction("revokeRole", [getRoleHash(role), address]);

            case 12:
              return _context14.abrupt("return", _context14.sent);

            case 13:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function revokeRole(_x14, _x15) {
      return _revokeRole.apply(this, arguments);
    }

    return revokeRole;
  }();

  _createClass(ModuleWithRoles, [{
    key: "roles",
    get: function get() {
      return this.getModuleRoles();
    }
  }]);

  return ModuleWithRoles;
}(Module);

/**
 * CommonModuleMetadata defines the common properties of a module deployment.
 */

var CommonModuleMetadata = function CommonModuleMetadata() {
  this.name = "";
  this.description = undefined;
  this.image = undefined;
  this.externalLink = undefined;
};

__decorate([JsonProperty("name", String)], CommonModuleMetadata.prototype, "name", void 0);

__decorate([JsonProperty("description", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, "description", void 0);

__decorate([JsonProperty("image", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, "image", void 0);

__decorate([JsonProperty("external_link", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, "externalLink", void 0);

CommonModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("CommonModuleMetadata")], CommonModuleMetadata);
var CommonModuleMetadata$1 = CommonModuleMetadata;

var BundleModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(BundleModuleMetadata, _CommonModuleMetadata);

  function BundleModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.sellerFeeBasisPoints = 0;
    _this.feeRecipient = undefined;
    return _this;
  }

  return BundleModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], BundleModuleMetadata.prototype, "sellerFeeBasisPoints", void 0);

__decorate([JsonProperty("fee_recipient", String, PropertyConvertingMode.IGNORE_NULLABLE)], BundleModuleMetadata.prototype, "feeRecipient", void 0);

BundleModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("CollectionModuleMetadata")], BundleModuleMetadata);
var BundleModuleMetadata$1 = BundleModuleMetadata;

var CurrencyModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(CurrencyModuleMetadata, _CommonModuleMetadata);

  function CurrencyModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.symbol = "";
    return _this;
  }

  return CurrencyModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("symbol", String)], CurrencyModuleMetadata.prototype, "symbol", void 0);

CurrencyModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("CurrencyModuleMetadata")], CurrencyModuleMetadata);
var CurrencyModuleMetadata$1 = CurrencyModuleMetadata;

var DatastoreModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(DatastoreModuleMetadata, _CommonModuleMetadata);

  function DatastoreModuleMetadata() {
    return _CommonModuleMetadata.apply(this, arguments) || this;
  }

  return DatastoreModuleMetadata;
}(CommonModuleMetadata$1);

DatastoreModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("DatastoreModuleMetadata")], DatastoreModuleMetadata);
var DatastoreModuleMetadata$1 = DatastoreModuleMetadata;

var DropModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(DropModuleMetadata, _CommonModuleMetadata);

  function DropModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.sellerFeeBasisPoints = 0;
    _this.feeRecipient = undefined;
    _this.symbol = void 0;
    _this.maxSupply = 1;
    _this.baseTokenUri = "";
    return _this;
  }

  return DropModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "sellerFeeBasisPoints", void 0);

__decorate([JsonProperty("fee_recipient", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "feeRecipient", void 0);

__decorate([JsonProperty("symbol", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "symbol", void 0);

__decorate([JsonProperty("max_supply", Number, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "maxSupply", void 0);

__decorate([JsonProperty("base_token_uri", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "baseTokenUri", void 0);

DropModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("DropModuleMetadata")], DropModuleMetadata);
var DropModuleMetadata$1 = DropModuleMetadata;

var MarketModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(MarketModuleMetadata, _CommonModuleMetadata);

  function MarketModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.marketFeeBasisPoints = 0;
    return _this;
  }

  return MarketModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], MarketModuleMetadata.prototype, "marketFeeBasisPoints", void 0);

MarketModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("MarketModuleMetadata")], MarketModuleMetadata);
var MarketModuleMetadata$1 = MarketModuleMetadata;

var NftModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(NftModuleMetadata, _CommonModuleMetadata);

  function NftModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.sellerFeeBasisPoints = 0;
    _this.feeRecipient = undefined;
    _this.symbol = void 0;
    return _this;
  }

  return NftModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, "sellerFeeBasisPoints", void 0);

__decorate([JsonProperty("fee_recipient", String, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, "feeRecipient", void 0);

__decorate([JsonProperty("symbol", String, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, "symbol", void 0);

NftModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("NftModuleMetadata")], NftModuleMetadata);
var NftModuleMetadata$1 = NftModuleMetadata;

var PackModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(PackModuleMetadata, _CommonModuleMetadata);

  function PackModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.sellerFeeBasisPoints = 0;
    _this.feeRecipient = undefined;
    return _this;
  }

  return PackModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], PackModuleMetadata.prototype, "sellerFeeBasisPoints", void 0);

__decorate([JsonProperty("fee_recipient", String, PropertyConvertingMode.IGNORE_NULLABLE)], PackModuleMetadata.prototype, "feeRecipient", void 0);

PackModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("PackModuleMetadata")], PackModuleMetadata);
var PackModuleMetadata$1 = PackModuleMetadata;

var SplitsModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(SplitsModuleMetadata, _CommonModuleMetadata);

  function SplitsModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.recipientSplits = [];
    return _this;
  }

  return SplitsModuleMetadata;
}(CommonModuleMetadata$1);

SplitsModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("SplitsModuleMetadata")], SplitsModuleMetadata);
var SplitsModuleMetadata$1 = SplitsModuleMetadata;

/**
 *
 * Access this module by calling {@link ThirdwebSDK.getCurrencyModule}
 * @public
 */

var CurrencyModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(CurrencyModule, _ModuleWithRoles);

  function CurrencyModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = CurrencyModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return CurrencyModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return Coin__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return CurrencyModule.moduleType;
  };

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getCurrencyMetadata(this.providerOrSigner, this.address);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get() {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getValue = /*#__PURE__*/function () {
    var _getValue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(value) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getCurrencyValue(this.providerOrSigner, this.address, BigNumber.from(value));

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getValue(_x) {
      return _getValue.apply(this, arguments);
    }

    return getValue;
  }();

  _proto.totalSupply = /*#__PURE__*/function () {
    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.readOnlyContract.totalSupply();

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function totalSupply() {
      return _totalSupply.apply(this, arguments);
    }

    return totalSupply;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.t0 = this;
              _context4.next = 3;
              return this.getSignerAddress();

            case 3:
              _context4.t1 = _context4.sent;
              _context4.next = 6;
              return _context4.t0.balanceOf.call(_context4.t0, _context4.t1);

            case 6:
              return _context4.abrupt("return", _context4.sent);

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.t0 = this;
              _context5.next = 3;
              return this.readOnlyContract.balanceOf(address);

            case 3:
              _context5.t1 = _context5.sent;
              _context5.next = 6;
              return _context5.t0.getValue.call(_context5.t0, _context5.t1);

            case 6:
              return _context5.abrupt("return", _context5.sent);

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function balanceOf(_x2) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.allowance = /*#__PURE__*/function () {
    var _allowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(spender) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.t0 = this;
              _context6.next = 3;
              return this.getSignerAddress();

            case 3:
              _context6.t1 = _context6.sent;
              _context6.t2 = spender;
              _context6.next = 7;
              return _context6.t0.allowanceOf.call(_context6.t0, _context6.t1, _context6.t2);

            case 7:
              return _context6.abrupt("return", _context6.sent);

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function allowance(_x3) {
      return _allowance.apply(this, arguments);
    }

    return allowance;
  }();

  _proto.allowanceOf = /*#__PURE__*/function () {
    var _allowanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(owner, spender) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.readOnlyContract.allowance(owner, spender);

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function allowanceOf(_x4, _x5) {
      return _allowanceOf.apply(this, arguments);
    }

    return allowanceOf;
  }() // write functions
  ;

  _proto.transfer =
  /*#__PURE__*/
  function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(to, amount) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.sendTransaction("transfer", [to, amount]);

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function transfer(_x6, _x7) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }();

  _proto.setAllowance = /*#__PURE__*/function () {
    var _setAllowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(spender, amount) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.sendTransaction("approve", [spender, amount]);

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function setAllowance(_x8, _x9) {
      return _setAllowance.apply(this, arguments);
    }

    return setAllowance;
  }() // owner functions
  ;

  _proto.mint =
  /*#__PURE__*/
  function () {
    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(amount) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.t0 = this;
              _context10.next = 3;
              return this.getSignerAddress();

            case 3:
              _context10.t1 = _context10.sent;
              _context10.t2 = amount;
              _context10.next = 7;
              return _context10.t0.mintTo.call(_context10.t0, _context10.t1, _context10.t2);

            case 7:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function mint(_x10) {
      return _mint.apply(this, arguments);
    }

    return mint;
  }();

  _proto.mintTo = /*#__PURE__*/function () {
    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(to, amount) {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.sendTransaction("mint", [to, amount]);

            case 2:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function mintTo(_x11, _x12) {
      return _mintTo.apply(this, arguments);
    }

    return mintTo;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(amount) {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.sendTransaction("burn", [amount]);

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function burn(_x13) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.burnFrom = /*#__PURE__*/function () {
    var _burnFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(from, amount) {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.sendTransaction("burnFrom", [from, amount]);

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function burnFrom(_x14, _x15) {
      return _burnFrom.apply(this, arguments);
    }

    return burnFrom;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(from, to, amount) {
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.sendTransaction("transferFrom", [from, to, amount]);

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function transferFrom(_x16, _x17, _x18) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(metadata) {
      var uri;
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context15.sent;
              _context15.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context15.abrupt("return", _context15.sent);

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function setModuleMetadata(_x19) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(restricted) {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              if (restricted === void 0) {
                restricted = false;
              }

              _context16.next = 3;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 3:
              return _context16.abrupt("return", _context16.sent);

            case 4:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function setRestrictedTransfer(_x20) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }();

  return CurrencyModule;
}(ModuleWithRoles);
CurrencyModule.moduleType = ModuleType.CURRENCY;
CurrencyModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];

/**
 * Access this module by calling {@link ThirdwebSDK.getAppModule}
 * @public
 */

var AppModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(AppModule, _ModuleWithRoles);

  function AppModule() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _ModuleWithRoles.call.apply(_ModuleWithRoles, [this].concat(args)) || this;
    _this.jsonConvert = new JsonConvert();
    _this.moduleType = -1;
    return _this;
  }

  var _proto = AppModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return CurrencyModule.roles;
  }
  /**
   * The internal module type for the app module.
   * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.
   * @internal
   * @readonly
   */
  ;

  /**
   * @internal
   */
  _proto.connectContract = function connectContract() {
    return ProtocolControl__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return this.moduleType;
  }
  /**
   * @internal
   *
   */
  ;

  _proto.getModuleAddress =
  /*#__PURE__*/
  function () {
    var _getModuleAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(moduleType) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.readOnlyContract.getAllModulesOfType(moduleType);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getModuleAddress(_x) {
      return _getModuleAddress.apply(this, arguments);
    }

    return getModuleAddress;
  }();

  _proto.getNFTAddress = /*#__PURE__*/function () {
    var _getNFTAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.getModuleAddress(ModuleType.NFT));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getNFTAddress() {
      return _getNFTAddress.apply(this, arguments);
    }

    return getNFTAddress;
  }();

  _proto.getCollectionAddress = /*#__PURE__*/function () {
    var _getCollectionAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.getModuleAddress(ModuleType.COLLECTION));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getCollectionAddress() {
      return _getCollectionAddress.apply(this, arguments);
    }

    return getCollectionAddress;
  }();

  _proto.getPackAddress = /*#__PURE__*/function () {
    var _getPackAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.getModuleAddress(ModuleType.PACK));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getPackAddress() {
      return _getPackAddress.apply(this, arguments);
    }

    return getPackAddress;
  }();

  _proto.getCurrencyAddress = /*#__PURE__*/function () {
    var _getCurrencyAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this.getModuleAddress(ModuleType.CURRENCY));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getCurrencyAddress() {
      return _getCurrencyAddress.apply(this, arguments);
    }

    return getCurrencyAddress;
  }();

  _proto.getMarketAddress = /*#__PURE__*/function () {
    var _getMarketAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", this.getModuleAddress(ModuleType.MARKET));

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getMarketAddress() {
      return _getMarketAddress.apply(this, arguments);
    }

    return getMarketAddress;
  }();

  _proto.getDropAddress = /*#__PURE__*/function () {
    var _getDropAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", this.getModuleAddress(ModuleType.DROP));

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getDropAddress() {
      return _getDropAddress.apply(this, arguments);
    }

    return getDropAddress;
  }();

  _proto.getDatastoreAddress = /*#__PURE__*/function () {
    var _getDatastoreAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", this.getModuleAddress(ModuleType.DATASTORE));

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function getDatastoreAddress() {
      return _getDatastoreAddress.apply(this, arguments);
    }

    return getDatastoreAddress;
  }();

  _proto.getRoyaltyTreasury = /*#__PURE__*/function () {
    var _getRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(address) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.readOnlyContract.getRoyaltyTreasury(address || AddressZero);

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function getRoyaltyTreasury(_x2) {
      return _getRoyaltyTreasury.apply(this, arguments);
    }

    return getRoyaltyTreasury;
  }()
  /**
   * @internal
   * @param addresses - The addresses of the modules to get metadata for.
   */
  ;

  _proto.getAllContractMetadata =
  /*#__PURE__*/
  function () {
    var _getAllContractMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(addresses) {
      var _this2 = this;

      var metadatas;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return Promise.all(addresses.map(function (address) {
                return getContractMetadata(_this2.providerOrSigner, address, _this2.ipfsGatewayUrl);
              }));

            case 2:
              metadatas = _context10.sent;
              return _context10.abrupt("return", addresses.filter(function (d) {
                return d;
              }).map(function (address, i) {
                return {
                  address: address,
                  metadata: metadatas[i]
                };
              }));

            case 4:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    function getAllContractMetadata(_x3) {
      return _getAllContractMetadata.apply(this, arguments);
    }

    return getAllContractMetadata;
  }()
  /**
   * Method to get a list of pack module metadata.
   * @returns A promise of an array of Pack modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getPackModules =
  /*#__PURE__*/
  function () {
    var _getPackModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.t0 = this;
              _context11.next = 3;
              return this.getPackAddress();

            case 3:
              _context11.t1 = _context11.sent;
              _context11.next = 6;
              return _context11.t0.getAllContractMetadata.call(_context11.t0, _context11.t1);

            case 6:
              return _context11.abrupt("return", _context11.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.PACK
                });
              }));

            case 7:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function getPackModules() {
      return _getPackModules.apply(this, arguments);
    }

    return getPackModules;
  }()
  /**
   * Method to get a list of NFT module metadata.
   * @returns A promise of an array of NFT modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getNFTModules =
  /*#__PURE__*/
  function () {
    var _getNFTModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.t0 = this;
              _context12.next = 3;
              return this.getNFTAddress();

            case 3:
              _context12.t1 = _context12.sent;
              _context12.next = 6;
              return _context12.t0.getAllContractMetadata.call(_context12.t0, _context12.t1);

            case 6:
              return _context12.abrupt("return", _context12.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.NFT
                });
              }));

            case 7:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function getNFTModules() {
      return _getNFTModules.apply(this, arguments);
    }

    return getNFTModules;
  }()
  /**
   * Method to get a list of Collection module metadata.
   * @returns A promise of an array of Collection modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getCollectionModules =
  /*#__PURE__*/
  function () {
    var _getCollectionModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.t0 = this;
              _context13.next = 3;
              return this.getCollectionAddress();

            case 3:
              _context13.t1 = _context13.sent;
              _context13.next = 6;
              return _context13.t0.getAllContractMetadata.call(_context13.t0, _context13.t1);

            case 6:
              return _context13.abrupt("return", _context13.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.COLLECTION
                });
              }));

            case 7:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function getCollectionModules() {
      return _getCollectionModules.apply(this, arguments);
    }

    return getCollectionModules;
  }()
  /**
   * Method to get a list of Currency module metadata.
   * @returns A promise of an array of Currency modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getCurrencyModules =
  /*#__PURE__*/
  function () {
    var _getCurrencyModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.t0 = this;
              _context14.next = 3;
              return this.getCurrencyAddress();

            case 3:
              _context14.t1 = _context14.sent;
              _context14.next = 6;
              return _context14.t0.getAllContractMetadata.call(_context14.t0, _context14.t1);

            case 6:
              return _context14.abrupt("return", _context14.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.CURRENCY
                });
              }));

            case 7:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function getCurrencyModules() {
      return _getCurrencyModules.apply(this, arguments);
    }

    return getCurrencyModules;
  }()
  /**
   * Method to get a list of Datastore module metadata.
   * @alpha
   * @returns A promise of an array of Datastore modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getDatastoreModules =
  /*#__PURE__*/
  function () {
    var _getDatastoreModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15() {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.t0 = this;
              _context15.next = 3;
              return this.getDatastoreAddress();

            case 3:
              _context15.t1 = _context15.sent;
              _context15.next = 6;
              return _context15.t0.getAllContractMetadata.call(_context15.t0, _context15.t1);

            case 6:
              return _context15.abrupt("return", _context15.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.DATASTORE
                });
              }));

            case 7:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function getDatastoreModules() {
      return _getDatastoreModules.apply(this, arguments);
    }

    return getDatastoreModules;
  }()
  /**
   * Method to get a list of Market module metadata.
   * @returns A promise of an array of Market modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getMarketModules =
  /*#__PURE__*/
  function () {
    var _getMarketModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16() {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.t0 = this;
              _context16.next = 3;
              return this.getMarketAddress();

            case 3:
              _context16.t1 = _context16.sent;
              _context16.next = 6;
              return _context16.t0.getAllContractMetadata.call(_context16.t0, _context16.t1);

            case 6:
              return _context16.abrupt("return", _context16.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.MARKET
                });
              }));

            case 7:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function getMarketModules() {
      return _getMarketModules.apply(this, arguments);
    }

    return getMarketModules;
  }()
  /**
   * Method to get a list of Drop module metadata.
   * @returns A promise of an array of Drop modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getDropModules =
  /*#__PURE__*/
  function () {
    var _getDropModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17() {
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.t0 = this;
              _context17.next = 3;
              return this.getDropAddress();

            case 3:
              _context17.t1 = _context17.sent;
              _context17.next = 6;
              return _context17.t0.getAllContractMetadata.call(_context17.t0, _context17.t1);

            case 6:
              return _context17.abrupt("return", _context17.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.DROP
                });
              }));

            case 7:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function getDropModules() {
      return _getDropModules.apply(this, arguments);
    }

    return getDropModules;
  }()
  /**
   * Method to get a list of all module metadata on a given app.
   * @public
   * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.
   * @returns Array of module metadata
   */
  ;

  _proto.getAllModuleMetadata =
  /*#__PURE__*/
  function () {
    var _getAllModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(filterByModuleType) {
      var _this3 = this;

      var moduleTypesToGet;
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              moduleTypesToGet = filterByModuleType || [ModuleType.NFT, ModuleType.COLLECTION, ModuleType.PACK, ModuleType.CURRENCY, ModuleType.MARKET, ModuleType.DROP, ModuleType.DATASTORE];
              _context19.next = 3;
              return Promise.all(moduleTypesToGet.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(moduleType) {
                  var moduleAddresses;
                  return runtime_1.wrap(function _callee18$(_context18) {
                    while (1) {
                      switch (_context18.prev = _context18.next) {
                        case 0:
                          _context18.next = 2;
                          return _this3.getModuleAddress(moduleType);

                        case 2:
                          moduleAddresses = _context18.sent;
                          _context18.next = 5;
                          return _this3.getAllContractMetadata(moduleAddresses);

                        case 5:
                          return _context18.abrupt("return", _context18.sent.map(function (m) {
                            return _extends({}, m, {
                              type: moduleType
                            });
                          }));

                        case 6:
                        case "end":
                          return _context18.stop();
                      }
                    }
                  }, _callee18);
                }));

                return function (_x5) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 3:
              return _context19.abrupt("return", _context19.sent.reduce(function (acc, curr) {
                return acc.concat(curr);
              }, []));

            case 4:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    }));

    function getAllModuleMetadata(_x4) {
      return _getAllModuleMetadata.apply(this, arguments);
    }

    return getAllModuleMetadata;
  }() // owner functions

  /**
   * @deprecated - Use setMetadata() instead
   */
  ;

  _proto.setModuleMetadata =
  /*#__PURE__*/
  function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(metadata) {
      var uri;
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context20.sent;
              _context20.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context20.abrupt("return", _context20.sent);

            case 6:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function setModuleMetadata(_x6) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRoyaltyTreasury = /*#__PURE__*/function () {
    var _setRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(treasury) {
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.sendTransaction("setRoyaltyTreasury", [treasury]);

            case 2:
              return _context21.abrupt("return", _context21.sent);

            case 3:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function setRoyaltyTreasury(_x7) {
      return _setRoyaltyTreasury.apply(this, arguments);
    }

    return setRoyaltyTreasury;
  }();

  _proto.setModuleRoyaltyTreasury = /*#__PURE__*/function () {
    var _setModuleRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(moduleAddress, treasury) {
      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.sendTransaction("setModuleRoyaltyTreasury", [moduleAddress, treasury]);

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function setModuleRoyaltyTreasury(_x8, _x9) {
      return _setModuleRoyaltyTreasury.apply(this, arguments);
    }

    return setModuleRoyaltyTreasury;
  }();

  _proto.withdrawFunds = /*#__PURE__*/function () {
    var _withdrawFunds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(to, currency) {
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this.sendTransaction("withdrawFunds", [to, currency]);

            case 2:
              return _context23.abrupt("return", _context23.sent);

            case 3:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function withdrawFunds(_x10, _x11) {
      return _withdrawFunds.apply(this, arguments);
    }

    return withdrawFunds;
  }()
  /**
   * Helper method that handles `image` property uploads if its a file
   *
   * @param metadata - The metadata of the module to be deployed
   * @returns - The sanitized metadata with an uploaded image ipfs hash
   */
  ;

  _proto._prepareMetadata =
  /*#__PURE__*/
  function () {
    var _prepareMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(metadata) {
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              if (!(typeof metadata.image === "string")) {
                _context24.next = 2;
                break;
              }

              return _context24.abrupt("return", Promise.resolve(metadata));

            case 2:
              if (!(metadata.image === undefined)) {
                _context24.next = 4;
                break;
              }

              return _context24.abrupt("return", Promise.resolve(metadata));

            case 4:
              _context24.t0 = uploadToIPFS;
              _context24.t1 = metadata.image;
              _context24.t2 = this.address;
              _context24.next = 9;
              return this.getSignerAddress();

            case 9:
              _context24.t3 = _context24.sent;
              _context24.next = 12;
              return (0, _context24.t0)(_context24.t1, _context24.t2, _context24.t3);

            case 12:
              metadata.image = _context24.sent;
              return _context24.abrupt("return", Promise.resolve(metadata));

            case 14:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function _prepareMetadata(_x12) {
      return _prepareMetadata2.apply(this, arguments);
    }

    return _prepareMetadata;
  }()
  /**
   * Helper method that deploys a module and returns its address
   *
   * @internal
   *
   * @param moduleType - The ModuleType to deploy
   * @param args - Constructor arguments for the module
   * @param factory - The ABI factory used to call the `deploy` method
   * @returns The address of the deployed module
   */
  ;

  _proto._deployModule =
  /*#__PURE__*/
  function () {
    var _deployModule2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(moduleType, args, factory) {
      var _ethers$ContractFacto;

      var gasPrice, txOpts, tx, contractAddress, addModuleTx;
      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.sdk.getGasPrice();

            case 2:
              gasPrice = _context25.sent;
              txOpts = gasPrice ? {
                gasPrice: ethers.utils.parseUnits(gasPrice.toString(), "gwei")
              } : {};
              _context25.next = 6;
              return (_ethers$ContractFacto = new ethers.ContractFactory(factory.abi, factory.bytecode).connect(this.signer)).deploy.apply(_ethers$ContractFacto, args.concat([txOpts]));

            case 6:
              tx = _context25.sent;
              _context25.next = 9;
              return tx.deployed();

            case 9:
              contractAddress = tx.address;
              _context25.next = 12;
              return this.contract.addModule(contractAddress, moduleType, txOpts);

            case 12:
              addModuleTx = _context25.sent;
              _context25.next = 15;
              return addModuleTx.wait();

            case 15:
              return _context25.abrupt("return", contractAddress);

            case 16:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function _deployModule(_x13, _x14, _x15) {
      return _deployModule2.apply(this, arguments);
    }

    return _deployModule;
  }()
  /**
   * Deploys a collection module.
   *
   * @param metadata - Metadata about the module.
   * @returns A promise with the newly created module.
   */
  ;

  _proto.deployBundleModule =
  /*#__PURE__*/
  function () {
    var _deployBundleModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.t0 = this.jsonConvert;
              _context26.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context26.t1 = _context26.sent;
              _context26.t2 = BundleModuleMetadata$1;
              serializedMetadata = _context26.t0.serializeObject.call(_context26.t0, _context26.t1, _context26.t2);
              _context26.t3 = uploadMetadata;
              _context26.t4 = serializedMetadata;
              _context26.t5 = this.address;
              _context26.next = 11;
              return this.getSignerAddress();

            case 11:
              _context26.t6 = _context26.sent;
              _context26.next = 14;
              return (0, _context26.t3)(_context26.t4, _context26.t5, _context26.t6);

            case 14:
              metadataUri = _context26.sent;
              _context26.t7 = this;
              _context26.t8 = ModuleType.COLLECTION;
              _context26.t9 = this.address;
              _context26.next = 20;
              return this.sdk.getForwarderAddress();

            case 20:
              _context26.t10 = _context26.sent;
              _context26.t11 = metadataUri;
              _context26.t12 = BigNumber.from(metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0);
              _context26.t13 = [_context26.t9, _context26.t10, _context26.t11, _context26.t12];
              _context26.t14 = NFTCollection__factory;
              _context26.next = 27;
              return _context26.t7._deployModule.call(_context26.t7, _context26.t8, _context26.t13, _context26.t14);

            case 27:
              address = _context26.sent;
              return _context26.abrupt("return", this.sdk.getCollectionModule(address));

            case 29:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26, this);
    }));

    function deployBundleModule(_x16) {
      return _deployBundleModule.apply(this, arguments);
    }

    return deployBundleModule;
  }()
  /**
   * Deploys a Splits module
   *
   * @param metadata - The module metadata
   * @returns - The deployed splits module
   */
  ;

  _proto.deploySplitsModule =
  /*#__PURE__*/
  function () {
    var _deploySplitsModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.t0 = this.jsonConvert;
              _context27.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context27.t1 = _context27.sent;
              _context27.t2 = SplitsModuleMetadata$1;
              serializedMetadata = _context27.t0.serializeObject.call(_context27.t0, _context27.t1, _context27.t2);
              _context27.t3 = uploadMetadata;
              _context27.t4 = serializedMetadata;
              _context27.t5 = this.address;
              _context27.next = 11;
              return this.getSignerAddress();

            case 11:
              _context27.t6 = _context27.sent;
              _context27.next = 14;
              return (0, _context27.t3)(_context27.t4, _context27.t5, _context27.t6);

            case 14:
              metadataUri = _context27.sent;
              _context27.t7 = this;
              _context27.t8 = ModuleType.SPLITS;
              _context27.t9 = this.address;
              _context27.next = 20;
              return this.sdk.getForwarderAddress();

            case 20:
              _context27.t10 = _context27.sent;
              _context27.t11 = metadataUri;
              _context27.t12 = metadata.recipientSplits.map(function (s) {
                return s.address;
              });
              _context27.t13 = metadata.recipientSplits.map(function (s) {
                return s.shares;
              });
              _context27.t14 = [_context27.t9, _context27.t10, _context27.t11, _context27.t12, _context27.t13];
              _context27.t15 = Royalty__factory;
              _context27.next = 28;
              return _context27.t7._deployModule.call(_context27.t7, _context27.t8, _context27.t14, _context27.t15);

            case 28:
              address = _context27.sent;
              return _context27.abrupt("return", this.sdk.getSplitsModule(address));

            case 30:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27, this);
    }));

    function deploySplitsModule(_x17) {
      return _deploySplitsModule.apply(this, arguments);
    }

    return deploySplitsModule;
  }()
  /**
   * Deploys a NFT module.
   *
   * @param metadata - The module metadata
   * @returns - The deployed NFT module
   */
  ;

  _proto.deployNftModule =
  /*#__PURE__*/
  function () {
    var _deployNftModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _context28.t0 = this.jsonConvert;
              _context28.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context28.t1 = _context28.sent;
              _context28.t2 = NftModuleMetadata$1;
              serializedMetadata = _context28.t0.serializeObject.call(_context28.t0, _context28.t1, _context28.t2);
              _context28.t3 = uploadMetadata;
              _context28.t4 = serializedMetadata;
              _context28.t5 = this.address;
              _context28.next = 11;
              return this.getSignerAddress();

            case 11:
              _context28.t6 = _context28.sent;
              _context28.next = 14;
              return (0, _context28.t3)(_context28.t4, _context28.t5, _context28.t6);

            case 14:
              metadataUri = _context28.sent;
              _context28.t7 = this;
              _context28.t8 = ModuleType.NFT;
              _context28.t9 = this.address;
              _context28.t10 = metadata.name;
              _context28.t11 = metadata.symbol ? metadata.symbol : "";
              _context28.next = 22;
              return this.sdk.getForwarderAddress();

            case 22:
              _context28.t12 = _context28.sent;
              _context28.t13 = metadataUri;
              _context28.t14 = metadata.sellerFeeBasisPoints;
              _context28.t15 = [_context28.t9, _context28.t10, _context28.t11, _context28.t12, _context28.t13, _context28.t14];
              _context28.t16 = NFT__factory;
              _context28.next = 29;
              return _context28.t7._deployModule.call(_context28.t7, _context28.t8, _context28.t15, _context28.t16);

            case 29:
              address = _context28.sent;
              return _context28.abrupt("return", this.sdk.getNFTModule(address));

            case 31:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28, this);
    }));

    function deployNftModule(_x18) {
      return _deployNftModule.apply(this, arguments);
    }

    return deployNftModule;
  }()
  /**
   * Deploys a currency module.
   *
   * @param metadata - The module metadata
   * @returns - The deployed currency module
   */
  ;

  _proto.deployCurrencyModule =
  /*#__PURE__*/
  function () {
    var _deployCurrencyModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              _context29.t0 = this.jsonConvert;
              _context29.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context29.t1 = _context29.sent;
              _context29.t2 = CurrencyModuleMetadata$1;
              serializedMetadata = _context29.t0.serializeObject.call(_context29.t0, _context29.t1, _context29.t2);
              _context29.t3 = uploadMetadata;
              _context29.t4 = serializedMetadata;
              _context29.t5 = this.address;
              _context29.next = 11;
              return this.getSignerAddress();

            case 11:
              _context29.t6 = _context29.sent;
              _context29.next = 14;
              return (0, _context29.t3)(_context29.t4, _context29.t5, _context29.t6);

            case 14:
              metadataUri = _context29.sent;
              _context29.t7 = this;
              _context29.t8 = ModuleType.CURRENCY;
              _context29.t9 = this.address;
              _context29.t10 = metadata.name;
              _context29.t11 = metadata.symbol ? metadata.symbol : "";
              _context29.next = 22;
              return this.sdk.getForwarderAddress();

            case 22:
              _context29.t12 = _context29.sent;
              _context29.t13 = metadataUri;
              _context29.t14 = [_context29.t9, _context29.t10, _context29.t11, _context29.t12, _context29.t13];
              _context29.t15 = Coin__factory;
              _context29.next = 28;
              return _context29.t7._deployModule.call(_context29.t7, _context29.t8, _context29.t14, _context29.t15);

            case 28:
              address = _context29.sent;
              return _context29.abrupt("return", this.sdk.getCurrencyModule(address));

            case 30:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29, this);
    }));

    function deployCurrencyModule(_x19) {
      return _deployCurrencyModule.apply(this, arguments);
    }

    return deployCurrencyModule;
  }()
  /**
   * Deploys a Marketplace module
   *
   * @param metadata - The module metadata
   * @returns - The deployed Marketplace module
   */
  ;

  _proto.deployMarketModule =
  /*#__PURE__*/
  function () {
    var _deployMarketModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              _context30.t0 = this.jsonConvert;
              _context30.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context30.t1 = _context30.sent;
              _context30.t2 = MarketModuleMetadata$1;
              serializedMetadata = _context30.t0.serializeObject.call(_context30.t0, _context30.t1, _context30.t2);
              _context30.t3 = uploadMetadata;
              _context30.t4 = serializedMetadata;
              _context30.t5 = this.address;
              _context30.next = 11;
              return this.getSignerAddress();

            case 11:
              _context30.t6 = _context30.sent;
              _context30.next = 14;
              return (0, _context30.t3)(_context30.t4, _context30.t5, _context30.t6);

            case 14:
              metadataUri = _context30.sent;
              _context30.t7 = this;
              _context30.t8 = ModuleType.MARKET;
              _context30.t9 = this.address;
              _context30.next = 20;
              return this.sdk.getForwarderAddress();

            case 20:
              _context30.t10 = _context30.sent;
              _context30.t11 = metadataUri;
              _context30.t12 = metadata.marketFeeBasisPoints ? metadata.marketFeeBasisPoints : 0;
              _context30.t13 = [_context30.t9, _context30.t10, _context30.t11, _context30.t12];
              _context30.t14 = Market__factory;
              _context30.next = 27;
              return _context30.t7._deployModule.call(_context30.t7, _context30.t8, _context30.t13, _context30.t14);

            case 27:
              address = _context30.sent;
              return _context30.abrupt("return", this.sdk.getMarketModule(address));

            case 29:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30, this);
    }));

    function deployMarketModule(_x20) {
      return _deployMarketModule.apply(this, arguments);
    }

    return deployMarketModule;
  }()
  /**
   * Deploys a Pack module
   *
   * @param metadata - The module metadata
   * @returns - The deployed Pack module
   */
  ;

  _proto.deployPackModule =
  /*#__PURE__*/
  function () {
    var _deployPackModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(metadata) {
      var serializedMetadata, metadataUri, chainId, _ChainlinkVrf$chainId, vrfCoordinator, linkTokenAddress, keyHash, fees, address;

      return runtime_1.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.t0 = this.jsonConvert;
              _context31.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context31.t1 = _context31.sent;
              _context31.t2 = PackModuleMetadata$1;
              serializedMetadata = _context31.t0.serializeObject.call(_context31.t0, _context31.t1, _context31.t2);
              _context31.t3 = uploadMetadata;
              _context31.t4 = serializedMetadata;
              _context31.t5 = this.address;
              _context31.next = 11;
              return this.getSignerAddress();

            case 11:
              _context31.t6 = _context31.sent;
              _context31.next = 14;
              return (0, _context31.t3)(_context31.t4, _context31.t5, _context31.t6);

            case 14:
              metadataUri = _context31.sent;
              _context31.next = 17;
              return this.getChainID();

            case 17:
              chainId = _context31.sent;
              _ChainlinkVrf$chainId = ChainlinkVrf[chainId], vrfCoordinator = _ChainlinkVrf$chainId.vrfCoordinator, linkTokenAddress = _ChainlinkVrf$chainId.linkTokenAddress, keyHash = _ChainlinkVrf$chainId.keyHash, fees = _ChainlinkVrf$chainId.fees;
              _context31.t7 = this;
              _context31.t8 = ModuleType.PACK;
              _context31.t9 = this.address;
              _context31.t10 = metadataUri;
              _context31.t11 = vrfCoordinator;
              _context31.t12 = linkTokenAddress;
              _context31.t13 = keyHash;
              _context31.t14 = fees;
              _context31.next = 29;
              return this.sdk.getForwarderAddress();

            case 29:
              _context31.t15 = _context31.sent;
              _context31.t16 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;
              _context31.t17 = [_context31.t9, _context31.t10, _context31.t11, _context31.t12, _context31.t13, _context31.t14, _context31.t15, _context31.t16];
              _context31.t18 = Pack__factory;
              _context31.next = 35;
              return _context31.t7._deployModule.call(_context31.t7, _context31.t8, _context31.t17, _context31.t18);

            case 35:
              address = _context31.sent;
              return _context31.abrupt("return", this.sdk.getPackModule(address));

            case 37:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31, this);
    }));

    function deployPackModule(_x21) {
      return _deployPackModule.apply(this, arguments);
    }

    return deployPackModule;
  }()
  /**
   * Deploys a Drop module
   *
   * @param metadata - The module metadata
   * @returns - The deployed Drop module
   */
  ;

  _proto.deployDropModule =
  /*#__PURE__*/
  function () {
    var _deployDropModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              !(metadata.maxSupply !== undefined) ? process.env.NODE_ENV !== "production" ? invariant(false, "Max supply must be specified") : invariant(false) : void 0;
              _context32.t0 = this.jsonConvert;
              _context32.next = 4;
              return this._prepareMetadata(metadata);

            case 4:
              _context32.t1 = _context32.sent;
              _context32.t2 = DropModuleMetadata$1;
              serializedMetadata = _context32.t0.serializeObject.call(_context32.t0, _context32.t1, _context32.t2);
              _context32.t3 = uploadMetadata;
              _context32.t4 = serializedMetadata;
              _context32.t5 = this.address;
              _context32.next = 12;
              return this.getSignerAddress();

            case 12:
              _context32.t6 = _context32.sent;
              _context32.next = 15;
              return (0, _context32.t3)(_context32.t4, _context32.t5, _context32.t6);

            case 15:
              metadataUri = _context32.sent;
              _context32.t7 = this;
              _context32.t8 = ModuleType.DROP;
              _context32.t9 = this.address;
              _context32.t10 = metadata.name;
              _context32.t11 = metadata.symbol ? metadata.symbol : "";
              _context32.next = 23;
              return this.sdk.getForwarderAddress();

            case 23:
              _context32.t12 = _context32.sent;
              _context32.t13 = metadataUri;
              _context32.t14 = metadata.baseTokenUri ? metadata.baseTokenUri : "";
              _context32.t15 = metadata.maxSupply;
              _context32.t16 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;
              _context32.t17 = [_context32.t9, _context32.t10, _context32.t11, _context32.t12, _context32.t13, _context32.t14, _context32.t15, _context32.t16];
              _context32.t18 = LazyNFT__factory;
              _context32.next = 32;
              return _context32.t7._deployModule.call(_context32.t7, _context32.t8, _context32.t17, _context32.t18);

            case 32:
              address = _context32.sent;
              return _context32.abrupt("return", this.sdk.getDropModule(address));

            case 34:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32, this);
    }));

    function deployDropModule(_x22) {
      return _deployDropModule.apply(this, arguments);
    }

    return deployDropModule;
  }()
  /**
   * Deploys a Datastore module
   *
   * @param metadata - The module metadata
   * @returns - The deployed Datastore module
   */
  ;

  _proto.deployDatastoreModule =
  /*#__PURE__*/
  function () {
    var _deployDatastoreModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              _context33.t0 = this.jsonConvert;
              _context33.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context33.t1 = _context33.sent;
              _context33.t2 = DatastoreModuleMetadata$1;
              serializedMetadata = _context33.t0.serializeObject.call(_context33.t0, _context33.t1, _context33.t2);
              _context33.t3 = uploadMetadata;
              _context33.t4 = serializedMetadata;
              _context33.t5 = this.address;
              _context33.next = 11;
              return this.getSignerAddress();

            case 11:
              _context33.t6 = _context33.sent;
              _context33.next = 14;
              return (0, _context33.t3)(_context33.t4, _context33.t5, _context33.t6);

            case 14:
              metadataUri = _context33.sent;
              _context33.t7 = this;
              _context33.t8 = ModuleType.DATASTORE;
              _context33.t9 = this.address;
              _context33.next = 20;
              return this.sdk.getForwarderAddress();

            case 20:
              _context33.t10 = _context33.sent;
              _context33.t11 = metadataUri;
              _context33.t12 = [_context33.t9, _context33.t10, _context33.t11];
              _context33.t13 = DataStore__factory;
              _context33.next = 26;
              return _context33.t7._deployModule.call(_context33.t7, _context33.t8, _context33.t12, _context33.t13);

            case 26:
              address = _context33.sent;
              return _context33.abrupt("return", this.sdk.getDatastoreModule(address));

            case 28:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33, this);
    }));

    function deployDatastoreModule(_x23) {
      return _deployDatastoreModule.apply(this, arguments);
    }

    return deployDatastoreModule;
  }();

  return AppModule;
}(ModuleWithRoles);
AppModule.roles = [RolesMap.admin];

/**
 * Access this module by calling {@link ThirdwebSDK.getCollectionModule}
 * @beta
 */

var CollectionModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(CollectionModule, _ModuleWithRoles);

  function CollectionModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = CollectionModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return CollectionModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return NFTCollection__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return CollectionModule.moduleType;
  }
  /**
   *
   * Get a single collection item by tokenId.
   * @param tokenId - the unique token id of the nft
   * @returns A promise that resolves to a `CollectionMetadata`.
   */
  ;

  _proto.get =
  /*#__PURE__*/
  function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId, address) {
      var _yield$Promise$all, metadata, creator, supply, ownedByAddress;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = Promise;
              _context.t1 = getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl);
              _context.t2 = this.readOnlyContract.creator(tokenId);
              _context.t3 = this.readOnlyContract.totalSupply(tokenId)["catch"](function () {
                return BigNumber$1.from("0");
              });

              if (!address) {
                _context.next = 10;
                break;
              }

              _context.next = 7;
              return this.balanceOf(address, tokenId);

            case 7:
              _context.t4 = _context.sent.toNumber();
              _context.next = 11;
              break;

            case 10:
              _context.t4 = 0;

            case 11:
              _context.t5 = _context.t4;
              _context.t6 = [_context.t1, _context.t2, _context.t3, _context.t5];
              _context.next = 15;
              return _context.t0.all.call(_context.t0, _context.t6);

            case 15:
              _yield$Promise$all = _context.sent;
              metadata = _yield$Promise$all[0];
              creator = _yield$Promise$all[1];
              supply = _yield$Promise$all[2];
              ownedByAddress = _yield$Promise$all[3];
              return _context.abrupt("return", {
                creator: creator,
                supply: supply,
                metadata: metadata,
                ownedByAddress: ownedByAddress
              });

            case 21:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get(_x, _x2) {
      return _get.apply(this, arguments);
    }

    return get;
  }()
  /**
   * Return all items in the collection.
   * @returns An array of `INFTCollection`.
   */
  ;

  _proto.getAll =
  /*#__PURE__*/
  function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(address) {
      var _this = this;

      var maxId;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context2.sent.toNumber();
              _context2.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this.get(i.toString(), address);
              }));

            case 5:
              return _context2.abrupt("return", _context2.sent);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getAll(_x3) {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(address, tokenId) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.readOnlyContract.balanceOf(address, tokenId);

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function balanceOf(_x4, _x5) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(tokenId) {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.t0 = this.readOnlyContract;
              _context4.next = 3;
              return this.getSignerAddress();

            case 3:
              _context4.t1 = _context4.sent;
              _context4.t2 = tokenId;
              _context4.next = 7;
              return _context4.t0.balanceOf.call(_context4.t0, _context4.t1, _context4.t2);

            case 7:
              return _context4.abrupt("return", _context4.sent);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function balance(_x6) {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address, operator) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function isApproved(_x7, _x8) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }() // write functions
  ;

  _proto.setApproval =
  /*#__PURE__*/
  function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(operator, approved) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context6.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
              return _context6.abrupt("return", _context6.sent);

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function setApproval(_x9, _x10) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(to, tokenId, amount) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.t0 = this;
              _context7.next = 3;
              return this.getSignerAddress();

            case 3:
              _context7.t1 = _context7.sent;
              _context7.t2 = to;
              _context7.t3 = {
                tokenId: tokenId,
                amount: amount
              };
              _context7.t4 = [0];
              _context7.next = 9;
              return _context7.t0.transferFrom.call(_context7.t0, _context7.t1, _context7.t2, _context7.t3, _context7.t4);

            case 9:
              return _context7.abrupt("return", _context7.sent);

            case 10:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function transfer(_x11, _x12, _x13) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }() // owner functions
  ;

  _proto.create =
  /*#__PURE__*/
  function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(metadata) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.createBatch([metadata]);

            case 2:
              return _context8.abrupt("return", _context8.sent[0]);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function create(_x14) {
      return _create.apply(this, arguments);
    }

    return create;
  }();

  _proto.createBatch = /*#__PURE__*/function () {
    var _createBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(metadatas) {
      var metadataWithSupply;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              metadataWithSupply = metadatas.map(function (m) {
                return {
                  metadata: m,
                  supply: 0
                };
              });
              return _context9.abrupt("return", this.createAndMintBatch(metadataWithSupply));

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function createBatch(_x15) {
      return _createBatch.apply(this, arguments);
    }

    return createBatch;
  }();

  _proto.createAndMint = /*#__PURE__*/function () {
    var _createAndMint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(metadataWithSupply) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.createAndMintBatch([metadataWithSupply]);

            case 2:
              return _context10.abrupt("return", _context10.sent[0]);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function createAndMint(_x16) {
      return _createAndMint.apply(this, arguments);
    }

    return createAndMint;
  }();

  _proto.createAndMintBatch = /*#__PURE__*/function () {
    var _createAndMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(metadataWithSupply) {
      var _this2 = this;

      var uris, supplies, to, receipt, event, tokenIds;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return Promise.all(metadataWithSupply.map(function (a) {
                return a.metadata;
              }).map(function (a) {
                return uploadMetadata(a);
              }));

            case 2:
              uris = _context11.sent;
              supplies = metadataWithSupply.map(function (a) {
                return a.supply;
              });
              _context11.next = 6;
              return this.getSignerAddress();

            case 6:
              to = _context11.sent;
              _context11.next = 9;
              return this.sendTransaction("createNativeTokens", [to, uris, supplies, [0]]);

            case 9:
              receipt = _context11.sent;
              event = this.parseEventLogs("NativeTokens", receipt == null ? void 0 : receipt.logs);
              tokenIds = event == null ? void 0 : event.tokenIds;
              _context11.next = 14;
              return Promise.all(tokenIds.map(function (tokenId) {
                return _this2.get(tokenId.toString());
              }));

            case 14:
              return _context11.abrupt("return", _context11.sent);

            case 15:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function createAndMintBatch(_x17) {
      return _createAndMintBatch.apply(this, arguments);
    }

    return createAndMintBatch;
  }();

  _proto.createWithERC20 = /*#__PURE__*/function () {
    var _createWithERC = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(tokenContract, tokenAmount, args) {
      var uri;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return uploadMetadata(args.metadata);

            case 2:
              uri = _context12.sent;
              _context12.next = 5;
              return this.sendTransaction("wrapERC20", [tokenContract, tokenAmount, args.supply, uri]);

            case 5:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function createWithERC20(_x18, _x19, _x20) {
      return _createWithERC.apply(this, arguments);
    }

    return createWithERC20;
  }();

  _proto.createWithERC721 = /*#__PURE__*/function () {
    var _createWithERC2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(tokenContract, tokenId, metadata) {
      var uri;
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context13.sent;
              _context13.next = 5;
              return this.sendTransaction("wrapERC721", [tokenContract, tokenId, uri]);

            case 5:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function createWithERC721(_x21, _x22, _x23) {
      return _createWithERC2.apply(this, arguments);
    }

    return createWithERC721;
  }();

  _proto.mint = /*#__PURE__*/function () {
    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(args) {
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.t0 = this;
              _context14.next = 3;
              return this.getSignerAddress();

            case 3:
              _context14.t1 = _context14.sent;
              _context14.t2 = args;
              _context14.next = 7;
              return _context14.t0.mintTo.call(_context14.t0, _context14.t1, _context14.t2);

            case 7:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function mint(_x24) {
      return _mint.apply(this, arguments);
    }

    return mint;
  }();

  _proto.mintTo = /*#__PURE__*/function () {
    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(to, args, data) {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              _context15.next = 3;
              return this.sendTransaction("mint", [to, args.tokenId, args.amount, data]);

            case 3:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function mintTo(_x25, _x26, _x27) {
      return _mintTo.apply(this, arguments);
    }

    return mintTo;
  }();

  _proto.mintBatch = /*#__PURE__*/function () {
    var _mintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(args) {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.t0 = this;
              _context16.next = 3;
              return this.getSignerAddress();

            case 3:
              _context16.t1 = _context16.sent;
              _context16.t2 = args;
              _context16.next = 7;
              return _context16.t0.mintBatchTo.call(_context16.t0, _context16.t1, _context16.t2);

            case 7:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function mintBatch(_x28) {
      return _mintBatch.apply(this, arguments);
    }

    return mintBatch;
  }();

  _proto.mintBatchTo = /*#__PURE__*/function () {
    var _mintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(to, args, data) {
      var ids, amounts;
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              ids = args.map(function (a) {
                return a.tokenId;
              });
              amounts = args.map(function (a) {
                return a.amount;
              });
              _context17.next = 5;
              return this.sendTransaction("mintBatch", [to, ids, amounts, data]);

            case 5:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function mintBatchTo(_x29, _x30, _x31) {
      return _mintBatchTo.apply(this, arguments);
    }

    return mintBatchTo;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(args) {
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.t0 = this;
              _context18.next = 3;
              return this.getSignerAddress();

            case 3:
              _context18.t1 = _context18.sent;
              _context18.t2 = args;
              _context18.next = 7;
              return _context18.t0.burnFrom.call(_context18.t0, _context18.t1, _context18.t2);

            case 7:
              return _context18.abrupt("return", _context18.sent);

            case 8:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function burn(_x32) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.burnBatch = /*#__PURE__*/function () {
    var _burnBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(args) {
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.t0 = this;
              _context19.next = 3;
              return this.getSignerAddress();

            case 3:
              _context19.t1 = _context19.sent;
              _context19.t2 = args;
              _context19.next = 7;
              return _context19.t0.burnBatchFrom.call(_context19.t0, _context19.t1, _context19.t2);

            case 7:
              return _context19.abrupt("return", _context19.sent);

            case 8:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function burnBatch(_x33) {
      return _burnBatch.apply(this, arguments);
    }

    return burnBatch;
  }();

  _proto.burnFrom = /*#__PURE__*/function () {
    var _burnFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(account, args) {
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.sendTransaction("burn", [account, args.tokenId, args.amount]);

            case 2:
              return _context20.abrupt("return", _context20.sent);

            case 3:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function burnFrom(_x34, _x35) {
      return _burnFrom.apply(this, arguments);
    }

    return burnFrom;
  }();

  _proto.burnBatchFrom = /*#__PURE__*/function () {
    var _burnBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(account, args) {
      var ids, amounts;
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              ids = args.map(function (a) {
                return a.tokenId;
              });
              amounts = args.map(function (a) {
                return a.amount;
              });
              _context21.next = 4;
              return this.sendTransaction("burnBatch", [account, ids, amounts]);

            case 4:
              return _context21.abrupt("return", _context21.sent);

            case 5:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function burnBatchFrom(_x36, _x37) {
      return _burnBatchFrom.apply(this, arguments);
    }

    return burnBatchFrom;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(from, to, args, data) {
      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              _context22.next = 3;
              return this.sendTransaction("safeTransferFrom", [from, to, args.tokenId, args.amount, data]);

            case 3:
              return _context22.abrupt("return", _context22.sent);

            case 4:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function transferFrom(_x38, _x39, _x40, _x41) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }();

  _proto.transferBatchFrom = /*#__PURE__*/function () {
    var _transferBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(from, to, args, data) {
      var ids, amounts;
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              ids = args.map(function (a) {
                return a.tokenId;
              });
              amounts = args.map(function (a) {
                return a.amount;
              });
              _context23.next = 5;
              return this.sendTransaction("safeBatchTransferFrom", [from, to, ids, amounts, data]);

            case 5:
              return _context23.abrupt("return", _context23.sent);

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function transferBatchFrom(_x42, _x43, _x44, _x45) {
      return _transferBatchFrom.apply(this, arguments);
    }

    return transferBatchFrom;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(amount) {
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return this.sendTransaction("setRoyaltyBps", [amount]);

            case 2:
              return _context24.abrupt("return", _context24.sent);

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function setRoyaltyBps(_x46) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(metadata) {
      var uri;
      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context25.sent;
              _context25.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context25.abrupt("return", _context25.sent);

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function setModuleMetadata(_x47) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(restricted) {
      return runtime_1.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              if (restricted === void 0) {
                restricted = false;
              }

              _context26.next = 3;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 3:
              return _context26.abrupt("return", _context26.sent);

            case 4:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26, this);
    }));

    function setRestrictedTransfer(_x48) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }()
  /**
   * `getOwned` is a convenience method for getting all owned tokens
   * for a particular wallet.
   *
   * @param _address - The address to check for token ownership
   * @returns An array of CollectionMetadata objects that are owned by the address
   */
  ;

  _proto.getOwned =
  /*#__PURE__*/
  function () {
    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(_address) {
      var _this3 = this;

      var address, maxId, balances, ownedBalances;
      return runtime_1.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              if (!_address) {
                _context28.next = 4;
                break;
              }

              _context28.t0 = _address;
              _context28.next = 7;
              break;

            case 4:
              _context28.next = 6;
              return this.getSignerAddress();

            case 6:
              _context28.t0 = _context28.sent;

            case 7:
              address = _context28.t0;
              _context28.next = 10;
              return this.readOnlyContract.nextTokenId();

            case 10:
              maxId = _context28.sent;
              _context28.next = 13;
              return this.readOnlyContract.balanceOfBatch(Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys()));

            case 13:
              balances = _context28.sent;
              ownedBalances = balances.map(function (b, i) {
                return {
                  tokenId: i,
                  balance: b
                };
              }).filter(function (b) {
                return b.balance.gt(0);
              });
              _context28.next = 17;
              return Promise.all(ownedBalances.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(b) {
                  return runtime_1.wrap(function _callee27$(_context27) {
                    while (1) {
                      switch (_context27.prev = _context27.next) {
                        case 0:
                          _context27.next = 2;
                          return _this3.get(b.tokenId.toString());

                        case 2:
                          return _context27.abrupt("return", _context27.sent);

                        case 3:
                        case "end":
                          return _context27.stop();
                      }
                    }
                  }, _callee27);
                }));

                return function (_x50) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 17:
              return _context28.abrupt("return", _context28.sent);

            case 18:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28, this);
    }));

    function getOwned(_x49) {
      return _getOwned.apply(this, arguments);
    }

    return getOwned;
  }();

  return CollectionModule;
}(ModuleWithRoles);
CollectionModule.moduleType = ModuleType.COLLECTION;
CollectionModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];

/**
 * Access this module by calling {@link ThirdwebSDK.getDatastoreModule}
 * @alpha
 */

var DatastoreModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(DatastoreModule, _ModuleWithRoles);

  function DatastoreModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = DatastoreModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return DatastoreModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return DataStore__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return DatastoreModule.moduleType;
  };

  _proto.getUint = /*#__PURE__*/function () {
    var _getUint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(key) {
      var keyHash;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              keyHash = keccak256(key.toString());
              _context.next = 3;
              return this.readOnlyContract.getUint(keyHash);

            case 3:
              return _context.abrupt("return", _context.sent);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getUint(_x) {
      return _getUint.apply(this, arguments);
    }

    return getUint;
  }() // write functions
  ;

  _proto.setUint =
  /*#__PURE__*/
  function () {
    var _setUint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(key, value) {
      var keyHash;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              keyHash = keccak256(key.toString());
              _context2.next = 3;
              return this.sendTransaction("setUint", [keyHash, value]);

            case 3:
              return _context2.abrupt("return", _context2.sent);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function setUint(_x2, _x3) {
      return _setUint.apply(this, arguments);
    }

    return setUint;
  }();

  return DatastoreModule;
}(ModuleWithRoles);
DatastoreModule.moduleType = ModuleType.DATASTORE;
DatastoreModule.roles = [RolesMap.admin, RolesMap.editor];

/**
 * Access this module by calling {@link ThirdwebSDK.getDropModule}
 * @beta
 */

var DropModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(DropModule, _ModuleWithRoles);

  function DropModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = DropModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return DropModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return LazyNFT__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return DropModule.moduleType;
  };

  _proto.getTokenMetadata = /*#__PURE__*/function () {
    var _getTokenMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getTokenMetadata$1(_x) {
      return _getTokenMetadata2.apply(this, arguments);
    }

    return getTokenMetadata$1;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(tokenId) {
      var _yield$Promise$all, owner, metadata;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return Promise.all([this.ownerOf(tokenId)["catch"](function () {
                return AddressZero;
              }), this.getTokenMetadata(tokenId)]);

            case 2:
              _yield$Promise$all = _context2.sent;
              owner = _yield$Promise$all[0];
              metadata = _yield$Promise$all[1];
              return _context2.abrupt("return", {
                owner: owner,
                metadata: metadata
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function get(_x2) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var _this = this;

      var maxId;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context3.sent.toNumber();
              _context3.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this.get(i.toString());
              }));

            case 5:
              return _context3.abrupt("return", _context3.sent);

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getAll() {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.getAllUnclaimed = /*#__PURE__*/function () {
    var _getAllUnclaimed = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var _this2 = this;

      var maxId, unmintedId;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context4.sent;
              _context4.next = 5;
              return this.readOnlyContract.nextMintTokenId();

            case 5:
              unmintedId = _context4.sent;
              _context4.next = 8;
              return Promise.all(Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map(function (i) {
                return _this2.get(unmintedId.add(i).toString());
              }));

            case 8:
              return _context4.abrupt("return", _context4.sent);

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getAllUnclaimed() {
      return _getAllUnclaimed.apply(this, arguments);
    }

    return getAllUnclaimed;
  }();

  _proto.getAllClaimed = /*#__PURE__*/function () {
    var _getAllClaimed = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      var _this3 = this;

      var maxId;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.readOnlyContract.nextMintTokenId();

            case 2:
              maxId = _context5.sent.toNumber();
              _context5.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this3.get(i.toString());
              }));

            case 5:
              return _context5.abrupt("return", _context5.sent);

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getAllClaimed() {
      return _getAllClaimed.apply(this, arguments);
    }

    return getAllClaimed;
  }();

  _proto.ownerOf = /*#__PURE__*/function () {
    var _ownerOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(tokenId) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.readOnlyContract.ownerOf(tokenId);

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function ownerOf(_x3) {
      return _ownerOf.apply(this, arguments);
    }

    return ownerOf;
  }();

  _proto.getOwned = /*#__PURE__*/function () {
    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(_address) {
      var _this4 = this;

      var address, balance, indices, tokenIds;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!_address) {
                _context7.next = 4;
                break;
              }

              _context7.t0 = _address;
              _context7.next = 7;
              break;

            case 4:
              _context7.next = 6;
              return this.getSignerAddress();

            case 6:
              _context7.t0 = _context7.sent;

            case 7:
              address = _context7.t0;
              _context7.next = 10;
              return this.readOnlyContract.balanceOf(address);

            case 10:
              balance = _context7.sent;
              indices = Array.from(Array(balance.toNumber()).keys());
              _context7.next = 14;
              return Promise.all(indices.map(function (i) {
                return _this4.readOnlyContract.tokenOfOwnerByIndex(address, i);
              }));

            case 14:
              tokenIds = _context7.sent;
              _context7.next = 17;
              return Promise.all(tokenIds.map(function (tokenId) {
                return _this4.get(tokenId.toString());
              }));

            case 17:
              return _context7.abrupt("return", _context7.sent);

            case 18:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getOwned(_x4) {
      return _getOwned.apply(this, arguments);
    }

    return getOwned;
  }();

  _proto.getActiveMintCondition = /*#__PURE__*/function () {
    var _getActiveMintCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
      var index;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.readOnlyContract.getLastStartedMintConditionIndex();

            case 2:
              index = _context8.sent;
              _context8.next = 5;
              return this.readOnlyContract.mintConditions(index);

            case 5:
              return _context8.abrupt("return", _context8.sent);

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function getActiveMintCondition() {
      return _getActiveMintCondition.apply(this, arguments);
    }

    return getActiveMintCondition;
  }();

  _proto.getAllMintConditions = /*#__PURE__*/function () {
    var _getAllMintConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      var conditions, i;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              conditions = [];
              i = 0;

            case 2:
              _context9.prev = 2;
              _context9.t0 = conditions;
              _context9.next = 6;
              return this.readOnlyContract.mintConditions(i);

            case 6:
              _context9.t1 = _context9.sent;

              _context9.t0.push.call(_context9.t0, _context9.t1);

              _context9.next = 13;
              break;

            case 10:
              _context9.prev = 10;
              _context9.t2 = _context9["catch"](2);
              return _context9.abrupt("break", 16);

            case 13:
              i++;
              _context9.next = 2;
              break;

            case 16:
              return _context9.abrupt("return", conditions);

            case 17:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[2, 10]]);
    }));

    function getAllMintConditions() {
      return _getAllMintConditions.apply(this, arguments);
    }

    return getAllMintConditions;
  }();

  _proto.totalSupply = /*#__PURE__*/function () {
    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10() {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              return _context10.abrupt("return", _context10.sent);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function totalSupply() {
      return _totalSupply.apply(this, arguments);
    }

    return totalSupply;
  }();

  _proto.maxTotalSupply = /*#__PURE__*/function () {
    var _maxTotalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.readOnlyContract.maxTotalSupply();

            case 2:
              return _context11.abrupt("return", _context11.sent);

            case 3:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function maxTotalSupply() {
      return _maxTotalSupply.apply(this, arguments);
    }

    return maxTotalSupply;
  }();

  _proto.totalUnclaimedSupply = /*#__PURE__*/function () {
    var _totalUnclaimedSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              _context12.t0 = _context12.sent;
              _context12.next = 5;
              return this.totalClaimedSupply();

            case 5:
              _context12.t1 = _context12.sent;
              return _context12.abrupt("return", _context12.t0.sub.call(_context12.t0, _context12.t1));

            case 7:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function totalUnclaimedSupply() {
      return _totalUnclaimedSupply.apply(this, arguments);
    }

    return totalUnclaimedSupply;
  }();

  _proto.totalClaimedSupply = /*#__PURE__*/function () {
    var _totalClaimedSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.readOnlyContract.nextMintTokenId();

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function totalClaimedSupply() {
      return _totalClaimedSupply.apply(this, arguments);
    }

    return totalClaimedSupply;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(address) {
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.readOnlyContract.balanceOf(address);

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function balanceOf(_x5) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15() {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.t0 = this;
              _context15.next = 3;
              return this.getSignerAddress();

            case 3:
              _context15.t1 = _context15.sent;
              _context15.next = 6;
              return _context15.t0.balanceOf.call(_context15.t0, _context15.t1);

            case 6:
              return _context15.abrupt("return", _context15.sent);

            case 7:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(address, operator) {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 2:
              return _context16.abrupt("return", _context16.sent);

            case 3:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function isApproved(_x6, _x7) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }() // write functions
  ;

  _proto.setApproval =
  /*#__PURE__*/
  function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(operator, approved) {
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context17.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
              return _context17.abrupt("return", _context17.sent);

            case 4:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function setApproval(_x8, _x9) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(to, tokenId) {
      var from;
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.getSignerAddress();

            case 2:
              from = _context18.sent;
              _context18.next = 5;
              return this.sendTransaction("safeTransferFrom(address,address,uint256)", [from, to, tokenId]);

            case 5:
              return _context18.abrupt("return", _context18.sent);

            case 6:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function transfer(_x10, _x11) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }() // owner functions
  ;

  _proto.lazyMint =
  /*#__PURE__*/
  function () {
    var _lazyMint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(metadata) {
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.lazyMintBatch([metadata]);

            case 2:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function lazyMint(_x12) {
      return _lazyMint.apply(this, arguments);
    }

    return lazyMint;
  }();

  _proto.lazyMintBatch = /*#__PURE__*/function () {
    var _lazyMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(metadatas) {
      var uris;
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return Promise.all(metadatas.map(function (m) {
                return uploadMetadata(m);
              }));

            case 2:
              uris = _context20.sent;
              _context20.next = 5;
              return this.sendTransaction("lazyMintBatch", [uris]);

            case 5:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function lazyMintBatch(_x13) {
      return _lazyMintBatch.apply(this, arguments);
    }

    return lazyMintBatch;
  }();

  _proto.lazyMintAmount = /*#__PURE__*/function () {
    var _lazyMintAmount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(amount) {
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.sendTransaction("lazyMintAmount", [amount]);

            case 2:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function lazyMintAmount(_x14) {
      return _lazyMintAmount.apply(this, arguments);
    }

    return lazyMintAmount;
  }();

  _proto.setPublicMintConditions = /*#__PURE__*/function () {
    var _setPublicMintConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(conditions) {
      var _conditions;

      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _conditions = conditions.map(function (c) {
                return {
                  startTimestamp: c.startTimestampInSeconds || 0,
                  maxMintSupply: c.maxMintSupply,
                  currentMintSupply: 0,
                  quantityLimitPerTransaction: c.quantityLimitPerTransaction || c.maxMintSupply,
                  waitTimeSecondsLimitPerTransaction: c.waitTimeSecondsLimitPerTransaction || 0,
                  pricePerToken: c.pricePerToken || 0,
                  currency: c.currency || AddressZero,
                  merkleRoot: c.merkleRoot || hexZeroPad([0], 32)
                };
              });
              _context22.next = 3;
              return this.sendTransaction("setPublicMintConditions", [_conditions]);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function setPublicMintConditions(_x15) {
      return _setPublicMintConditions.apply(this, arguments);
    }

    return setPublicMintConditions;
  }();

  _proto.claim = /*#__PURE__*/function () {
    var _claim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(quantity) {
      var proofs, mintCondition, overrides;
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              proofs = [hexZeroPad([0], 32)];
              _context23.next = 3;
              return this.getActiveMintCondition();

            case 3:
              mintCondition = _context23.sent;
              _context23.next = 6;
              return this.getCallOverrides();

            case 6:
              _context23.t0 = _context23.sent;

              if (_context23.t0) {
                _context23.next = 9;
                break;
              }

              _context23.t0 = {};

            case 9:
              overrides = _context23.t0;

              if (mintCondition.currency === AddressZero && mintCondition.pricePerToken > 0) {
                overrides["value"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);
              }

              _context23.next = 13;
              return this.sendTransaction("claim", [quantity, proofs], overrides);

            case 13:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function claim(_x16) {
      return _claim.apply(this, arguments);
    }

    return claim;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(tokenId) {
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return this.sendTransaction("burn", [tokenId]);

            case 2:
              return _context24.abrupt("return", _context24.sent);

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function burn(_x17) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(from, to, tokenId) {
      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.sendTransaction("transferFrom", [from, to, tokenId]);

            case 2:
              return _context25.abrupt("return", _context25.sent);

            case 3:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function transferFrom(_x18, _x19, _x20) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }() // owner functions
  ;

  _proto.setModuleMetadata =
  /*#__PURE__*/
  function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(metadata) {
      var uri;
      return runtime_1.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context26.sent;
              _context26.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context26.abrupt("return", _context26.sent);

            case 6:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26, this);
    }));

    function setModuleMetadata(_x21) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(amount) {
      return runtime_1.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return this.sendTransaction("setRoyaltyBps", [amount]);

            case 2:
              return _context27.abrupt("return", _context27.sent);

            case 3:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27, this);
    }));

    function setRoyaltyBps(_x22) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setBaseTokenUri = /*#__PURE__*/function () {
    var _setBaseTokenUri = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(uri) {
      return runtime_1.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return this.sendTransaction("setBaseTokenURI", [uri]);

            case 2:
              return _context28.abrupt("return", _context28.sent);

            case 3:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28, this);
    }));

    function setBaseTokenUri(_x23) {
      return _setBaseTokenUri.apply(this, arguments);
    }

    return setBaseTokenUri;
  }();

  _proto.setMaxTotalSupply = /*#__PURE__*/function () {
    var _setMaxTotalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(amount) {
      return runtime_1.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              _context29.next = 2;
              return this.sendTransaction("setMaxTotalSupply", [amount]);

            case 2:
              return _context29.abrupt("return", _context29.sent);

            case 3:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29, this);
    }));

    function setMaxTotalSupply(_x24) {
      return _setMaxTotalSupply.apply(this, arguments);
    }

    return setMaxTotalSupply;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(restricted) {
      return runtime_1.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              _context30.next = 2;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 2:
              return _context30.abrupt("return", _context30.sent);

            case 3:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30, this);
    }));

    function setRestrictedTransfer(_x25) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }();

  return DropModule;
}(ModuleWithRoles);
DropModule.moduleType = ModuleType.DROP;
DropModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];

/**
 * Access this module by calling {@link ThirdwebSDK.getMarketModule}
 * @public
 */

var MarketModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(MarketModule, _ModuleWithRoles);

  function MarketModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = MarketModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return MarketModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return Market__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return MarketModule.moduleType;
  };

  _proto.transformResultToListing = /*#__PURE__*/function () {
    var _transformResultToListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(listing) {
      var currency, metadata;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              currency = null;
              _context.prev = 1;
              _context.next = 4;
              return getCurrencyValue(this.providerOrSigner, listing.currency, listing.pricePerToken);

            case 4:
              currency = _context.sent;
              _context.next = 9;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](1);

            case 9:
              metadata = undefined;
              _context.prev = 10;
              _context.next = 13;
              return getMetadataWithoutContract(this.providerOrSigner, listing.assetContract, listing.tokenId.toString(), this.ipfsGatewayUrl);

            case 13:
              metadata = _context.sent;
              _context.next = 18;
              break;

            case 16:
              _context.prev = 16;
              _context.t1 = _context["catch"](10);

            case 18:
              return _context.abrupt("return", {
                id: listing.listingId.toString(),
                seller: listing.seller,
                tokenId: listing.tokenId.toString(),
                tokenContract: listing.assetContract,
                tokenMetadata: metadata,
                quantity: listing.quantity,
                price: listing.pricePerToken,
                currencyContract: listing.currency,
                currencyMetadata: currency,
                saleStart: listing.saleStart.gt(0) ? new Date(listing.saleStart.toNumber() * 1000) : null,
                saleEnd: listing.saleEnd.gt(0) && listing.saleEnd.lte(Number.MAX_SAFE_INTEGER - 1) ? new Date(listing.saleEnd.toNumber() * 1000) : null
              });

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[1, 7], [10, 16]]);
    }));

    function transformResultToListing(_x) {
      return _transformResultToListing.apply(this, arguments);
    }

    return transformResultToListing;
  }()
  /**
   * @deprecated Use {@link MarketModule.get} instead.
   */
  ;

  _proto.getListing =
  /*#__PURE__*/
  function () {
    var _getListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(listingId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.get(listingId);

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getListing(_x2) {
      return _getListing.apply(this, arguments);
    }

    return getListing;
  }()
  /**
   * @deprecated Use {@link MarketModule.getAll} instead.
   */
  ;

  _proto.getAllListings =
  /*#__PURE__*/
  function () {
    var _getAllListings = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(filter) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAll(filter);

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getAllListings(_x3) {
      return _getAllListings.apply(this, arguments);
    }

    return getAllListings;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(listingId) {
      var listing;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.listings(listingId);

            case 2:
              listing = _context4.sent;
              _context4.next = 5;
              return this.transformResultToListing(listing);

            case 5:
              return _context4.abrupt("return", _context4.sent);

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function get(_x4) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(filter) {
      var _this = this;

      var listings;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              listings = [];

              if (filter) {
                _context5.next = 9;
                break;
              }

              _context5.t0 = listings;
              _context5.next = 5;
              return this.readOnlyContract.getAllListings();

            case 5:
              _context5.t1 = _context5.sent;
              listings = _context5.t0.concat.call(_context5.t0, _context5.t1);
              _context5.next = 38;
              break;

            case 9:
              if (!(filter.tokenContract && filter.tokenId)) {
                _context5.next = 17;
                break;
              }

              _context5.t2 = listings;
              _context5.next = 13;
              return this.readOnlyContract.getListingsByAsset(filter.tokenContract, filter.tokenId);

            case 13:
              _context5.t3 = _context5.sent;
              listings = _context5.t2.concat.call(_context5.t2, _context5.t3);
              _context5.next = 38;
              break;

            case 17:
              if (!filter.seller) {
                _context5.next = 25;
                break;
              }

              _context5.t4 = listings;
              _context5.next = 21;
              return this.readOnlyContract.getListingsBySeller(filter.seller);

            case 21:
              _context5.t5 = _context5.sent;
              listings = _context5.t4.concat.call(_context5.t4, _context5.t5);
              _context5.next = 38;
              break;

            case 25:
              if (!filter.tokenContract) {
                _context5.next = 33;
                break;
              }

              _context5.t6 = listings;
              _context5.next = 29;
              return this.readOnlyContract.getListingsByAssetContract(filter.tokenContract);

            case 29:
              _context5.t7 = _context5.sent;
              listings = _context5.t6.concat.call(_context5.t6, _context5.t7);
              _context5.next = 38;
              break;

            case 33:
              _context5.t8 = listings;
              _context5.next = 36;
              return this.readOnlyContract.getAllListings();

            case 36:
              _context5.t9 = _context5.sent;
              listings = _context5.t8.concat.call(_context5.t8, _context5.t9);

            case 38:
              listings = listings.filter(function (l) {
                if (l.quantity.eq(0)) {
                  return false;
                }

                if (filter) {
                  var filterSeller = (filter == null ? void 0 : filter.seller) || "";
                  var filterTokenContract = (filter == null ? void 0 : filter.tokenContract) || "";
                  var filterTokenId = (filter == null ? void 0 : filter.tokenId) || "";

                  if (filterSeller && filterSeller.toLowerCase() !== l.seller.toLowerCase()) {
                    return false;
                  }

                  if (filterTokenContract && filterTokenContract.toLowerCase() !== l.assetContract.toLowerCase()) {
                    return false;
                  }

                  if (filterTokenId && filterTokenId.toLowerCase() !== l.tokenId.toString().toLowerCase()) {
                    return false;
                  }
                }

                return true;
              }).map(function (l) {
                return _this.transformResultToListing(l);
              });
              _context5.next = 41;
              return Promise.all(listings);

            case 41:
              return _context5.abrupt("return", _context5.sent);

            case 42:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getAll(_x5) {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.getMarketFeeBps = /*#__PURE__*/function () {
    var _getMarketFeeBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.readOnlyContract.marketFeeBps();

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getMarketFeeBps() {
      return _getMarketFeeBps.apply(this, arguments);
    }

    return getMarketFeeBps;
  }() // write functions
  ;

  _proto.list =
  /*#__PURE__*/
  function () {
    var _list = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(assetContract, tokenId, currencyContract, price, quantity, tokensPerBuyer, secondsUntilStart, secondsUntilEnd) {
      var from, erc165, isERC721, asset, approved, isTokenApproved, tx, _asset, _approved, _tx, receipt, event, listing;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (tokensPerBuyer === void 0) {
                tokensPerBuyer = 0;
              }

              if (secondsUntilStart === void 0) {
                secondsUntilStart = 0;
              }

              if (secondsUntilEnd === void 0) {
                secondsUntilEnd = 0;
              }

              _context7.next = 5;
              return this.getSignerAddress();

            case 5:
              from = _context7.sent;
              erc165 = ERC165__factory.connect(assetContract, this.providerOrSigner); // check for token approval

              _context7.next = 9;
              return erc165.supportsInterface(InterfaceId_IERC721);

            case 9:
              isERC721 = _context7.sent;

              if (!isERC721) {
                _context7.next = 34;
                break;
              }

              asset = ERC721__factory.connect(assetContract, this.providerOrSigner);
              _context7.next = 14;
              return asset.isApprovedForAll(from, this.address);

            case 14:
              approved = _context7.sent;

              if (approved) {
                _context7.next = 32;
                break;
              }

              _context7.next = 18;
              return asset.getApproved(tokenId);

            case 18:
              _context7.t0 = _context7.sent.toLowerCase();
              _context7.t1 = this.address.toLowerCase();
              isTokenApproved = _context7.t0 === _context7.t1;

              if (isTokenApproved) {
                _context7.next = 32;
                break;
              }

              _context7.t2 = asset;
              _context7.t3 = this.address;
              _context7.next = 26;
              return this.getCallOverrides();

            case 26:
              _context7.t4 = _context7.sent;
              _context7.next = 29;
              return _context7.t2.setApprovalForAll.call(_context7.t2, _context7.t3, true, _context7.t4);

            case 29:
              tx = _context7.sent;
              _context7.next = 32;
              return tx.wait();

            case 32:
              _context7.next = 49;
              break;

            case 34:
              _asset = ERC1155__factory.connect(assetContract, this.providerOrSigner);
              _context7.next = 37;
              return _asset.isApprovedForAll(from, this.address);

            case 37:
              _approved = _context7.sent;

              if (_approved) {
                _context7.next = 49;
                break;
              }

              _context7.t5 = _asset;
              _context7.t6 = this.address;
              _context7.next = 43;
              return this.getCallOverrides();

            case 43:
              _context7.t7 = _context7.sent;
              _context7.next = 46;
              return _context7.t5.setApprovalForAll.call(_context7.t5, _context7.t6, true, _context7.t7);

            case 46:
              _tx = _context7.sent;
              _context7.next = 49;
              return _tx.wait();

            case 49:
              _context7.next = 51;
              return this.sendTransaction("list", [assetContract, tokenId, currencyContract, price, quantity, tokensPerBuyer, secondsUntilStart, secondsUntilEnd]);

            case 51:
              receipt = _context7.sent;
              event = this.parseEventLogs("NewListing", receipt == null ? void 0 : receipt.logs);
              listing = event == null ? void 0 : event.listing;
              _context7.next = 56;
              return this.transformResultToListing(listing);

            case 56:
              return _context7.abrupt("return", _context7.sent);

            case 57:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function list(_x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13) {
      return _list.apply(this, arguments);
    }

    return list;
  }();

  _proto.unlistAll = /*#__PURE__*/function () {
    var _unlistAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(listingId) {
      var maxQuantity;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.get(listingId);

            case 2:
              maxQuantity = _context8.sent.quantity;
              _context8.next = 5;
              return this.unlist(listingId, maxQuantity);

            case 5:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function unlistAll(_x14) {
      return _unlistAll.apply(this, arguments);
    }

    return unlistAll;
  }();

  _proto.unlist = /*#__PURE__*/function () {
    var _unlist = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(listingId, quantity) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.sendTransaction("unlist", [listingId, quantity]);

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function unlist(_x15, _x16) {
      return _unlist.apply(this, arguments);
    }

    return unlist;
  }();

  _proto.buy = /*#__PURE__*/function () {
    var _buy = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(listingId, quantity) {
      var listing, owner, spender, totalPrice, erc20, allowance, tx, receipt, event;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.get(listingId);

            case 2:
              listing = _context10.sent;
              _context10.next = 5;
              return this.getSignerAddress();

            case 5:
              owner = _context10.sent;
              spender = this.address;
              totalPrice = listing.price.mul(BigNumber.from(quantity));

              if (!(listing.currencyContract && listing.currencyContract !== AddressZero)) {
                _context10.next = 25;
                break;
              }

              erc20 = ERC20__factory.connect(listing.currencyContract, this.providerOrSigner);
              _context10.next = 12;
              return erc20.allowance(owner, spender);

            case 12:
              allowance = _context10.sent;

              if (!allowance.lt(totalPrice)) {
                _context10.next = 25;
                break;
              }

              _context10.t0 = erc20;
              _context10.t1 = spender;
              _context10.t2 = totalPrice;
              _context10.next = 19;
              return this.getCallOverrides();

            case 19:
              _context10.t3 = _context10.sent;
              _context10.next = 22;
              return _context10.t0.increaseAllowance.call(_context10.t0, _context10.t1, _context10.t2, _context10.t3);

            case 22:
              tx = _context10.sent;
              _context10.next = 25;
              return tx.wait();

            case 25:
              _context10.next = 27;
              return this.sendTransaction("buy", [listingId, quantity]);

            case 27:
              receipt = _context10.sent;
              event = this.parseEventLogs("NewSale", receipt == null ? void 0 : receipt.logs);
              _context10.next = 31;
              return this.transformResultToListing(event == null ? void 0 : event.listing);

            case 31:
              return _context10.abrupt("return", _context10.sent);

            case 32:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function buy(_x17, _x18) {
      return _buy.apply(this, arguments);
    }

    return buy;
  }() // owner functions
  ;

  _proto.setModuleMetadata =
  /*#__PURE__*/
  function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(metadata) {
      var uri;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context11.sent;
              _context11.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context11.abrupt("return", _context11.sent);

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function setModuleMetadata(_x19) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setMarketFeeBps = /*#__PURE__*/function () {
    var _setMarketFeeBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(fee) {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.sendTransaction("setMarketFeeBps", [fee]);

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function setMarketFeeBps(_x20) {
      return _setMarketFeeBps.apply(this, arguments);
    }

    return setMarketFeeBps;
  }();

  return MarketModule;
}(ModuleWithRoles);
MarketModule.moduleType = ModuleType.MARKET;
MarketModule.roles = [RolesMap.admin, RolesMap.lister, RolesMap.pauser];

/**
 * Access this module by calling {@link ThirdwebSDK.getNFTModule}
 * @public
 */

var NFTModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(NFTModule, _ModuleWithRoles);

  function NFTModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = NFTModule.prototype;

  _proto.getModuleRoles = function getModuleRoles() {
    return NFTModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return NFT__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return NFTModule.moduleType;
  };

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get(_x) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var _this = this;

      var maxId;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context2.sent.toNumber();
              _context2.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this.get(i.toString());
              }));

            case 5:
              return _context2.abrupt("return", _context2.sent);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getAll() {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.getWithOwner = /*#__PURE__*/function () {
    var _getWithOwner = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(tokenId) {
      var _yield$Promise$all, owner, metadata;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return Promise.all([this.ownerOf(tokenId), this.get(tokenId)]);

            case 2:
              _yield$Promise$all = _context3.sent;
              owner = _yield$Promise$all[0];
              metadata = _yield$Promise$all[1];
              return _context3.abrupt("return", {
                owner: owner,
                metadata: metadata
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getWithOwner(_x2) {
      return _getWithOwner.apply(this, arguments);
    }

    return getWithOwner;
  }();

  _proto.getAllWithOwner = /*#__PURE__*/function () {
    var _getAllWithOwner = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var _this2 = this;

      var maxId;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context4.sent.toNumber();
              _context4.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this2.getWithOwner(i.toString());
              }));

            case 5:
              return _context4.abrupt("return", _context4.sent);

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getAllWithOwner() {
      return _getAllWithOwner.apply(this, arguments);
    }

    return getAllWithOwner;
  }()
  /**
   * Checks the owner of a particular NFT
   *
   * @param tokenId - ID of the NFT to get the owner of
   * @returns the owner of the token, or a zero address if the
   * token has been burned
   */
  ;

  _proto.ownerOf =
  /*#__PURE__*/
  function () {
    var _ownerOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(tokenId) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              _context5.next = 3;
              return this.readOnlyContract.ownerOf(tokenId);

            case 3:
              return _context5.abrupt("return", _context5.sent);

            case 6:
              _context5.prev = 6;
              _context5.t0 = _context5["catch"](0);
              return _context5.abrupt("return", AddressZero);

            case 9:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 6]]);
    }));

    function ownerOf(_x3) {
      return _ownerOf.apply(this, arguments);
    }

    return ownerOf;
  }();

  _proto.getOwned = /*#__PURE__*/function () {
    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(_address) {
      var _this3 = this;

      var address, balance, indices, tokenIds;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!_address) {
                _context6.next = 4;
                break;
              }

              _context6.t0 = _address;
              _context6.next = 7;
              break;

            case 4:
              _context6.next = 6;
              return this.getSignerAddress();

            case 6:
              _context6.t0 = _context6.sent;

            case 7:
              address = _context6.t0;
              _context6.next = 10;
              return this.readOnlyContract.balanceOf(address);

            case 10:
              balance = _context6.sent;
              indices = Array.from(Array(balance.toNumber()).keys());
              _context6.next = 14;
              return Promise.all(indices.map(function (i) {
                return _this3.readOnlyContract.tokenOfOwnerByIndex(address, i);
              }));

            case 14:
              tokenIds = _context6.sent;
              _context6.next = 17;
              return Promise.all(tokenIds.map(function (tokenId) {
                return _this3.get(tokenId.toString());
              }));

            case 17:
              return _context6.abrupt("return", _context6.sent);

            case 18:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getOwned(_x4) {
      return _getOwned.apply(this, arguments);
    }

    return getOwned;
  }();

  _proto.totalSupply = /*#__PURE__*/function () {
    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.readOnlyContract.totalSupply();

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function totalSupply() {
      return _totalSupply.apply(this, arguments);
    }

    return totalSupply;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(address) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.readOnlyContract.balanceOf(address);

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function balanceOf(_x5) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.t0 = this;
              _context9.next = 3;
              return this.getSignerAddress();

            case 3:
              _context9.t1 = _context9.sent;
              _context9.next = 6;
              return _context9.t0.balanceOf.call(_context9.t0, _context9.t1);

            case 6:
              return _context9.abrupt("return", _context9.sent);

            case 7:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(address, operator) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 2:
              return _context10.abrupt("return", _context10.sent);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function isApproved(_x6, _x7) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }() // write functions
  ;

  _proto.setApproval =
  /*#__PURE__*/
  function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(operator, approved) {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context11.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
              return _context11.abrupt("return", _context11.sent);

            case 4:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function setApproval(_x8, _x9) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(to, tokenId) {
      var from;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.getSignerAddress();

            case 2:
              from = _context12.sent;
              _context12.next = 5;
              return this.sendTransaction("safeTransferFrom(address,address,uint256)", [from, to, tokenId]);

            case 5:
              return _context12.abrupt("return", _context12.sent);

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function transfer(_x10, _x11) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }() // owner functions
  ;

  _proto.mint =
  /*#__PURE__*/
  function () {
    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(metadata) {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.t0 = this;
              _context13.next = 3;
              return this.getSignerAddress();

            case 3:
              _context13.t1 = _context13.sent;
              _context13.t2 = metadata;
              _context13.next = 7;
              return _context13.t0.mintTo.call(_context13.t0, _context13.t1, _context13.t2);

            case 7:
              return _context13.abrupt("return", _context13.sent);

            case 8:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function mint(_x12) {
      return _mint.apply(this, arguments);
    }

    return mint;
  }();

  _proto.mintTo = /*#__PURE__*/function () {
    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(to, metadata) {
      var uri, receipt, event, tokenId;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context14.sent;
              _context14.next = 5;
              return this.sendTransaction("mintNFT", [to, uri]);

            case 5:
              receipt = _context14.sent;
              event = this.parseEventLogs("Minted", receipt == null ? void 0 : receipt.logs);
              tokenId = event == null ? void 0 : event.tokenId;
              _context14.next = 10;
              return this.get(tokenId.toString());

            case 10:
              return _context14.abrupt("return", _context14.sent);

            case 11:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function mintTo(_x13, _x14) {
      return _mintTo.apply(this, arguments);
    }

    return mintTo;
  }();

  _proto.mintBatch = /*#__PURE__*/function () {
    var _mintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(metadatas) {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.t0 = this;
              _context15.next = 3;
              return this.getSignerAddress();

            case 3:
              _context15.t1 = _context15.sent;
              _context15.t2 = metadatas;
              _context15.next = 7;
              return _context15.t0.mintBatchTo.call(_context15.t0, _context15.t1, _context15.t2);

            case 7:
              return _context15.abrupt("return", _context15.sent);

            case 8:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function mintBatch(_x15) {
      return _mintBatch.apply(this, arguments);
    }

    return mintBatch;
  }();

  _proto.mintBatchTo = /*#__PURE__*/function () {
    var _mintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(to, metadatas) {
      var _this4 = this;

      var uris, receipt, event, tokenIds;
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return Promise.all(metadatas.map(function (m) {
                return uploadMetadata(m);
              }));

            case 2:
              uris = _context16.sent;
              _context16.next = 5;
              return this.sendTransaction("mintNFTBatch", [to, uris]);

            case 5:
              receipt = _context16.sent;
              event = this.parseEventLogs("MintedBatch", receipt == null ? void 0 : receipt.logs);
              tokenIds = event.tokenIds;
              _context16.next = 10;
              return Promise.all(tokenIds.map(function (tokenId) {
                return _this4.get(tokenId.toString());
              }));

            case 10:
              return _context16.abrupt("return", _context16.sent);

            case 11:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function mintBatchTo(_x16, _x17) {
      return _mintBatchTo.apply(this, arguments);
    }

    return mintBatchTo;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(tokenId) {
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.sendTransaction("burn", [tokenId]);

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function burn(_x18) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(from, to, tokenId) {
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.sendTransaction("transferFrom", [from, to, tokenId]);

            case 2:
              return _context18.abrupt("return", _context18.sent);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function transferFrom(_x19, _x20, _x21) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }() // owner functions
  ;

  _proto.setRestrictedTransfer =
  /*#__PURE__*/
  function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(restricted) {
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              if (restricted === void 0) {
                restricted = false;
              }

              _context19.next = 3;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 3:
              return _context19.abrupt("return", _context19.sent);

            case 4:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function setRestrictedTransfer(_x22) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(amount) {
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.sendTransaction("setRoyaltyBps", [amount]);

            case 2:
              return _context20.abrupt("return", _context20.sent);

            case 3:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function setRoyaltyBps(_x23) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(metadata) {
      var uri;
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context21.sent;
              _context21.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context21.abrupt("return", _context21.sent);

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function setModuleMetadata(_x24) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  return NFTModule;
}(ModuleWithRoles);
NFTModule.moduleType = ModuleType.NFT;
NFTModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];

/**
 * Access this module by calling {@link ThirdwebSDK.getPackModule}
 * @beta
 */

var PackModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(PackModule, _ModuleWithRoles);

  function PackModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = PackModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return PackModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return Pack__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return PackModule.moduleType;
  };

  _proto.open = /*#__PURE__*/function () {
    var _open = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(packId) {
      var _this = this;

      var receipt, event, requestId, opener, fulfillEvent, rewardIds;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.sendTransaction("openPack", [packId]);

            case 2:
              receipt = _context.sent;
              event = this.parseEventLogs("PackOpenRequest", receipt == null ? void 0 : receipt.logs);
              requestId = event.requestId;
              opener = event.opener;
              _context.next = 8;
              return new Promise(function (resolve) {
                _this.readOnlyContract.once( // eslint-disable-next-line new-cap
                _this.readOnlyContract.filters.PackOpenFulfilled(null, opener), function (_packId, _opener, _requestId, rewardContract, rewardIds) {
                  if (requestId === _requestId) {
                    resolve({
                      packId: _packId,
                      opener: _opener,
                      requestId: requestId,
                      rewardContract: rewardContract,
                      rewardIds: rewardIds
                    });
                  }
                });
              });

            case 8:
              fulfillEvent = _context.sent;
              rewardIds = fulfillEvent.rewardIds;
              _context.next = 12;
              return Promise.all(rewardIds.map(function (rewardId) {
                return getMetadataWithoutContract(_this.providerOrSigner, _this.address, rewardId.toString(), _this.ipfsGatewayUrl);
              }));

            case 12:
              return _context.abrupt("return", _context.sent);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function open(_x) {
      return _open.apply(this, arguments);
    }

    return open;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(packId) {
      var _yield$Promise$all, meta, state, supply, entity;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return Promise.all([getMetadataWithoutContract(this.providerOrSigner, this.address, packId, this.ipfsGatewayUrl), this.readOnlyContract.getPack(packId), this.readOnlyContract.totalSupply(packId)["catch"](function () {
                return BigNumber.from("0");
              })]);

            case 2:
              _yield$Promise$all = _context2.sent;
              meta = _yield$Promise$all[0];
              state = _yield$Promise$all[1];
              supply = _yield$Promise$all[2];
              entity = {
                id: packId,
                metadata: meta,
                creator: state.creator,
                currentSupply: supply,
                openStart: state.openStart.gt(0) ? new Date(state.openStart.toNumber() * 1000) : null
              };
              return _context2.abrupt("return", entity);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function get(_x2) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var _this2 = this;

      var maxId;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context3.sent.toNumber();
              _context3.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this2.get(i.toString());
              }));

            case 5:
              return _context3.abrupt("return", _context3.sent);

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getAll() {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.getNFTs = /*#__PURE__*/function () {
    var _getNFTs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(packId) {
      var _this3 = this;

      var packReward, rewards;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.getPackWithRewards(packId);

            case 2:
              packReward = _context4.sent;

              if (packReward.source) {
                _context4.next = 5;
                break;
              }

              throw new NotFoundError();

            case 5:
              _context4.next = 7;
              return Promise.all(packReward.tokenIds.map(function (tokenId) {
                return getMetadataWithoutContract(_this3.providerOrSigner, packReward.source, tokenId.toString(), _this3.ipfsGatewayUrl);
              }));

            case 7:
              rewards = _context4.sent;
              return _context4.abrupt("return", rewards.map(function (reward, i) {
                return {
                  supply: packReward.amountsPacked[i],
                  metadata: reward
                };
              }));

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getNFTs(_x3) {
      return _getNFTs.apply(this, arguments);
    }

    return getNFTs;
  }() // passthrough to the contract
  ;

  _proto.balanceOf =
  /*#__PURE__*/
  function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address, tokenId) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.readOnlyContract.balanceOf(address, tokenId);

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function balanceOf(_x4, _x5) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(tokenId) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.t0 = this;
              _context6.next = 3;
              return this.getSignerAddress();

            case 3:
              _context6.t1 = _context6.sent;
              _context6.t2 = tokenId;
              _context6.next = 7;
              return _context6.t0.balanceOf.call(_context6.t0, _context6.t1, _context6.t2);

            case 7:
              return _context6.abrupt("return", _context6.sent);

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function balance(_x6) {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(address, operator) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function isApproved(_x7, _x8) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }();

  _proto.setApproval = /*#__PURE__*/function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(operator, approved) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context8.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function setApproval(_x9, _x10) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(to, tokenId, amount) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.t0 = this;
              _context9.next = 3;
              return this.getSignerAddress();

            case 3:
              _context9.t1 = _context9.sent;
              _context9.t2 = to;
              _context9.t3 = tokenId;
              _context9.t4 = amount;
              _context9.t5 = [0];
              _context9.t6 = [_context9.t1, _context9.t2, _context9.t3, _context9.t4, _context9.t5];
              _context9.next = 11;
              return _context9.t0.sendTransaction.call(_context9.t0, "safeTransferFrom", _context9.t6);

            case 11:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function transfer(_x11, _x12, _x13) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }() // owner functions
  ;

  _proto.create =
  /*#__PURE__*/
  function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(args) {
      var _receipt$events, _event$args;

      var asset, from, ids, amounts, uri, packParams, tx, receipt, event, packId;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              asset = ERC1155__factory.connect(args.assetContract, this.providerOrSigner);
              _context10.next = 3;
              return this.getSignerAddress();

            case 3:
              from = _context10.sent;
              ids = args.assets.map(function (a) {
                return a.tokenId;
              });
              amounts = args.assets.map(function (a) {
                return a.amount;
              });
              _context10.next = 8;
              return uploadMetadata(args.metadata);

            case 8:
              uri = _context10.sent;
              packParams = ethers.utils.defaultAbiCoder.encode(["string", "uint256", "uint256"], [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1]); // TODO: make it gasless

              _context10.t0 = asset;
              _context10.t1 = from;
              _context10.t2 = this.address;
              _context10.t3 = ids;
              _context10.t4 = amounts;
              _context10.t5 = packParams;
              _context10.next = 18;
              return this.getCallOverrides();

            case 18:
              _context10.t6 = _context10.sent;
              _context10.next = 21;
              return _context10.t0.safeBatchTransferFrom.call(_context10.t0, _context10.t1, _context10.t2, _context10.t3, _context10.t4, _context10.t5, _context10.t6);

            case 21:
              tx = _context10.sent;
              _context10.next = 24;
              return tx.wait();

            case 24:
              receipt = _context10.sent;
              event = receipt == null ? void 0 : (_receipt$events = receipt.events) == null ? void 0 : _receipt$events.find(function (e) {
                return e.event === "PackCreated";
              });
              packId = event == null ? void 0 : (_event$args = event.args) == null ? void 0 : _event$args.packId;
              _context10.next = 29;
              return this.get(packId);

            case 29:
              return _context10.abrupt("return", _context10.sent);

            case 30:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function create(_x14) {
      return _create.apply(this, arguments);
    }

    return create;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(from, to, args, data) {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              _context11.next = 3;
              return this.sendTransaction("safeTransferFrom", [from, to, args.tokenId, args.amount, data]);

            case 3:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function transferFrom(_x15, _x16, _x17, _x18) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }();

  _proto.transferBatchFrom = /*#__PURE__*/function () {
    var _transferBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(from, to, args, data) {
      var ids, amounts;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              ids = args.map(function (a) {
                return a.tokenId;
              });
              amounts = args.map(function (a) {
                return a.amount;
              });
              _context12.next = 5;
              return this.sendTransaction("safeBatchTransferFrom", [from, to, ids, amounts, data]);

            case 5:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function transferBatchFrom(_x19, _x20, _x21, _x22) {
      return _transferBatchFrom.apply(this, arguments);
    }

    return transferBatchFrom;
  }() // owner functions
  ;

  _proto.getLinkBalance =
  /*#__PURE__*/
  function () {
    var _getLinkBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
      var chainId, chainlink, erc20;
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.getChainID();

            case 2:
              chainId = _context13.sent;
              chainlink = ChainlinkVrf[chainId];
              erc20 = ERC20__factory.connect(chainlink.linkTokenAddress, this.providerOrSigner);
              _context13.t0 = getCurrencyValue;
              _context13.t1 = this.providerOrSigner;
              _context13.t2 = chainlink.linkTokenAddress;
              _context13.next = 10;
              return erc20.balanceOf(this.address);

            case 10:
              _context13.t3 = _context13.sent;
              _context13.next = 13;
              return (0, _context13.t0)(_context13.t1, _context13.t2, _context13.t3);

            case 13:
              return _context13.abrupt("return", _context13.sent);

            case 14:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function getLinkBalance() {
      return _getLinkBalance.apply(this, arguments);
    }

    return getLinkBalance;
  }();

  _proto.depositLink = /*#__PURE__*/function () {
    var _depositLink = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(amount) {
      var chainId, chainlink, erc20, tx;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.getChainID();

            case 2:
              chainId = _context14.sent;
              chainlink = ChainlinkVrf[chainId];
              erc20 = ERC20__factory.connect(chainlink.linkTokenAddress, this.providerOrSigner); // TODO: make it gasless

              _context14.t0 = erc20;
              _context14.t1 = this.address;
              _context14.t2 = amount;
              _context14.next = 10;
              return this.getCallOverrides();

            case 10:
              _context14.t3 = _context14.sent;
              _context14.next = 13;
              return _context14.t0.transfer.call(_context14.t0, _context14.t1, _context14.t2, _context14.t3);

            case 13:
              tx = _context14.sent;
              _context14.next = 16;
              return tx.wait();

            case 16:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function depositLink(_x23) {
      return _depositLink.apply(this, arguments);
    }

    return depositLink;
  }();

  _proto.withdrawLink = /*#__PURE__*/function () {
    var _withdrawLink = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(to, amount) {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.sendTransaction("transferLink", [to, amount]);

            case 2:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function withdrawLink(_x24, _x25) {
      return _withdrawLink.apply(this, arguments);
    }

    return withdrawLink;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(amount) {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.sendTransaction("setRoyaltyBps", [amount]);

            case 2:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function setRoyaltyBps(_x26) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(metadata) {
      var uri;
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return uploadMetadata(metadata);

            case 2:
              uri = _context17.sent;
              _context17.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function setModuleMetadata(_x27) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(restricted) {
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              if (restricted === void 0) {
                restricted = false;
              }

              _context18.next = 3;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function setRestrictedTransfer(_x28) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }();

  return PackModule;
}(ModuleWithRoles);
PackModule.moduleType = ModuleType.PACK;
PackModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];

/**
 *
 * Access this module by calling {@link ThirdwebSDK.getSplitsModule}
 * @alpha
 */

var SplitsModule = /*#__PURE__*/function (_Module) {
  _inheritsLoose(SplitsModule, _Module);

  function SplitsModule() {
    return _Module.apply(this, arguments) || this;
  }

  var _proto = SplitsModule.prototype;

  /**
   * @internal
   */
  _proto.connectContract = function connectContract() {
    return Royalty__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return SplitsModule.moduleType;
  };

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getCurrencyMetadata(this.providerOrSigner, this.address);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get() {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAllRecipients = /*#__PURE__*/function () {
    var _getAllRecipients = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var recipients, index, recipientAddress;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              recipients = [];
              index = BigNumber.from(0); // eslint-disable-next-line no-constant-condition

            case 2:

              _context2.prev = 3;
              _context2.next = 6;
              return this.readOnlyContract.payee(index);

            case 6:
              recipientAddress = _context2.sent;
              _context2.t0 = recipients;
              _context2.next = 10;
              return this.getRecipientSplitPercentage(recipientAddress);

            case 10:
              _context2.t1 = _context2.sent;

              _context2.t0.push.call(_context2.t0, _context2.t1);

              index = index.add(1);
              _context2.next = 22;
              break;

            case 15:
              _context2.prev = 15;
              _context2.t2 = _context2["catch"](3);

              if (!("method" in _context2.t2 && _context2.t2["method"].toLowerCase().includes("payee(uint256)"))) {
                _context2.next = 21;
                break;
              }

              return _context2.abrupt("break", 24);

            case 21:
              throw _context2.t2;

            case 22:
              _context2.next = 2;
              break;

            case 24:
              return _context2.abrupt("return", recipients);

            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[3, 15]]);
    }));

    function getAllRecipients() {
      return _getAllRecipients.apply(this, arguments);
    }

    return getAllRecipients;
  }();

  _proto.getRecipientSplitPercentage = /*#__PURE__*/function () {
    var _getRecipientSplitPercentage = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(address) {
      var _yield$Promise$all, totalShares, walletsShares;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return Promise.all([this.readOnlyContract.totalShares(), this.readOnlyContract.shares(address)]);

            case 2:
              _yield$Promise$all = _context3.sent;
              totalShares = _yield$Promise$all[0];
              walletsShares = _yield$Promise$all[1];
              return _context3.abrupt("return", {
                address: address,
                splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getRecipientSplitPercentage(_x) {
      return _getRecipientSplitPercentage.apply(this, arguments);
    }

    return getRecipientSplitPercentage;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(address) {
      var walletBalance, totalReleased, totalReceived;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.provider.getBalance(this.address);

            case 2:
              walletBalance = _context4.sent;
              _context4.next = 5;
              return this.readOnlyContract["totalReleased()"]();

            case 5:
              totalReleased = _context4.sent;
              totalReceived = walletBalance.add(totalReleased);
              _context4.t0 = this;
              _context4.t1 = address;
              _context4.t2 = totalReceived;
              _context4.next = 12;
              return this.readOnlyContract["released(address)"](address);

            case 12:
              _context4.t3 = _context4.sent;
              return _context4.abrupt("return", _context4.t0._pendingPayment.call(_context4.t0, _context4.t1, _context4.t2, _context4.t3));

            case 14:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function balanceOf(_x2) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balanceOfToken = /*#__PURE__*/function () {
    var _balanceOfToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(walletAddress, tokenAddress) {
      var erc20, walletBalance, totalReleased, totalReceived, value;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);
              _context5.next = 3;
              return erc20.balanceOf(this.address);

            case 3:
              walletBalance = _context5.sent;
              _context5.next = 6;
              return this.readOnlyContract["totalReleased(address)"](tokenAddress);

            case 6:
              totalReleased = _context5.sent;
              totalReceived = walletBalance.add(totalReleased);
              _context5.t0 = this;
              _context5.t1 = walletAddress;
              _context5.t2 = totalReceived;
              _context5.next = 13;
              return this.readOnlyContract["released(address,address)"](tokenAddress, walletAddress);

            case 13:
              _context5.t3 = _context5.sent;
              _context5.next = 16;
              return _context5.t0._pendingPayment.call(_context5.t0, _context5.t1, _context5.t2, _context5.t3);

            case 16:
              value = _context5.sent;
              _context5.next = 19;
              return getCurrencyValue(this.providerOrSigner, tokenAddress, value);

            case 19:
              return _context5.abrupt("return", _context5.sent);

            case 20:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function balanceOfToken(_x3, _x4) {
      return _balanceOfToken.apply(this, arguments);
    }

    return balanceOfToken;
  }();

  _proto.withdraw = /*#__PURE__*/function () {
    var _withdraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(address) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.sendTransaction("release(address)", [address]);

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function withdraw(_x5) {
      return _withdraw.apply(this, arguments);
    }

    return withdraw;
  }();

  _proto._pendingPayment = /*#__PURE__*/function () {
    var _pendingPayment2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(address, totalReceived, alreadyReleased) {
      var addressReceived, totalRoyaltyAvailable;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.t0 = totalReceived;
              _context7.next = 3;
              return this.readOnlyContract.shares(address);

            case 3:
              _context7.t1 = _context7.sent;
              addressReceived = _context7.t0.mul.call(_context7.t0, _context7.t1);
              _context7.t2 = addressReceived;
              _context7.next = 8;
              return this.readOnlyContract.totalShares();

            case 8:
              _context7.t3 = _context7.sent;
              totalRoyaltyAvailable = _context7.t2.div.call(_context7.t2, _context7.t3);
              return _context7.abrupt("return", totalRoyaltyAvailable.sub(alreadyReleased));

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function _pendingPayment(_x6, _x7, _x8) {
      return _pendingPayment2.apply(this, arguments);
    }

    return _pendingPayment;
  }();

  _proto.withdrawToken = /*#__PURE__*/function () {
    var _withdrawToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(walletAddress, tokenAddress) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.sendTransaction("release(address,address)", [tokenAddress, walletAddress]);

            case 2:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function withdrawToken(_x9, _x10) {
      return _withdrawToken.apply(this, arguments);
    }

    return withdrawToken;
  }();

  _proto.distribute = /*#__PURE__*/function () {
    var _distribute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.sendTransaction("distribute()", []);

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function distribute() {
      return _distribute.apply(this, arguments);
    }

    return distribute;
  }();

  _proto.distributeToken = /*#__PURE__*/function () {
    var _distributeToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(tokenAddress) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.sendTransaction("distribute(address)", [tokenAddress]);

            case 2:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function distributeToken(_x11) {
      return _distributeToken.apply(this, arguments);
    }

    return distributeToken;
  }();

  return SplitsModule;
}(Module);
SplitsModule.moduleType = ModuleType.SPLITS;

/**
 * The RegistryModule. This should always be created via `getRegistryModule()` on the main SDK.
 * @internal
 */

var RegistryModule = /*#__PURE__*/function (_Module) {
  _inheritsLoose(RegistryModule, _Module);

  function RegistryModule() {
    return _Module.apply(this, arguments) || this;
  }

  var _proto = RegistryModule.prototype;

  /**
   * @internal
   */
  _proto.connectContract = function connectContract() {
    return Registry__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getProtocolContracts =
  /*#__PURE__*/
  function () {
    var _getProtocolContracts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var _this = this;

      var deployer, maxVersion, versions, addresses, metadatas;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getSignerAddress();

            case 2:
              deployer = _context.sent;
              _context.next = 5;
              return this.readOnlyContract.getProtocolControlCount(deployer);

            case 5:
              maxVersion = _context.sent;
              versions = Array.from(Array(maxVersion.toNumber()).keys()).reverse();
              _context.next = 9;
              return Promise.all(versions.map(function (v) {
                return _this.readOnlyContract.getProtocolControl(deployer, (v + 1).toString());
              }));

            case 9:
              addresses = _context.sent;
              _context.next = 12;
              return Promise.all(addresses.map(function (address) {
                return getContractMetadata(_this.providerOrSigner, address, _this.ipfsGatewayUrl)["catch"](function () {
                  return undefined;
                });
              }));

            case 12:
              metadatas = _context.sent;
              return _context.abrupt("return", versions.map(function (v, i) {
                return {
                  address: addresses[i],
                  version: v,
                  metadata: metadatas[i]
                };
              }));

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getProtocolContracts() {
      return _getProtocolContracts.apply(this, arguments);
    }

    return getProtocolContracts;
  }();

  return RegistryModule;
}(Module);

/**
 * The entrypoint to the SDK.
 * @public
 */

var ThirdwebSDK = /*#__PURE__*/function () {
  function ThirdwebSDK(providerOrNetwork, opts) {
    this.options = void 0;
    this.defaultOptions = {
      ipfsGatewayUrl: "https://cloudflare-ipfs.com/ipfs/",
      registryContractAddress: "",
      maxGasPriceInGwei: 100,
      gasSpeed: "fastest",
      transactionRelayerUrl: "",
      transactionRelayerSendFunction: this.defaultRelayerSendFunction.bind(this),
      transactionRelayerForwarderAddress: FORWARDER_ADDRESS,
      readOnlyRpcUrl: ""
    };
    this.modules = new Map();
    this.providerOrSigner = void 0;
    this._signer = null;
    this._registry = null;
    this.providerOrSigner = this.setProviderOrSigner(providerOrNetwork);
    this.options = _extends({}, this.defaultOptions, opts);
  }

  var _proto = ThirdwebSDK.prototype;

  _proto.updateModuleSigners = function updateModuleSigners() {
    for (var _iterator = _createForOfIteratorHelperLoose(this.modules), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          _module = _step$value[1];

      if (this.isReadOnly()) {
        _module.clearSigner();
      }

      _module.setProviderOrSigner(this.providerOrSigner);
    }
  };

  _proto.getChainID = /*#__PURE__*/function () {
    var _getChainID = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var provider, _yield$provider$getNe, chainId;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              provider = Provider.isProvider(this.providerOrSigner) ? this.providerOrSigner : this.providerOrSigner.provider;
              !provider ? process.env.NODE_ENV !== "production" ? invariant(false, "getRegistryAddress() -- No Provider") : invariant(false) : void 0;
              _context.next = 4;
              return provider.getNetwork();

            case 4:
              _yield$provider$getNe = _context.sent;
              chainId = _yield$provider$getNe.chainId;
              return _context.abrupt("return", chainId);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getChainID() {
      return _getChainID.apply(this, arguments);
    }

    return getChainID;
  }();

  _proto.getRegistryAddress = /*#__PURE__*/function () {
    var _getRegistryAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.options.registryContractAddress) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", this.options.registryContractAddress);

            case 2:
              _context2.t0 = getContractAddressByChainId;
              _context2.next = 5;
              return this.getChainID();

            case 5:
              _context2.t1 = _context2.sent;
              return _context2.abrupt("return", (0, _context2.t0)(_context2.t1));

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getRegistryAddress() {
      return _getRegistryAddress.apply(this, arguments);
    }

    return getRegistryAddress;
  }()
  /**
   *
   * @param address - The contract address of the given Registry module.
   * @returns The Registry Module.
   * @internal
   */
  ;

  _proto.getRegistryModule =
  /*#__PURE__*/
  function () {
    var _getRegistryModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var address;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getRegistryAddress();

            case 2:
              address = _context3.sent;
              !address ? process.env.NODE_ENV !== "production" ? invariant(false, "getRegistryModule() -- No Address") : invariant(false) : void 0;
              return _context3.abrupt("return", this.registry = this.getOrCreateModule(address, RegistryModule));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getRegistryModule() {
      return _getRegistryModule.apply(this, arguments);
    }

    return getRegistryModule;
  }();

  _proto.getOrCreateModule = function getOrCreateModule(address, _Module) {
    if (this.modules.has(address)) {
      return this.modules.get(address);
    }

    var _newModule = new _Module(this.providerOrSigner, address, this.options, this);

    this.modules.set(address, _newModule);
    return _newModule;
  }
  /**
   * you should not need this unless you are creating new modules
   * @returns the active registry module forwarder address
   * @internal
   */
  ;

  _proto.getForwarderAddress =
  /*#__PURE__*/
  function () {
    var _getForwarderAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.t0 = this.registry;

              if (_context4.t0) {
                _context4.next = 5;
                break;
              }

              _context4.next = 4;
              return this.getRegistryModule();

            case 4:
              _context4.t0 = _context4.sent;

            case 5:
              _context4.next = 7;
              return _context4.t0.readOnlyContract.forwarder();

            case 7:
              return _context4.abrupt("return", _context4.sent);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getForwarderAddress() {
      return _getForwarderAddress.apply(this, arguments);
    }

    return getForwarderAddress;
  }()
  /**
   * Call this to get the current apps.
   * @returns All currently registered apps for the connected wallet
   */
  ;

  _proto.getApps =
  /*#__PURE__*/
  function () {
    var _getApps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.t0 = this.registry;

              if (_context5.t0) {
                _context5.next = 5;
                break;
              }

              _context5.next = 4;
              return this.getRegistryModule();

            case 4:
              _context5.t0 = _context5.sent;

            case 5:
              return _context5.abrupt("return", _context5.t0.getProtocolContracts());

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getApps() {
      return _getApps.apply(this, arguments);
    }

    return getApps;
  }()
  /**
   * Call this to create a new app
   * @param metadata - metadata URI or a JSON object
   * @returns The transaction receipt
   */
  ;

  _proto.createApp =
  /*#__PURE__*/
  function () {
    var _createApp = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(metadata) {
      var _this$signer;

      var registryContract, gasPrice, txOpts, uri, txn;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.t0 = this.registry;

              if (_context6.t0) {
                _context6.next = 5;
                break;
              }

              _context6.next = 4;
              return this.getRegistryModule();

            case 4:
              _context6.t0 = _context6.sent;

            case 5:
              registryContract = _context6.t0.contract;
              _context6.next = 8;
              return this.getGasPrice();

            case 8:
              gasPrice = _context6.sent;
              txOpts = {}; // could technically be `0` so simple falsy check does not suffice

              if (typeof gasPrice === "number") {
                txOpts.gasPrice = parseUnits(gasPrice.toString(), "gwei");
              }

              _context6.t1 = uploadMetadata;
              _context6.t2 = metadata;
              _context6.t3 = registryContract.address;
              _context6.next = 16;
              return (_this$signer = this.signer) == null ? void 0 : _this$signer.getAddress();

            case 16:
              _context6.t4 = _context6.sent;

              if (_context6.t4) {
                _context6.next = 19;
                break;
              }

              _context6.t4 = undefined;

            case 19:
              _context6.t5 = _context6.t4;
              _context6.next = 22;
              return (0, _context6.t1)(_context6.t2, _context6.t3, _context6.t5);

            case 22:
              uri = _context6.sent;
              _context6.next = 25;
              return registryContract.deployProtocol(uri, txOpts);

            case 25:
              txn = _context6.sent;
              _context6.next = 28;
              return txn.wait();

            case 28:
              return _context6.abrupt("return", _context6.sent);

            case 29:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function createApp(_x) {
      return _createApp.apply(this, arguments);
    }

    return createApp;
  }()
  /**
   *
   * @param speed - what speed to prefer, default: "fastest"
   * @param maxGas - how much gas to use at most, default: 100
   * @returns the optiomal gas price
   */
  ;

  _proto.getGasPrice =
  /*#__PURE__*/
  function () {
    var _getGasPrice = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(speed, maxGasGwei) {
      var _speed, _maxGas;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _speed = speed ? speed : this.options.gasSpeed;
              _maxGas = maxGasGwei ? maxGasGwei : this.options.maxGasPriceInGwei;
              _context7.t0 = getGasPriceForChain;
              _context7.next = 5;
              return this.getChainID();

            case 5:
              _context7.t1 = _context7.sent;
              _context7.t2 = _speed;
              _context7.t3 = _maxGas;
              _context7.next = 10;
              return (0, _context7.t0)(_context7.t1, _context7.t2, _context7.t3);

            case 10:
              return _context7.abrupt("return", _context7.sent);

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getGasPrice(_x2, _x3) {
      return _getGasPrice.apply(this, arguments);
    }

    return getGasPrice;
  }()
  /**
   *
   * @param providerOrSignerOrNetwork - A valid "ethers" Provider, Signer or a Network address to create a Provider with.
   * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.
   */
  ;

  _proto.setProviderOrSigner = function setProviderOrSigner(providerOrSignerOrNetwork) {
    if (Provider.isProvider(providerOrSignerOrNetwork) || Signer.isSigner(providerOrSignerOrNetwork)) {
      // sdk instantiated with a provider / signer
      this.providerOrSigner = providerOrSignerOrNetwork;
    } else {
      // sdk instantiated with a network name / network url
      this.providerOrSigner = ethers.getDefaultProvider(providerOrSignerOrNetwork);
    } // if we're setting a signer then also update that


    if (Signer.isSigner(providerOrSignerOrNetwork)) {
      this.signer = providerOrSignerOrNetwork;
    } else {
      this.signer = null;
    }

    this.updateModuleSigners();
    return this.providerOrSigner;
  }
  /**
   *
   * @public
   * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid "Signer.")
   */
  ;

  _proto.isReadOnly = function isReadOnly() {
    return !Signer.isSigner(this.signer);
  }
  /**
   * @public
   * @returns The contract metadata for the given contract address.
   */
  ;

  _proto.getContractMetadata =
  /*#__PURE__*/
  function () {
    var _getContractMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(address) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.t0 = _extends;
              _context8.t1 = {};
              _context8.next = 4;
              return getContractMetadata(this.providerOrSigner, address, this.options.ipfsGatewayUrl);

            case 4:
              _context8.t2 = _context8.sent;
              _context8.t3 = {
                address: address
              };
              return _context8.abrupt("return", (0, _context8.t0)(_context8.t1, _context8.t2, _context8.t3));

            case 7:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function getContractMetadata$1(_x4) {
      return _getContractMetadata2.apply(this, arguments);
    }

    return getContractMetadata$1;
  }()
  /**
   *
   * @param address - The contract address of the given App module.
   * @returns The App Module.
   */
  ;

  _proto.getAppModule = function getAppModule(address) {
    return this.getOrCreateModule(address, AppModule);
  }
  /**
   *
   * @param address - The contract address of the given NFT module.
   * @returns The NFT Module.
   */
  ;

  _proto.getNFTModule = function getNFTModule(address) {
    return this.getOrCreateModule(address, NFTModule);
  }
  /**
   *
   * @param address - The contract address of the given Collection module.
   * @returns The Collection Module.
   */
  ;

  _proto.getCollectionModule = function getCollectionModule(address) {
    return this.getOrCreateModule(address, CollectionModule);
  }
  /**
   *
   * @param address - The contract address of the given Pack module.
   * @returns The Pack Module.
   */
  ;

  _proto.getPackModule = function getPackModule(address) {
    return this.getOrCreateModule(address, PackModule);
  }
  /**
   *
   * @param address - The contract address of the given Currency module.
   * @returns The Currency Module.
   */
  ;

  _proto.getCurrencyModule = function getCurrencyModule(address) {
    return this.getOrCreateModule(address, CurrencyModule);
  }
  /**
   * @alpha
   * @param address - The contract address of the given Datastore module.
   * @returns The Datastore Module.
   */
  ;

  _proto.getDatastoreModule = function getDatastoreModule(address) {
    return this.getOrCreateModule(address, DatastoreModule);
  }
  /**
   *
   * @param address - The contract address of the given Market module.
   * @returns The Market Module.
   */
  ;

  _proto.getMarketModule = function getMarketModule(address) {
    return this.getOrCreateModule(address, MarketModule);
  }
  /**
   *
   * @param address - The contract address of the given Drop module.
   * @returns The Drop Module.
   */
  ;

  _proto.getDropModule = function getDropModule(address) {
    return this.getOrCreateModule(address, DropModule);
  }
  /**
   * @alpha
   *
   * @param address - The contract address of the given Royalty module.
   * @returns The Splits Module.
   */
  ;

  _proto.getSplitsModule = function getSplitsModule(address) {
    return this.getOrCreateModule(address, SplitsModule);
  }
  /**
   * Used for SDK that requires js bridging like Unity SDK.
   * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.
   *
   * @internal
   * @param route - sdk execution route
   * @param payload - request arguments for the function
   * @returns
   */
  ;

  _proto.invokeRoute = function invokeRoute(route, payload) {
    var parts = route.split(".");

    if (parts.length > 0 && parts[0] === "thirdweb") {
      if (parts.length === 4) {
        var _this$getModuleByName;

        // thirdweb.module_name.address.function_name
        var moduleName = parts[1];
        var moduleAddress = parts[2];
        var funcName = parts[3];
        return (_this$getModuleByName = this.getModuleByName(moduleName, moduleAddress))[funcName].apply(_this$getModuleByName, payload.arguments || []);
      } else if (parts.length === 3) {
        // reserved for: thirdweb.bridge.function_name
        throw new Error("reserved for thirdweb.bridge.function_name");
      } else if (parts.length === 2) {
        // main sdk functions: thirdweb.function_name
        var _funcName = parts[1];
        return this[_funcName].apply(this, payload.arguments || []);
      }
    }

    throw new Error("uknown route");
  } // used for invoke route for unity sdk.
  ;

  _proto.getModuleByName = function getModuleByName(name, address) {
    if (name === "currency") {
      return this.getCurrencyModule(address);
    } else if (name === "nft") {
      return this.getNFTModule(address);
    } else if (name === "market") {
      return this.getMarketModule(address);
    } else if (name === "bundle" || name === "collection") {
      return this.getCollectionModule(address);
    } else if (name === "drop") {
      return this.getDropModule(address);
    } else if (name === "splits") {
      return this.getSplitsModule(address);
    } else if (name === "pack") {
      return this.getPackModule(address);
    } else if (name === "datastore") {
      return this.getDatastoreModule(address);
    } else if (name === "app" || name === "project") {
      return this.getAppModule(address);
    }

    throw new Error("unsupported module");
  };

  _proto.defaultRelayerSendFunction = /*#__PURE__*/function () {
    var _defaultRelayerSendFunction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(message, signature) {
      var body, response, resp, result;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              body = JSON.stringify({
                request: message,
                signature: signature,
                type: "forward"
              }); // console.log("POST", this.options.transactionRelayerUrl, body);

              _context9.next = 3;
              return fetch(this.options.transactionRelayerUrl, {
                method: "POST",
                body: body
              });

            case 3:
              response = _context9.sent;

              if (!response.ok) {
                _context9.next = 10;
                break;
              }

              _context9.next = 7;
              return response.json();

            case 7:
              resp = _context9.sent;
              result = JSON.parse(resp.result);
              return _context9.abrupt("return", result.txHash);

            case 10:
              throw new Error("relay transaction failed");

            case 11:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function defaultRelayerSendFunction(_x5, _x6) {
      return _defaultRelayerSendFunction.apply(this, arguments);
    }

    return defaultRelayerSendFunction;
  }();

  _createClass(ThirdwebSDK, [{
    key: "signer",
    get: // default options

    /**
     * The active Signer, you should not need to access this unless you are deploying new modules.
     * @internal
     */
    function get() {
      return this._signer;
    },
    set: function set(value) {
      this._signer = value;
    }
  }, {
    key: "registry",
    get: function get() {
      return this._registry;
    },
    set: function set(value) {
      this._registry = value;
    }
  }]);

  return ThirdwebSDK;
}();
/**
 * Deprecated, please use ThirdwebSDK instead.
 * @public
 * @deprecated use ThirdwebSDK instead
 */

var NFTLabsSDK = ThirdwebSDK;

/**
 * The {@link https://thirdweb.com | thirdweb} typescript sdk.
 *
 * @remarks
 * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.
 *
 * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )
 *
 *
 * @example
 * To get you started here's how you would instantiate the SDK and fetch some NFTs
 *
 * 1. Install the sdk
 * ```shell
 * npm install @3rdweb/sdk
 * ```
 *
 * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.
 *
 * 3. Write the tiniest amount of code!
 * ```typescript
 *  1 | import { ThirdwebSDK } from "@3rdweb/sdk";
 *  2 | import type { NFTModule, NFTMetadataOwner } from "@3rdweb/sdk";
 *  3 |
 *  5 | const contractAddress = "0x..."; // your contract address from step 2
 *  6 |
 *  7 | const sdk = new ThirdwebSDK();
 *  8 |
 *  9 | const nftModule: NFTModule = sdk.getNftModule(contractAddress);
 * 10 |
 * 11 | const nftListWithOwnerAddress: NFTMetadataOwner[] = await nftModule.getAllWithOwner();
 * 12 |
 * 13 | console.log(nftListWithOwnerAddress);
 * ```
 * ```
 * Output
 * => [
 *       {
 *          owner: "0x...",
 *          metadata: {
 *            name: "...",
 *            description: "...",
 *            image: "..."
 *          },
 *       },
 *       {
 *          owner: "0x...",
 *          metadata: {
 *            name: "...",
 *            description: "...",
 *            image: "..."
 *          },
 *       },
 *       ...
 *    ]
 * ```
 *
 * @packageDocumentation
 */

if (!globalThis.fetch) {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  globalThis.fetch = fetch$1;
}

export { AppModule, BundleModuleMetadata$1 as BundleModuleMetadata, ChainlinkVrf, CollectionModule, CurrencyModule, CurrencyModuleMetadata$1 as CurrencyModuleMetadata, DatastoreModule, DatastoreModuleMetadata$1 as DatastoreModuleMetadata, DropModule, DropModuleMetadata$1 as DropModuleMetadata, InterfaceId_IERC1155, InterfaceId_IERC721, MarketModule, MarketModuleMetadata$1 as MarketModuleMetadata, ModuleType, NFTLabsSDK, NFTModule, NftModuleMetadata$1 as NftModuleMetadata, NotFoundError, PackModule, PackModuleMetadata$1 as PackModuleMetadata, RolesMap, SplitsModuleMetadata$1 as SplitsModuleMetadata, ThirdwebSDK, convertModuleTypeToName, convertNameToModuleType, getContractMetadata, getCurrencyMetadata, getCurrencyValue, getGasPriceForChain, getMetadataWithoutContract, getRoleHash, getTokenMetadata, getTokenUri, isContract, replaceIpfsWithGateway, uploadMetadata, uploadToIPFS };
//# sourceMappingURL=sdk.esm.js.map
