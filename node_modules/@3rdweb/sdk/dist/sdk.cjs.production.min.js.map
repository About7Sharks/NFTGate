{"version":3,"file":"sdk.cjs.production.min.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/common/ipfs.ts","../src/common/contract.ts","../src/common/currency.ts","../src/common/chain.ts","../src/common/error.ts","../src/common/module-type.ts","../src/common/chainlink.ts","../src/common/nft.ts","../src/common/role.ts","../src/common/gas-price.ts","../src/common/address.ts","../src/common/invariant.ts","../src/common/forwarder.ts","../src/core/module.ts","../src/types/module-deployments/CommonModuleMetadata.ts","../src/types/module-deployments/BundleModuleMetadata.ts","../src/types/module-deployments/CurrencyModuleMetadata.ts","../src/types/module-deployments/DatastoreModuleMetadata.ts","../src/types/module-deployments/DropModuleMetadata.ts","../src/types/module-deployments/MarketModuleMetadata.ts","../src/types/module-deployments/NftModuleMetadata.ts","../src/types/module-deployments/PackModuleMetadata.ts","../src/types/module-deployments/SplitsModuleMetadata.ts","../src/modules/token.ts","../src/modules/app.ts","../src/modules/collection.ts","../src/modules/datastore.ts","../src/modules/drop.ts","../src/modules/market.ts","../src/modules/nft.ts","../src/modules/pack.ts","../src/modules/royalty.ts","../src/core/registry.ts","../src/core/index.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { MetadataURIOrObject } from \"../core/types\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\n/**\n *\n * @param ipfsUrl - the ipfs:// uri\n * @param gatewayUrl - the gateway url\n * @returns the fully formed IPFS url\n * @internal\n */\nexport function replaceIpfsWithGateway(ipfsUrl: string, gatewayUrl: string) {\n  if (!ipfsUrl || typeof ipfsUrl !== \"string\") {\n    return \"\";\n  }\n  if (!gatewayUrl.endsWith(\"/\")) {\n    gatewayUrl = `${gatewayUrl}/`;\n  }\n  return ipfsUrl.replace(\"ipfs://\", gatewayUrl);\n}\n\n/**\n * A helper function to upload arbitrary data to IPFS and return the resulting IPFS uri.\n * @param data - stringified JSON || File\n * @param contractAddress - (Optional) the contract address to associate the data with\n * @param signerAddress - (Optional) the wallet address of the actor that is uploading the file\n * @returns The `ipfs://<hash>` uri of the uploaded file\n * @public\n */\nexport async function uploadToIPFS(\n  data: string | File | FileOrBuffer,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  const headers = {\n    \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    \"X-Public-Address\": signerAddress || \"\",\n  };\n\n  const formData = new FormData();\n  formData.append(\"file\", data as any);\n  const res = await fetch(\"https://upload.nftlabs.co/upload\", {\n    method: \"POST\",\n    body: formData as any,\n    headers,\n  });\n\n  const body = await res.json();\n  return body.IpfsUri;\n}\n\n/**\n * @internal\n */\nexport async function uploadMetadata(\n  metadata: MetadataURIOrObject,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  }\n\n  return await uploadToIPFS(\n    JSON.stringify(metadata),\n    contractAddress,\n    signerAddress,\n  );\n}\n","import { arrayify } from \"@ethersproject/bytes\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { ProviderOrSigner } from \"../core/types\";\nimport { replaceIpfsWithGateway } from \"./ipfs\";\n\n/**\n * The typical contract metadata found on the modules.\n * @public\n */\nexport interface ContractMetadata {\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  external_link?: string;\n  seller_fee_basis_points?: number;\n  fee_recipient?: string;\n}\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC721 = arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC1155 = arrayify(\"0xd9b67a26\");\n\nconst contractUriABI = [\n  {\n    inputs: [] as [],\n    name: \"contractURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * @internal\n */\nexport async function getContractMetadata(\n  provider: ProviderOrSigner,\n  address: string,\n  ipfsGatewayUrl: string,\n): Promise<ContractMetadata> {\n  const contract = new Contract(address, contractUriABI, provider);\n  const uri = await contract.contractURI();\n  const gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);\n  const meta = await fetch(gatewayUrl);\n  const metadata = await meta.json();\n  const entity: ContractMetadata = {\n    ...metadata,\n    uri,\n    image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl),\n  };\n  return entity;\n}\n\n/**\n * @internal\n */\nexport async function isContract(\n  provider: Provider,\n  address: string,\n): Promise<boolean> {\n  return (await provider.getCode(address)) !== \"0x\";\n}\n","import { ERC20__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"ethers\";\nimport { ProviderOrSigner } from \"../core/types\";\n\n/**\n * Currency metadata.\n * @public\n */\nexport interface Currency {\n  name: string;\n  symbol: string;\n  decimals: number;\n}\n\n/**\n * Currency metadata & value.\n * @public\n */\nexport interface CurrencyValue extends Currency {\n  value: string;\n  displayValue: string;\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyMetadata(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n): Promise<Currency> {\n  try {\n    if (asset.toLowerCase() !== AddressZero) {\n      const erc20 = ERC20__factory.connect(asset, providerOrSigner);\n      const [name, symbol, decimals] = await Promise.all([\n        erc20.name(),\n        erc20.symbol(),\n        erc20.decimals(),\n      ]);\n      return {\n        name,\n        symbol,\n        decimals,\n      };\n    }\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n  return {\n    name: \"\",\n    symbol: \"\",\n    decimals: 0,\n  };\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyValue(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n  price: BigNumber,\n): Promise<CurrencyValue> {\n  const metadata = await getCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: price.toString(),\n    displayValue: formatUnits(price, metadata.decimals),\n  };\n}\n","export enum ChainId {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Kovan = 42,\n  BSC = 56,\n  xDai = 100,\n  Polygon = 137,\n  Moonriver = 1285,\n  Mumbai = 80001,\n  Harmony = 1666600000,\n  Localhost = 1337,\n  Hardhat = 31337,\n  Fantom = 250,\n  FantomTestnet = 4002,\n  Avalanche = 43114,\n  AvalancheFujiTestnet = 43113,\n}\n\nexport type SUPPORTED_CHAIN_ID =\n  | ChainId.Mainnet\n  | ChainId.Rinkeby\n  | ChainId.Mumbai\n  | ChainId.Polygon\n  | ChainId.Fantom\n  | ChainId.FantomTestnet\n  | ChainId.Avalanche\n  | ChainId.AvalancheFujiTestnet;\n\nexport const SUPPORTED_CHAIN_IDS: SUPPORTED_CHAIN_ID[] = [\n  ChainId.Mainnet,\n  ChainId.Rinkeby,\n  ChainId.Polygon,\n  ChainId.Mumbai,\n  ChainId.Fantom,\n  ChainId.FantomTestnet,\n  ChainId.Avalanche,\n  ChainId.AvalancheFujiTestnet,\n];\n","/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @public\n */\nexport class NotFoundError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"NOT_FOUND\");\n  }\n}\n","import { $enum } from \"ts-enum-util\";\n\n/**\n * The type of Modules that are available.\n * @public\n */\nexport enum ModuleType {\n  CURRENCY = 0,\n  COLLECTION = 1,\n  NFT = 2,\n  DYNAMIC_NFT = 3,\n  ACCESS_NFT = 4,\n  PACK = 5,\n  MARKET = 6,\n  DROP = 7,\n  DATASTORE = 8,\n  SPLITS = 9,\n}\n/**\n *\n * @param moduleName - a supported module name\n * @returns The {@link ModuleType} or undefined\n * @public\n */\n\nexport function convertNameToModuleType(\n  moduleName?: string,\n): ModuleType | undefined {\n  return $enum(ModuleType).getValueOrDefault(\n    moduleName?.toUpperCase(),\n    undefined,\n  );\n}\n\n/**\n *\n * @param moduleType - A {@link ModuleType}\n * @returns The name of the given {@link ModuleType} or undefined\n * @public\n */\nexport function convertModuleTypeToName(\n  moduleType: ModuleType,\n): keyof typeof ModuleType | undefined {\n  return $enum(ModuleType).getKeyOrDefault(moduleType, undefined);\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { ChainId } from \"./chain\";\n\n/**\n *\n * @internal\n */\nexport type ChainlinkInfo = {\n  vrfCoordinator: string;\n  linkTokenAddress: string;\n  keyHash: string;\n  fees: BigNumber;\n};\n\n/**\n *\n * @internal\n */\nexport const ChainlinkVrf: Record<number, ChainlinkInfo> = {\n  [ChainId.Polygon]: {\n    vrfCoordinator: \"0x3d2341ADb2D31f1c5530cDC622016af293177AE0\",\n    linkTokenAddress: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n    keyHash:\n      \"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Mumbai]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Rinkeby]: {\n    vrfCoordinator: \"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\",\n    linkTokenAddress: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n    keyHash:\n      \"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\",\n    fees: ethers.utils.parseEther(\"0.1\"),\n  },\n  [ChainId.Mainnet]: {\n    vrfCoordinator: \"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\",\n    linkTokenAddress: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    keyHash:\n      \"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\",\n    fees: ethers.utils.parseEther(\"2\"),\n  },\n};\n","import { LazyNFT, NFT, NFTCollection } from \"@3rdweb/contracts\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { JSONValue, ProviderOrSigner } from \"../core/types\";\nimport { NotFoundError } from \"./error\";\nimport { replaceIpfsWithGateway } from \"./ipfs\";\n\n// support erc721 and erc1155\nconst tokenUriABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"uri\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * The shared NFT metadata.\n * @public\n */\nexport interface NFTMetadata {\n  id: string;\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  properties?: Record<string, JSONValue>;\n}\n\n/**\n * The shared NFT metadata, including the current owner address.\n * @public\n */\nexport interface NFTMetadataOwner {\n  owner: string;\n  metadata: NFTMetadata;\n}\n\n/**\n * @internal\n */\nexport type NFTContractTypes = NFT | NFTCollection | LazyNFT;\n\n/**\n/* @internal\n */\nexport async function getMetadataWithoutContract(\n  provider: ProviderOrSigner,\n  contractAddress: string,\n  tokenId: string,\n  ipfsGatewayUrl: string,\n): Promise<NFTMetadata> {\n  const contract = new Contract(contractAddress, tokenUriABI, provider) as NFT;\n  return getTokenMetadata(contract, tokenId, ipfsGatewayUrl);\n}\n\n/**\n/* @internal\n */\nexport async function getTokenMetadata(\n  contract: NFTContractTypes,\n  tokenId: string,\n  ipfsGatewayUrl: string,\n): Promise<NFTMetadata> {\n  const uri = await getTokenUri(contract, tokenId);\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  const gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);\n  const meta = await fetch(gatewayUrl);\n  const metadata = await meta.json();\n  const entity: NFTMetadata = {\n    ...metadata,\n    id: tokenId,\n    uri,\n    image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl),\n  };\n  return entity;\n}\n\n/**\n/* @internal\n */\nexport async function getTokenUri(\n  contract: NFTContractTypes,\n  tokenId: string,\n): Promise<string> {\n  let uri = \"\";\n  try {\n    uri = await contract.tokenURI(tokenId);\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  if (!uri) {\n    try {\n      uri = await (contract as NFTCollection).uri(tokenId);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n  return uri;\n}\n","import { BytesLike, ethers } from \"ethers\";\n\n/**\n * Roles are used to handle permissions on modules that extend {@link ModuleWithRoles}.\n * @public\n */\nexport interface IRoles {\n  /**\n   * This admin role allows the wallet to modify contract metadata and {@link ModuleWithRoles.grantRole | grant} and {@link ModuleWithRoles.revokeRole | revoke} Roles.\n   * @public\n   */\n  admin: \"admin\";\n  /**\n   * The minter role allows the wallet to mint new assets.\n   * ({@link NFTModule.mint | NFTs}, {@link CurrencyModule.mint | Tokens}, {@link PackModule.create | Packs}, etc)\n   * @public\n   */\n  minter: \"minter\";\n  /**\n   * The pauser role allows the wallet to pause all external contract interactions.\n   * @public\n   */\n  pauser: \"pauser\";\n  /**\n   * The transfer role allows the wallet to transfer and receive assets\n   * **even** when the module is set to be non-transferrable.\n   * @public\n   */\n  transfer: \"transfer\";\n  /**\n   * The editor role allows the wallet to edit data in the {@link DatastoreModule}.\n   * @alpha\n   */\n  editor: \"editor\";\n  /**\n   * The lister role allows the wallet to list assets on the {@link MarketModule}.\n   * @public\n   */\n  lister: \"lister\";\n}\n\n/**\n * {@inheritDoc IRoles}\n * @public\n */\nexport type Role = keyof IRoles;\n\n/**\n *\n * @internal\n */\nexport const RolesMap: IRoles = {\n  admin: \"admin\",\n  minter: \"minter\",\n  pauser: \"pauser\",\n  transfer: \"transfer\",\n  editor: \"editor\",\n  lister: \"lister\",\n} as const;\n\n/**\n *\n * @internal\n */\nconst _role: Record<Role, string> = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  editor: \"EDITOR_ROLE\",\n  lister: \"LISTER_ROLE\",\n};\n\n/**\n * @internal\n */\nexport function getRoleHash(role: Role): BytesLike {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers.utils.keccak256(ethers.utils.toUtf8Bytes(_role[role]));\n}\n","import { ChainId } from \"./chain\";\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId?: number): string | null {\n  if (!chainId) {\n    return null;\n  }\n\n  if (chainId === ChainId.Polygon) {\n    return \"https://gasstation-mainnet.matic.network\";\n  }\n\n  return null;\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nexport async function getGasPriceForChain(\n  chainId: number,\n  speed: string,\n  maxGasPrice: number,\n): Promise<number | null> {\n  const gasStationUrl = getGasStationUrl(chainId);\n  if (!gasStationUrl) {\n    return null;\n  }\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    const gas = data[speed];\n    if (gas > 0) {\n      return Math.min(gas, maxGasPrice);\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return null;\n}\n","import { ChainId, SUPPORTED_CHAIN_ID } from \"./chain\";\n\nexport const FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\nexport const CONTRACT_ADDRESSES: Record<\n  SUPPORTED_CHAIN_ID,\n  Record<\"registry\", string>\n> = {\n  [ChainId.Mainnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Rinkeby]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Polygon]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Mumbai]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Avalanche]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Fantom]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.FantomTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n};\n\nexport function getContractAddressByChainId(\n  chainId: ChainId,\n): string | undefined {\n  return CONTRACT_ADDRESSES[chainId as SUPPORTED_CHAIN_ID][\"registry\"];\n}\n","const genericMessage = \"Invariant Violation\";\n\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\n/**\n * Error that may get thrown when an invariant assummption fails.\n * @public\n */\nexport class InvariantError extends Error {\n  /**\n   * @internal\n   */\n  framesToPop = 1;\n  /**\n   * @internal\n   */\n  name = genericMessage;\n  /**\n   * @internal\n   */\n  constructor(message: string = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message,\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n/**\n * @internal\n * @param condition - any truthy condition to assert\n * @param message  - optional message to use if the condition is falsy\n */\nexport function invariant(condition: any, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n","import { Forwarder } from \"@3rdweb/contracts\";\nimport { BigNumber } from \"ethers\";\n\n/**\n * @internal\n */\nexport const ForwardRequest = [\n  { name: \"from\", type: \"address\" },\n  { name: \"to\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"gas\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"data\", type: \"bytes\" },\n];\n\nconst _nonces: Record<string, BigNumber> = {};\n\nexport async function getAndIncrementNonce(\n  forwarder: Forwarder,\n  address: string,\n): Promise<BigNumber> {\n  if (!(address in _nonces)) {\n    _nonces[address] = await forwarder.getNonce(address);\n  }\n\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n","import { AccessControlEnumerable, Forwarder__factory } from \"@3rdweb/contracts\";\nimport {\n  JsonRpcSigner,\n  Log,\n  Provider,\n  TransactionReceipt,\n} from \"@ethersproject/providers\";\nimport { BaseContract, BigNumber, CallOverrides, ethers, Signer } from \"ethers\";\nimport type { ISDKOptions, ThirdwebSDK } from \".\";\nimport { getContractMetadata, isContract } from \"../common/contract\";\nimport { ForwardRequest, getAndIncrementNonce } from \"../common/forwarder\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { ModuleType } from \"../common/module-type\";\nimport { getRoleHash, Role } from \"../common/role\";\nimport { ModuleMetadata } from \"../types/ModuleMetadata\";\nimport type { MetadataURIOrObject, ProviderOrSigner } from \"./types\";\n\n/**\n * The root Module class. All other Modules extend this.\n * @remarks This should never be instantiated directly.\n * @public\n */\nexport class Module<TContract extends BaseContract = BaseContract> {\n  /**\n   * @readonly\n   */\n  public readonly address: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly ipfsGatewayUrl: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly options: ISDKOptions;\n\n  protected readonly sdk: ThirdwebSDK;\n\n  /**\n   * @internal\n   */\n  private _providerOrSigner: ProviderOrSigner | null = null;\n  /**\n   * @internal\n   */\n  protected get providerOrSigner(): ProviderOrSigner {\n    return this.signer || this._providerOrSigner || this.getProviderOrSigner();\n  }\n\n  private set providerOrSigner(value: ProviderOrSigner) {\n    this._providerOrSigner = value;\n  }\n\n  /**\n   * @internal\n   */\n  private _signer: Signer | null = null;\n  /**\n   * @internal\n   */\n  protected get signer(): Signer | null {\n    return this._signer;\n  }\n\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  /**\n   * Contract connects to the SDK signer or provider\n   * @internal\n   */\n  public contract: TContract;\n  /**\n   * Contract connects to the {@link ISDKOptions.readOnlyRpcUrl} if provided, otherwise connect to signer or provider\n   * @internal\n   */\n  public readOnlyContract: TContract;\n\n  /**\n   * @internal\n   */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    this.address = address;\n    this.options = options;\n    this.ipfsGatewayUrl = options.ipfsGatewayUrl;\n    this.setProviderOrSigner(providerOrSigner);\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n    this.sdk = sdk;\n  }\n\n  /**\n   * @public\n   * @returns whether the given contract exists on-chain\n   */\n  public async exists(): Promise<boolean> {\n    const provider = await this.getProvider();\n    invariant(provider, \"exists() -- No Provider\");\n    return isContract(provider, this.address);\n  }\n\n  /**\n   * @public\n   * Get the metadata of the contract.\n   */\n  public async getMetadata(): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const contract = this.connectContract();\n    const type = this.getModuleType();\n\n    return {\n      metadata: await getContractMetadata(\n        this.getProviderOrSigner(),\n        contract.address,\n        this.options.ipfsGatewayUrl,\n      ),\n      address: contract.address,\n      type,\n    };\n  }\n\n  /**\n   * @public\n   * Set new metadata on the contract and return it if successful.\n   * @param metadata - The metadata to set.\n   */\n  public async setMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n    return this.getMetadata();\n  }\n\n  /**\n   * @internal\n   */\n  public setProviderOrSigner(providerOrSigner: ProviderOrSigner) {\n    this.providerOrSigner = providerOrSigner;\n    if (Signer.isSigner(providerOrSigner)) {\n      this.signer = providerOrSigner;\n    }\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n  }\n\n  /**\n   * @internal\n   */\n  public clearSigner(): void {\n    this.signer = null;\n  }\n\n  /**\n   * @internal\n   */\n  private getProviderOrSigner(): ProviderOrSigner {\n    return this.signer || this.providerOrSigner;\n  }\n\n  /**\n   * @internal\n   */\n  protected getSigner(): Signer | null {\n    if (Signer.isSigner(this.signer)) {\n      return this.signer;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  protected hasValidSigner(): boolean {\n    return Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @internal\n   */\n  protected async getSignerAddress(): Promise<string> {\n    const signer = this.getSigner();\n    invariant(signer, \"Cannot get signer address without valid signer\");\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  protected async getProvider(): Promise<Provider | undefined> {\n    const provider: Provider | undefined = Signer.isSigner(\n      this.getProviderOrSigner(),\n    )\n      ? (this.providerOrSigner as Signer).provider\n      : (this.providerOrSigner as Provider);\n    return provider;\n  }\n\n  /**\n   * @internal\n   */\n  protected async getChainID(): Promise<number> {\n    const provider = await this.getProvider();\n    invariant(provider, \"getChainID() -- No Provider\");\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected connectContract(): TContract {\n    throw new Error(\"connectContract has to be implemented\");\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    throw new Error(\"getModuleType has to be implemented\");\n  }\n\n  /**\n   * @internal\n   */\n  protected async getCallOverrides(): Promise<CallOverrides> {\n    const chainId = await this.getChainID();\n    const speed = this.options.gasSpeed;\n    const maxGasPrice = this.options.maxGasPriceInGwei;\n    const gasPriceChain = await getGasPriceForChain(\n      chainId,\n      speed,\n      maxGasPrice,\n    );\n    if (!gasPriceChain) {\n      return {};\n    }\n    // TODO: support EIP-1559 by try-catch, provider.getFeeData();\n    return {\n      gasPrice: ethers.utils.parseUnits(gasPriceChain.toString(), \"gwei\"),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  protected async sendTransaction(\n    fn: string,\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    if (this.options.transactionRelayerUrl) {\n      return await this.sendGaslessTransaction(fn, args, callOverrides);\n    } else {\n      return await this.sendAndWaitForTransaction(fn, args, callOverrides);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendAndWaitForTransaction(\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    const contract = this.contract;\n    const tx = await contract.functions[fn](...args, callOverrides);\n    if (tx.wait) {\n      return await tx.wait();\n    }\n    return tx;\n  }\n\n  /**\n   * @internal\n   */\n  private async sendGaslessTransaction(\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    console.log(\"callOverrides\", callOverrides);\n    const signer = this.getSigner();\n    invariant(\n      signer,\n      \"Cannot execute gasless transaction without valid signer\",\n    );\n    const provider = await this.getProvider();\n    invariant(provider, \"no provider to execute transaction\");\n    const chainId = await this.getChainID();\n    const contract = this.contract;\n    const from = await this.getSignerAddress();\n    const to = this.address;\n    const value = 0;\n    const data = contract.interface.encodeFunctionData(fn, args);\n    const gas = (await contract.estimateGas[fn](...args)).mul(2);\n    const forwarderAddress = this.options.transactionRelayerForwarderAddress;\n    const forwarder = Forwarder__factory.connect(\n      forwarderAddress,\n      this.getProviderOrSigner(),\n    );\n    const nonce = await getAndIncrementNonce(forwarder, from);\n\n    const domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      chainId,\n      verifyingContract: forwarderAddress,\n    };\n\n    const types = {\n      ForwardRequest,\n    };\n\n    const message = {\n      from,\n      to,\n      value: BigNumber.from(value).toString(),\n      gas: BigNumber.from(gas).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data,\n    };\n\n    const signature = await (signer as JsonRpcSigner)._signTypedData(\n      domain,\n      types,\n      message,\n    );\n\n    // await forwarder.verify(message, signature);\n    const txHash = await this.options.transactionRelayerSendFunction(\n      message,\n      signature,\n    );\n\n    return await provider.waitForTransaction(txHash);\n  }\n\n  protected parseEventLogs(eventName: string, logs?: Log[]): any {\n    if (!logs) {\n      return null;\n    }\n    const contract = this.contract;\n    for (const log of logs) {\n      try {\n        const event = contract.interface.decodeEventLog(\n          eventName,\n          log.data,\n          log.topics,\n        );\n        return event;\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n    }\n    return null;\n  }\n}\n\n/**\n * Extends the {@link Module} class to add {@link Role} functionality.\n *\n * @public\n */\nexport class ModuleWithRoles<\n  TContract extends AccessControlEnumerable = AccessControlEnumerable,\n> extends Module<TContract> {\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    throw new Error(\"getModuleRoles has to be implemented by a subclass\");\n  }\n\n  /**\n   * @internal\n   */\n  private get roles() {\n    return this.getModuleRoles();\n  }\n\n  /** @internal */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    super(providerOrSigner, address, options, sdk);\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   *\n   * @param role - The {@link IRoles | role} to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\n   * @see {@link ModuleWithRoles.getAllRoleMembers | getAllRoleMembers} to get get a list of addresses for all supported roles on the module.\n   * @example Say you want to get the list of addresses that are members of the {@link IRoles.minter | minter} role.\n   * ```typescript\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\n   * ```\n   *\n   * @public\n   */\n  public async getRoleMembers(role: Role): Promise<string[]> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const contract = this.contract;\n    const roleHash = getRoleHash(role);\n    const count = (await contract.getRoleMemberCount(roleHash)).toNumber();\n    return await Promise.all(\n      Array.from(Array(count).keys()).map((i) =>\n        contract.getRoleMember(roleHash, i),\n      ),\n    );\n  }\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the module.\n   *\n   * @see {@link ModuleWithRoles.getRoleMembers | getRoleMembers} to get a list of addresses that are members of a specific role.\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the module does not support roles this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async getAllRoleMembers(): Promise<Partial<Record<Role, string[]>>> {\n    invariant(this.roles.length, \"this module has no support for roles\");\n    const roles: Partial<Record<Role, string[]>> = {};\n    for (const role of this.roles) {\n      roles[role] = await this.getRoleMembers(role);\n    }\n    return roles;\n  }\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks\n   *\n   * Make sure you are sure you want to grant the role to the address.\n   *\n   * @param role - The {@link IRoles | role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async grantRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    return await this.sendTransaction(\"grantRole\", [\n      getRoleHash(role),\n      address,\n    ]);\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the {@link IRoles.admin | admin} role, you will no longer be able to administer the module.\n   * There is no way to recover from this.\n   *\n   * @param role - The {@link IRoles | role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async revokeRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const signerAddress = await this.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return await this.sendTransaction(\"renounceRole\", [\n        getRoleHash(role),\n        address,\n      ]);\n    } else {\n      return await this.sendTransaction(\"revokeRole\", [\n        getRoleHash(role),\n        address,\n      ]);\n    }\n  }\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport FileOrBuffer from \"../FileOrBuffer\";\n\n/**\n * CommonModuleMetadata defines the common properties of a module deployment.\n */\n@JsonObject(\"CommonModuleMetadata\")\nexport default class CommonModuleMetadata {\n  /**\n   * The name of the module.\n   */\n  @JsonProperty(\"name\", String)\n  name = \"\";\n\n  /**\n   * The description of the module.\n   */\n  @JsonProperty(\"description\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  description?: string = undefined;\n\n  /**\n   * An image for the module.\n   *\n   * If the image is a File or Buffer, it will be uploaded to IPFS.\n   * If the image is a string, it will be used as-is (in case you already uploaded it to IPFS\n   * and the property is the IPFS hash uri).\n   */\n  @JsonProperty(\"image\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  image?: string | FileOrBuffer = undefined;\n\n  /**\n   * An external link for the module.\n   */\n  @JsonProperty(\"external_link\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  externalLink?: string = undefined;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CollectionModuleMetadata\")\nexport default class BundleModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CurrencyModuleMetadata\")\nexport default class CurrencyModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The symbol for the Currency (required)\n   */\n  @JsonProperty(\"symbol\", String)\n  symbol = \"\";\n}\n","import { JsonObject } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DatastoreModuleMetadata\")\nexport default class DatastoreModuleMetadata extends CommonModuleMetadata {}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DropModuleMetadata\")\nexport default class DropModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the Drop Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n\n  /**\n   * The max supply (required)\n   */\n  @JsonProperty(\"max_supply\", Number, PropertyConvertingMode.IGNORE_NULLABLE)\n  maxSupply = 1;\n\n  /**\n   * The IPFS base URI thats prepended to all token URIs. This allows\n   * you to batch upload all the metadata for the tokens ahead of time\n   * so they can be lazy minted later\n   *\n   * e.g. if a Drop Collection has a token URI of /ipfs/BOREDAPES/TOKEN1, then the IPFS base URI is /BOREDAPES/\n   */\n  @JsonProperty(\n    \"base_token_uri\",\n    String,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  baseTokenUri = \"\";\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"MarketModuleMetadata\")\nexport default class MarketModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The fee collected on all sales out of this marketplace. This fee\n   * only applies to items sold from the marketplace and does not\n   * include any resale royalties that occur outside of this marketplace.\n   * The default is 0 (no fees).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  marketFeeBasisPoints = 0;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"NftModuleMetadata\")\nexport default class NftModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the NFT Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"PackModuleMetadata\")\nexport default class PackModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n","import { JsonObject } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\nimport { NewSplitRecipient } from \"./NewSplitRecipient\";\n\n@JsonObject(\"SplitsModuleMetadata\")\nexport default class SplitsModuleMetadata extends CommonModuleMetadata {\n  recipientSplits: NewSplitRecipient[] = [];\n}\n","import { Coin, Coin__factory } from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n *\n * Access this module by calling {@link ThirdwebSDK.getCurrencyModule}\n * @public\n */\nexport class CurrencyModule extends ModuleWithRoles<Coin> {\n  public static moduleType: ModuleType = ModuleType.CURRENCY as const;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return CurrencyModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Coin {\n    return Coin__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return CurrencyModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  public async getValue(value: BigNumberish): Promise<CurrencyValue> {\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      this.address,\n      BigNumber.from(value),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  public async balance(): Promise<CurrencyValue> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async balanceOf(address: string): Promise<CurrencyValue> {\n    return await this.getValue(await this.readOnlyContract.balanceOf(address));\n  }\n\n  public async allowance(spender: string): Promise<BigNumber> {\n    return await this.allowanceOf(await this.getSignerAddress(), spender);\n  }\n\n  public async allowanceOf(owner: string, spender: string): Promise<BigNumber> {\n    return await this.readOnlyContract.allowance(owner, spender);\n  }\n  // write functions\n  public async transfer(\n    to: string,\n    amount: BigNumber,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transfer\", [to, amount]);\n  }\n\n  public async setAllowance(\n    spender: string,\n    amount: BigNumber,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"approve\", [spender, amount]);\n  }\n\n  // owner functions\n  public async mint(amount: BigNumberish) {\n    await this.mintTo(await this.getSignerAddress(), amount);\n  }\n\n  public async mintTo(to: string, amount: BigNumberish) {\n    await this.sendTransaction(\"mint\", [to, amount]);\n  }\n\n  public async burn(amount: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [amount]);\n  }\n\n  public async burnFrom(\n    from: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burnFrom\", [from, amount]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n","import {\n  Coin__factory,\n  DataStore__factory,\n  LazyNFT__factory,\n  Market__factory,\n  NFTCollection__factory,\n  NFT__factory,\n  Pack__factory,\n  ProtocolControl,\n  ProtocolControl__factory,\n  Royalty__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, ethers, Signer } from \"ethers\";\nimport { JsonConvert } from \"json2typescript\";\nimport {\n  ChainlinkVrf,\n  Role,\n  RolesMap,\n  uploadMetadata,\n  uploadToIPFS,\n} from \"../common\";\nimport { getContractMetadata } from \"../common/contract\";\nimport { invariant } from \"../common/invariant\";\nimport { ModuleType } from \"../common/module-type\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport IAppModule from \"../interfaces/IAppModule\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport BundleModuleMetadata from \"../types/module-deployments/BundleModuleMetadata\";\nimport CommonModuleMetadata from \"../types/module-deployments/CommonModuleMetadata\";\nimport CurrencyModuleMetadata from \"../types/module-deployments/CurrencyModuleMetadata\";\nimport DatastoreModuleMetadata from \"../types/module-deployments/DatastoreModuleMetadata\";\nimport DropModuleMetadata from \"../types/module-deployments/DropModuleMetadata\";\nimport MarketModuleMetadata from \"../types/module-deployments/MarketModuleMetadata\";\nimport NftModuleMetadata from \"../types/module-deployments/NftModuleMetadata\";\nimport PackModuleMetadata from \"../types/module-deployments/PackModuleMetadata\";\nimport SplitsModuleMetadata from \"../types/module-deployments/SplitsModuleMetadata\";\nimport { ModuleMetadata, ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { CollectionModule } from \"./collection\";\nimport { DatastoreModule } from \"./datastore\";\nimport { DropModule } from \"./drop\";\nimport { MarketModule } from \"./market\";\nimport { NFTModule } from \"./nft\";\nimport { PackModule } from \"./pack\";\nimport { SplitsModule } from \"./royalty\";\nimport { CurrencyModule } from \"./token\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getAppModule}\n * @public\n */\nexport class AppModule\n  extends ModuleWithRoles<ProtocolControl>\n  implements IAppModule\n{\n  private jsonConvert = new JsonConvert();\n\n  public static roles = [RolesMap.admin] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return CurrencyModule.roles;\n  }\n\n  /**\n   * The internal module type for the app module.\n   * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.\n   * @internal\n   * @readonly\n   */\n  private moduleType: ModuleType = -1;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): ProtocolControl {\n    return ProtocolControl__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return this.moduleType;\n  }\n\n  /**\n   * @internal\n   *\n   */\n  private async getModuleAddress(moduleType: ModuleType): Promise<string[]> {\n    return await this.readOnlyContract.getAllModulesOfType(moduleType);\n  }\n\n  private async getNFTAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.NFT);\n  }\n\n  private async getCollectionAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.COLLECTION);\n  }\n\n  private async getPackAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.PACK);\n  }\n\n  private async getCurrencyAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.CURRENCY);\n  }\n\n  private async getMarketAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.MARKET);\n  }\n\n  private async getDropAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DROP);\n  }\n\n  private async getDatastoreAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DATASTORE);\n  }\n\n  public async getRoyaltyTreasury(address?: string): Promise<string> {\n    return await this.readOnlyContract.getRoyaltyTreasury(\n      address || AddressZero,\n    );\n  }\n\n  /**\n   * @internal\n   * @param addresses - The addresses of the modules to get metadata for.\n   */\n  public async getAllContractMetadata(\n    addresses: string[],\n  ): Promise<ModuleMetadataNoType[]> {\n    const metadatas = await Promise.all(\n      addresses.map((address) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          address,\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n    return addresses\n      .filter((d) => d)\n      .map((address, i) => {\n        return {\n          address,\n          metadata: metadatas[i],\n        };\n      });\n  }\n\n  /**\n   * Method to get a list of pack module metadata.\n   * @returns A promise of an array of Pack modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getPackModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getPackAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.PACK,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of NFT module metadata.\n   * @returns A promise of an array of NFT modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getNFTModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getNFTAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.NFT,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of Collection module metadata.\n   * @returns A promise of an array of Collection modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCollectionModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getCollectionAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.COLLECTION,\n    }));\n  }\n\n  /**\n   * Method to get a list of Currency module metadata.\n   * @returns A promise of an array of Currency modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCurrencyModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getCurrencyAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.CURRENCY,\n    }));\n  }\n\n  /**\n   * Method to get a list of Datastore module metadata.\n   * @alpha\n   * @returns A promise of an array of Datastore modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDatastoreModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getDatastoreAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.DATASTORE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Market module metadata.\n   * @returns A promise of an array of Market modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getMarketModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getMarketAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.MARKET,\n    }));\n  }\n\n  /**\n   * Method to get a list of Drop module metadata.\n   * @returns A promise of an array of Drop modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDropModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getDropAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.DROP,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of all module metadata on a given app.\n   * @public\n   * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.\n   * @returns Array of module metadata\n   */\n  public async getAllModuleMetadata(\n    filterByModuleType?: ModuleType[],\n  ): Promise<ModuleMetadata[]> {\n    const moduleTypesToGet = filterByModuleType || [\n      ModuleType.NFT,\n      ModuleType.COLLECTION,\n      ModuleType.PACK,\n      ModuleType.CURRENCY,\n      ModuleType.MARKET,\n      ModuleType.DROP,\n      ModuleType.DATASTORE,\n    ];\n    return (\n      await Promise.all(\n        moduleTypesToGet.map(async (moduleType) => {\n          const moduleAddresses = await this.getModuleAddress(moduleType);\n          return (await this.getAllContractMetadata(moduleAddresses)).map(\n            (m) => ({\n              ...m,\n              type: moduleType,\n            }),\n          );\n        }),\n      )\n    ).reduce((acc, curr) => acc.concat(curr), []);\n  }\n\n  // owner functions\n  /**\n   * @deprecated - Use setMetadata() instead\n   */\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyTreasury(\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyTreasury\", [treasury]);\n  }\n\n  public async setModuleRoyaltyTreasury(\n    moduleAddress: string,\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setModuleRoyaltyTreasury\", [\n      moduleAddress,\n      treasury,\n    ]);\n  }\n\n  public async withdrawFunds(\n    to: string,\n    currency: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"withdrawFunds\", [to, currency]);\n  }\n\n  /**\n   * Helper method that handles `image` property uploads if its a file\n   *\n   * @param metadata - The metadata of the module to be deployed\n   * @returns - The sanitized metadata with an uploaded image ipfs hash\n   */\n  private async _prepareMetadata(metadata: CommonModuleMetadata): Promise<any> {\n    if (typeof metadata.image === \"string\") {\n      return Promise.resolve(metadata);\n    }\n    if (metadata.image === undefined) {\n      return Promise.resolve(metadata);\n    }\n\n    metadata.image = await uploadToIPFS(\n      metadata.image as FileOrBuffer,\n      this.address,\n      await this.getSignerAddress(),\n    );\n    return Promise.resolve(metadata);\n  }\n\n  /**\n   * Helper method that deploys a module and returns its address\n   *\n   * @internal\n   *\n   * @param moduleType - The ModuleType to deploy\n   * @param args - Constructor arguments for the module\n   * @param factory - The ABI factory used to call the `deploy` method\n   * @returns The address of the deployed module\n   */\n  private async _deployModule<T extends ModuleType>(\n    moduleType: T,\n    args: any[],\n    factory: any,\n  ): Promise<string> {\n    const gasPrice = await this.sdk.getGasPrice();\n    const txOpts = gasPrice\n      ? { gasPrice: ethers.utils.parseUnits(gasPrice.toString(), \"gwei\") }\n      : {};\n\n    const tx = await new ethers.ContractFactory(factory.abi, factory.bytecode)\n      .connect(this.signer as Signer)\n      .deploy(...args, txOpts);\n\n    await tx.deployed();\n    const contractAddress = tx.address;\n\n    const addModuleTx = await this.contract.addModule(\n      contractAddress,\n      moduleType,\n      txOpts,\n    );\n    await addModuleTx.wait();\n    return contractAddress;\n  }\n\n  /**\n   * Deploys a collection module.\n   *\n   * @param metadata - Metadata about the module.\n   * @returns A promise with the newly created module.\n   */\n  public async deployBundleModule(\n    metadata: BundleModuleMetadata,\n  ): Promise<CollectionModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      BundleModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.COLLECTION,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        BigNumber.from(\n          metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        ),\n      ],\n      NFTCollection__factory,\n    );\n\n    return this.sdk.getCollectionModule(address);\n  }\n\n  /**\n   * Deploys a Splits module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed splits module\n   */\n  public async deploySplitsModule(\n    metadata: SplitsModuleMetadata,\n  ): Promise<SplitsModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      SplitsModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.SPLITS,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.recipientSplits.map((s) => s.address),\n        metadata.recipientSplits.map((s) => s.shares),\n      ],\n      Royalty__factory,\n    );\n\n    return this.sdk.getSplitsModule(address);\n  }\n\n  /**\n   * Deploys a NFT module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed NFT module\n   */\n  public async deployNftModule(\n    metadata: NftModuleMetadata,\n  ): Promise<NFTModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      NftModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.NFT,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.sellerFeeBasisPoints,\n      ],\n      NFT__factory,\n    );\n\n    return this.sdk.getNFTModule(address);\n  }\n\n  /**\n   * Deploys a currency module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed currency module\n   */\n  public async deployCurrencyModule(\n    metadata: CurrencyModuleMetadata,\n  ): Promise<CurrencyModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      CurrencyModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.CURRENCY,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n      ],\n      Coin__factory,\n    );\n\n    return this.sdk.getCurrencyModule(address);\n  }\n\n  /**\n   * Deploys a Marketplace module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Marketplace module\n   */\n  public async deployMarketModule(\n    metadata: MarketModuleMetadata,\n  ): Promise<MarketModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      MarketModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.MARKET,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.marketFeeBasisPoints ? metadata.marketFeeBasisPoints : 0,\n      ],\n      Market__factory,\n    );\n\n    return this.sdk.getMarketModule(address);\n  }\n\n  /**\n   * Deploys a Pack module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Pack module\n   */\n  public async deployPackModule(\n    metadata: PackModuleMetadata,\n  ): Promise<PackModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      PackModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const chainId = await this.getChainID();\n    const { vrfCoordinator, linkTokenAddress, keyHash, fees } =\n      ChainlinkVrf[chainId as keyof typeof ChainlinkVrf];\n\n    const address = await this._deployModule(\n      ModuleType.PACK,\n      [\n        this.address,\n        metadataUri,\n        vrfCoordinator,\n        linkTokenAddress,\n        keyHash,\n        fees,\n        await this.sdk.getForwarderAddress(),\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n      ],\n      Pack__factory,\n    );\n\n    return this.sdk.getPackModule(address);\n  }\n\n  /**\n   * Deploys a Drop module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Drop module\n   */\n  public async deployDropModule(\n    metadata: DropModuleMetadata,\n  ): Promise<DropModule> {\n    invariant(metadata.maxSupply !== undefined, \"Max supply must be specified\");\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.DROP,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.baseTokenUri ? metadata.baseTokenUri : \"\",\n        metadata.maxSupply,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n      ],\n      LazyNFT__factory,\n    );\n\n    return this.sdk.getDropModule(address);\n  }\n\n  /**\n   * Deploys a Datastore module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Datastore module\n   */\n  public async deployDatastoreModule(\n    metadata: DatastoreModuleMetadata,\n  ): Promise<DatastoreModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DatastoreModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.DATASTORE,\n      [this.address, await this.sdk.getForwarderAddress(), metadataUri],\n      DataStore__factory,\n    );\n\n    return this.sdk.getDatastoreModule(address);\n  }\n}\n","import {\n  NFTCollection as NFTCollectionContract,\n  NFTCollection__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BytesLike } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * @beta\n */\nexport interface CollectionMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: number;\n}\n\n/**\n * @beta\n */\nexport interface INFTCollectionCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\n\n/**\n * @beta\n */\nexport interface INFTCollectionBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n/**\n * Access this module by calling {@link ThirdwebSDK.getCollectionModule}\n * @beta\n */\nexport class CollectionModule extends ModuleWithRoles<NFTCollectionContract> {\n  public static moduleType: ModuleType = ModuleType.COLLECTION;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return CollectionModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): NFTCollectionContract {\n    return NFTCollection__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return CollectionModule.moduleType;\n  }\n\n  /**\n   *\n   * Get a single collection item by tokenId.\n   * @param tokenId - the unique token id of the nft\n   * @returns A promise that resolves to a `CollectionMetadata`.\n   */\n  public async get(\n    tokenId: string,\n    address?: string,\n  ): Promise<CollectionMetadata> {\n    const [metadata, creator, supply, ownedByAddress] = await Promise.all([\n      getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl),\n      this.readOnlyContract.creator(tokenId),\n      this.readOnlyContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(\"0\")),\n      address ? (await this.balanceOf(address, tokenId)).toNumber() : 0,\n    ]);\n    return {\n      creator,\n      supply,\n      metadata,\n      ownedByAddress,\n    };\n  }\n\n  /**\n   * Return all items in the collection.\n   * @returns An array of `INFTCollection`.\n   */\n  public async getAll(address?: string): Promise<CollectionMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.get(i.toString(), address),\n      ),\n    );\n  }\n\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(\n      await this.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.transferFrom(\n      await this.getSignerAddress(),\n      to,\n      { tokenId, amount },\n      [0],\n    );\n  }\n\n  // owner functions\n  public async create(\n    metadata: MetadataURIOrObject,\n  ): Promise<CollectionMetadata> {\n    return (await this.createBatch([metadata]))[0];\n  }\n\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<CollectionMetadata[]> {\n    const metadataWithSupply = metadatas.map((m) => ({\n      metadata: m,\n      supply: 0,\n    }));\n    return this.createAndMintBatch(metadataWithSupply);\n  }\n\n  public async createAndMint(\n    metadataWithSupply: INFTCollectionCreateArgs,\n  ): Promise<CollectionMetadata> {\n    return (await this.createAndMintBatch([metadataWithSupply]))[0];\n  }\n\n  public async createAndMintBatch(\n    metadataWithSupply: INFTCollectionCreateArgs[],\n  ): Promise<CollectionMetadata[]> {\n    const uris = await Promise.all(\n      metadataWithSupply.map((a) => a.metadata).map((a) => uploadMetadata(a)),\n    );\n    const supplies = metadataWithSupply.map((a) => a.supply);\n    const to = await this.getSignerAddress();\n    const receipt = await this.sendTransaction(\"createNativeTokens\", [\n      to,\n      uris,\n      supplies,\n      [0],\n    ]);\n    const event = this.parseEventLogs(\"NativeTokens\", receipt?.logs);\n    const tokenIds = event?.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async createWithERC20(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTCollectionCreateArgs,\n  ) {\n    const uri = await uploadMetadata(args.metadata);\n    await this.sendTransaction(\"wrapERC20\", [\n      tokenContract,\n      tokenAmount,\n      args.supply,\n      uri,\n    ]);\n  }\n\n  public async createWithERC721(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"wrapERC721\", [tokenContract, tokenId, uri]);\n  }\n\n  public async mint(args: INFTCollectionBatchArgs) {\n    await this.mintTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintTo(\n    to: string,\n    args: INFTCollectionBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"mint\", [to, args.tokenId, args.amount, data]);\n  }\n\n  public async mintBatch(args: INFTCollectionBatchArgs[]) {\n    await this.mintBatchTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintBatchTo(\n    to: string,\n    args: INFTCollectionBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"mintBatch\", [to, ids, amounts, data]);\n  }\n\n  public async burn(\n    args: INFTCollectionBatchArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.burnFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnBatch(\n    args: INFTCollectionBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    return await this.burnBatchFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnFrom(\n    account: string,\n    args: INFTCollectionBatchArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [\n      account,\n      args.tokenId,\n      args.amount,\n    ]);\n  }\n\n  public async burnBatchFrom(\n    account: string,\n    args: INFTCollectionBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: INFTCollectionBatchArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: INFTCollectionBatchArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyBps\", [amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of CollectionMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<CollectionMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => await this.get(b.tokenId.toString())),\n    );\n  }\n}\n","import { DataStore, DataStore__factory } from \"@3rdweb/contracts\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { ModuleWithRoles } from \"../core/module\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getDatastoreModule}\n * @alpha\n */\nexport class DatastoreModule extends ModuleWithRoles<DataStore> {\n  public static moduleType: ModuleType = ModuleType.DATASTORE;\n\n  public static roles = [RolesMap.admin, RolesMap.editor] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DatastoreModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): DataStore {\n    return DataStore__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DatastoreModule.moduleType;\n  }\n\n  public async getUint(key: string): Promise<BigNumberish | undefined> {\n    const keyHash = keccak256(key.toString());\n    return await this.readOnlyContract.getUint(keyHash);\n  }\n\n  // write functions\n  public async setUint(\n    key: string,\n    value: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    const keyHash = keccak256(key.toString());\n    return await this.sendTransaction(\"setUint\", [keyHash, value]);\n  }\n}\n","import {\n  LazyNFT as Drop,\n  LazyNFT__factory as Drop__factory,\n} from \"@3rdweb/contracts\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getTokenMetadata, NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * @beta\n */\nexport interface CreatePublicMintCondition {\n  startTimestampInSeconds?: BigNumberish;\n  maxMintSupply: BigNumberish;\n  quantityLimitPerTransaction?: BigNumberish;\n  waitTimeSecondsLimitPerTransaction?: BigNumberish;\n  pricePerToken?: BigNumberish;\n  currency?: string;\n  merkleRoot?: BytesLike;\n}\n\n/**\n * @beta\n */\nexport interface PublicMintCondition {\n  startTimestamp: BigNumberish;\n  maxMintSupply: BigNumberish;\n  currentMintSupply: BigNumberish;\n  quantityLimitPerTransaction: BigNumberish;\n  waitTimeSecondsLimitPerTransaction: BigNumberish;\n  pricePerToken: BigNumberish;\n  currency: string;\n  merkleRoot: BytesLike;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getDropModule}\n * @beta\n */\nexport class DropModule extends ModuleWithRoles<Drop> {\n  public static moduleType: ModuleType = ModuleType.DROP;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Drop {\n    return Drop__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DropModule.moduleType;\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.ipfsGatewayUrl,\n    );\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAll(): Promise<NFTMetadataOwner[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getAllUnclaimed(): Promise<NFTMetadataOwner[]> {\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const unmintedId = await this.readOnlyContract.nextMintTokenId();\n    return await Promise.all(\n      Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map((i) =>\n        this.get(unmintedId.add(i).toString()),\n      ),\n    );\n  }\n\n  public async getAllClaimed(): Promise<NFTMetadataOwner[]> {\n    const maxId = (await this.readOnlyContract.nextMintTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async ownerOf(tokenId: string): Promise<string> {\n    return await this.readOnlyContract.ownerOf(tokenId);\n  }\n\n  public async getOwned(_address?: string): Promise<NFTMetadataOwner[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async getActiveMintCondition(): Promise<PublicMintCondition> {\n    const index =\n      await this.readOnlyContract.getLastStartedMintConditionIndex();\n    return await this.readOnlyContract.mintConditions(index);\n  }\n\n  public async getAllMintConditions(): Promise<PublicMintCondition[]> {\n    const conditions = [];\n    for (let i = 0; ; i++) {\n      try {\n        conditions.push(await this.readOnlyContract.mintConditions(i));\n      } catch (e) {\n        break;\n      }\n    }\n    return conditions;\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextTokenId();\n  }\n\n  public async maxTotalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.maxTotalSupply();\n  }\n\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    return (await this.readOnlyContract.nextTokenId()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextMintTokenId();\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  // owner functions\n  public async lazyMint(metadata: MetadataURIOrObject) {\n    await this.lazyMintBatch([metadata]);\n  }\n\n  public async lazyMintBatch(metadatas: MetadataURIOrObject[]) {\n    const uris = await Promise.all(metadatas.map((m) => uploadMetadata(m)));\n    await this.sendTransaction(\"lazyMintBatch\", [uris]);\n  }\n\n  public async lazyMintAmount(amount: BigNumberish) {\n    await this.sendTransaction(\"lazyMintAmount\", [amount]);\n  }\n\n  public async setPublicMintConditions(\n    conditions: CreatePublicMintCondition[],\n  ) {\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: c.startTimestampInSeconds || 0,\n      maxMintSupply: c.maxMintSupply,\n      currentMintSupply: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxMintSupply,\n      waitTimeSecondsLimitPerTransaction:\n        c.waitTimeSecondsLimitPerTransaction || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setPublicMintConditions\", [_conditions]);\n  }\n\n  public async claim(quantity: BigNumberish) {\n    const proofs = [hexZeroPad([0], 32)];\n    const mintCondition = await this.getActiveMintCondition();\n    const overrides = (await this.getCallOverrides()) || {};\n    if (\n      mintCondition.currency === AddressZero &&\n      mintCondition.pricePerToken > 0\n    ) {\n      overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n        quantity,\n      );\n    }\n    await this.sendTransaction(\"claim\", [quantity, proofs], overrides);\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyBps\", [amount]);\n  }\n\n  public async setBaseTokenUri(uri: string): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setBaseTokenURI\", [uri]);\n  }\n\n  public async setMaxTotalSupply(\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMaxTotalSupply\", [amount]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted: boolean,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC165__factory,\n  ERC20__factory,\n  ERC721__factory,\n  Market,\n  Market__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { InterfaceId_IERC721 } from \"../common/contract\";\nimport { CurrencyValue, getCurrencyValue } from \"../common/currency\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * Filter options for the Market module.\n * @public\n */\nexport interface ListingFilter {\n  seller?: string;\n  tokenContract?: string;\n  tokenId?: string;\n}\n\n/**\n * Metadata for items listed on a Market module.\n * @public\n */\nexport interface ListingMetadata {\n  id: string;\n  seller: string;\n  tokenContract: string;\n  tokenId: string;\n  tokenMetadata?: NFTMetadata;\n  quantity: BigNumber;\n  currencyContract: string;\n  currencyMetadata: CurrencyValue | null;\n  price: BigNumber;\n  saleStart: Date | null;\n  saleEnd: Date | null;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getMarketModule}\n * @public\n */\nexport class MarketModule extends ModuleWithRoles<Market> {\n  public static moduleType: ModuleType = ModuleType.MARKET;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.lister,\n    RolesMap.pauser,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return MarketModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Market {\n    return Market__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return MarketModule.moduleType;\n  }\n\n  private async transformResultToListing(\n    listing: any,\n  ): Promise<ListingMetadata> {\n    let currency: CurrencyValue | null = null;\n\n    try {\n      currency = await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.pricePerToken,\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    let metadata: NFTMetadata | undefined = undefined;\n    try {\n      metadata = await getMetadataWithoutContract(\n        this.providerOrSigner,\n        listing.assetContract,\n        listing.tokenId.toString(),\n        this.ipfsGatewayUrl,\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    return {\n      id: listing.listingId.toString(),\n      seller: listing.seller,\n      tokenId: listing.tokenId.toString(),\n      tokenContract: listing.assetContract,\n      tokenMetadata: metadata,\n      quantity: listing.quantity,\n      price: listing.pricePerToken,\n      currencyContract: listing.currency,\n      currencyMetadata: currency,\n      saleStart: listing.saleStart.gt(0)\n        ? new Date(listing.saleStart.toNumber() * 1000)\n        : null,\n      saleEnd:\n        listing.saleEnd.gt(0) &&\n        listing.saleEnd.lte(Number.MAX_SAFE_INTEGER - 1)\n          ? new Date(listing.saleEnd.toNumber() * 1000)\n          : null,\n    };\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.get} instead.\n   */\n  public async getListing(listingId: string): Promise<ListingMetadata> {\n    return await this.get(listingId);\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.getAll} instead.\n   */\n  public async getAllListings(\n    filter?: ListingFilter,\n  ): Promise<ListingMetadata[]> {\n    return await this.getAll(filter);\n  }\n\n  public async get(listingId: string): Promise<ListingMetadata> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    return await this.transformResultToListing(listing);\n  }\n\n  public async getAll(filter?: ListingFilter): Promise<ListingMetadata[]> {\n    let listings: any[] = [];\n\n    if (!filter) {\n      listings = listings.concat(await this.readOnlyContract.getAllListings());\n    } else {\n      if (filter.tokenContract && filter.tokenId) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAsset(\n            filter.tokenContract,\n            filter.tokenId,\n          ),\n        );\n      } else if (filter.seller) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsBySeller(filter.seller),\n        );\n      } else if (filter.tokenContract) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAssetContract(\n            filter.tokenContract,\n          ),\n        );\n      } else {\n        listings = listings.concat(\n          await this.readOnlyContract.getAllListings(),\n        );\n      }\n    }\n\n    listings = listings\n      .filter((l) => {\n        if (l.quantity.eq(0)) {\n          return false;\n        }\n        if (filter) {\n          const filterSeller = filter?.seller || \"\";\n          const filterTokenContract = filter?.tokenContract || \"\";\n          const filterTokenId = filter?.tokenId || \"\";\n\n          if (\n            filterSeller &&\n            filterSeller.toLowerCase() !== l.seller.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenContract &&\n            filterTokenContract.toLowerCase() !== l.assetContract.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenId &&\n            filterTokenId.toLowerCase() !== l.tokenId.toString().toLowerCase()\n          ) {\n            return false;\n          }\n        }\n        return true;\n      })\n      .map((l) => this.transformResultToListing(l));\n    return await Promise.all(listings);\n  }\n\n  public async getMarketFeeBps(): Promise<BigNumber> {\n    return await this.readOnlyContract.marketFeeBps();\n  }\n\n  // write functions\n  public async list(\n    assetContract: string,\n    tokenId: string,\n    currencyContract: string,\n    price: BigNumberish,\n    quantity: BigNumberish,\n    tokensPerBuyer: BigNumberish = 0,\n    secondsUntilStart: BigNumberish = 0,\n    secondsUntilEnd: BigNumberish = 0,\n  ): Promise<ListingMetadata> {\n    const from = await this.getSignerAddress();\n    const erc165 = ERC165__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n\n    // check for token approval\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    if (isERC721) {\n      const asset = ERC721__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        const isTokenApproved =\n          (await asset.getApproved(tokenId)).toLowerCase() ===\n          this.address.toLowerCase();\n\n        if (!isTokenApproved) {\n          // TODO: make it gasless\n          const tx = await asset.setApprovalForAll(\n            this.address,\n            true,\n            await this.getCallOverrides(),\n          );\n          await tx.wait();\n        }\n      }\n    } else {\n      const asset = ERC1155__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        // TODO: make it gasless\n        const tx = await asset.setApprovalForAll(\n          this.address,\n          true,\n          await this.getCallOverrides(),\n        );\n        await tx.wait();\n      }\n    }\n\n    const receipt = await this.sendTransaction(\"list\", [\n      assetContract,\n      tokenId,\n      currencyContract,\n      price,\n      quantity,\n      tokensPerBuyer,\n      secondsUntilStart,\n      secondsUntilEnd,\n    ]);\n    const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n    const listing = event?.listing;\n    return await this.transformResultToListing(listing);\n  }\n\n  public async unlistAll(listingId: string) {\n    const maxQuantity = (await this.get(listingId)).quantity;\n    await this.unlist(listingId, maxQuantity);\n  }\n\n  public async unlist(listingId: string, quantity: BigNumberish) {\n    await this.sendTransaction(\"unlist\", [listingId, quantity]);\n  }\n\n  public async buy(\n    listingId: string,\n    quantity: BigNumberish,\n  ): Promise<ListingMetadata> {\n    const listing = await this.get(listingId);\n    const owner = await this.getSignerAddress();\n    const spender = this.address;\n    const totalPrice = listing.price.mul(BigNumber.from(quantity));\n    if (listing.currencyContract && listing.currencyContract !== AddressZero) {\n      const erc20 = ERC20__factory.connect(\n        listing.currencyContract,\n        this.providerOrSigner,\n      );\n      const allowance = await erc20.allowance(owner, spender);\n      if (allowance.lt(totalPrice)) {\n        // TODO: make it gasless\n        const tx = await erc20.increaseAllowance(\n          spender,\n          totalPrice,\n          await this.getCallOverrides(),\n        );\n        await tx.wait();\n      }\n    }\n\n    const receipt = await this.sendTransaction(\"buy\", [listingId, quantity]);\n    const event = this.parseEventLogs(\"NewSale\", receipt?.logs);\n    return await this.transformResultToListing(event?.listing);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setMarketFeeBps(fee: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMarketFeeBps\", [fee]);\n  }\n}\n","/* eslint-disable new-cap */\nimport { NFT, NFT__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getTokenMetadata, NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getNFTModule}\n * @public\n */\nexport class NFTModule extends ModuleWithRoles<NFT> {\n  public static moduleType: ModuleType = ModuleType.NFT;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  protected getModuleRoles(): readonly Role[] {\n    return NFTModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): NFT {\n    return NFT__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return NFTModule.moduleType;\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.ipfsGatewayUrl,\n    );\n  }\n\n  public async getAll(): Promise<NFTMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getWithOwner(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId),\n      this.get(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAllWithOwner(): Promise<NFTMetadataOwner[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.getWithOwner(i.toString()),\n      ),\n    );\n  }\n\n  /**\n   * Checks the owner of a particular NFT\n   *\n   * @param tokenId - ID of the NFT to get the owner of\n   * @returns the owner of the token, or a zero address if the\n   * token has been burned\n   */\n  public async ownerOf(tokenId: string): Promise<string> {\n    try {\n      return await this.readOnlyContract.ownerOf(tokenId);\n    } catch (e) {\n      return AddressZero;\n    }\n  }\n\n  public async getOwned(_address?: string): Promise<NFTMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  // owner functions\n  public async mint(metadata: MetadataURIOrObject): Promise<NFTMetadata> {\n    return await this.mintTo(await this.getSignerAddress(), metadata);\n  }\n\n  public async mintTo(\n    to: string,\n    metadata: MetadataURIOrObject,\n  ): Promise<NFTMetadata> {\n    const uri = await uploadMetadata(metadata);\n    const receipt = await this.sendTransaction(\"mintNFT\", [to, uri]);\n    const event = this.parseEventLogs(\"Minted\", receipt?.logs);\n    const tokenId = event?.tokenId;\n    return await this.get(tokenId.toString());\n  }\n\n  public async mintBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    return await this.mintBatchTo(await this.getSignerAddress(), metadatas);\n  }\n\n  public async mintBatchTo(\n    to: string,\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    const uris = await Promise.all(metadatas.map((m) => uploadMetadata(m)));\n    const receipt = await this.sendTransaction(\"mintNFTBatch\", [to, uris]);\n    const event = this.parseEventLogs(\"MintedBatch\", receipt?.logs);\n    const tokenIds = event.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyBps\", [amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC20__factory,\n  Pack as PackContract,\n  Pack__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish, BytesLike, ethers } from \"ethers\";\nimport {\n  CurrencyValue,\n  getCurrencyValue,\n  ModuleType,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { ChainlinkVrf } from \"../common/chainlink\";\nimport { NotFoundError } from \"../common/error\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * @beta\n */\nexport interface PackMetadata {\n  id: string;\n  creator: string;\n  currentSupply: BigNumber;\n  openStart: Date | null;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackNFTMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @beta\n */\nexport interface IPackCreateArgs {\n  assetContract: string;\n  metadata: MetadataURIOrObject;\n  assets: {\n    tokenId: BigNumberish;\n    amount: BigNumberish;\n  }[];\n  secondsUntilOpenStart?: number;\n  rewardsPerOpen?: number;\n}\n\n/**\n * @beta\n */\nexport interface IPackBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getPackModule}\n * @beta\n */\nexport class PackModule extends ModuleWithRoles<PackContract> {\n  public static moduleType: ModuleType = ModuleType.PACK;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return PackModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): PackContract {\n    return Pack__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return PackModule.moduleType;\n  }\n\n  public async open(packId: string): Promise<NFTMetadata[]> {\n    const receipt = await this.sendTransaction(\"openPack\", [packId]);\n    const event = this.parseEventLogs(\"PackOpenRequest\", receipt?.logs);\n    const requestId = event.requestId;\n    const opener = event.opener;\n\n    const fulfillEvent: any = await new Promise((resolve) => {\n      this.readOnlyContract.once(\n        // eslint-disable-next-line new-cap\n        this.readOnlyContract.filters.PackOpenFulfilled(null, opener),\n        (_packId, _opener, _requestId, rewardContract, rewardIds) => {\n          if (requestId === _requestId) {\n            resolve({\n              packId: _packId,\n              opener: _opener,\n              requestId,\n              rewardContract,\n              rewardIds,\n            });\n          }\n        },\n      );\n    });\n    const { rewardIds } = fulfillEvent;\n    return await Promise.all(\n      rewardIds.map((rewardId: BigNumber) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          this.address,\n          rewardId.toString(),\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n  }\n\n  public async get(packId: string): Promise<PackMetadata> {\n    const [meta, state, supply] = await Promise.all([\n      getMetadataWithoutContract(\n        this.providerOrSigner,\n        this.address,\n        packId,\n        this.ipfsGatewayUrl,\n      ),\n      this.readOnlyContract.getPack(packId),\n      this.readOnlyContract\n        .totalSupply(packId)\n        .catch(() => BigNumber.from(\"0\")),\n    ]);\n    const entity: PackMetadata = {\n      id: packId,\n      metadata: meta,\n      creator: state.creator,\n      currentSupply: supply,\n      openStart: state.openStart.gt(0)\n        ? new Date(state.openStart.toNumber() * 1000)\n        : null,\n    };\n    return entity;\n  }\n\n  public async getAll(): Promise<PackMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getNFTs(packId: string): Promise<PackNFTMetadata[]> {\n    const packReward = await this.readOnlyContract.getPackWithRewards(packId);\n    if (!packReward.source) {\n      throw new NotFoundError();\n    }\n    const rewards = await Promise.all(\n      packReward.tokenIds.map((tokenId) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          packReward.source,\n          tokenId.toString(),\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n    return rewards.map((reward, i) => ({\n      supply: packReward.amountsPacked[i],\n      metadata: reward,\n    }));\n  }\n\n  // passthrough to the contract\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress(), tokenId);\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  public async setApproval(operator: string, approved = true) {\n    await this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n  }\n\n  public async transfer(to: string, tokenId: string, amount: BigNumber) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      await this.getSignerAddress(),\n      to,\n      tokenId,\n      amount,\n      [0],\n    ]);\n  }\n\n  // owner functions\n  public async create(args: IPackCreateArgs): Promise<PackMetadata> {\n    const asset = ERC1155__factory.connect(\n      args.assetContract,\n      this.providerOrSigner,\n    );\n\n    const from = await this.getSignerAddress();\n    const ids = args.assets.map((a) => a.tokenId);\n    const amounts = args.assets.map((a) => a.amount);\n    const uri = await uploadMetadata(args.metadata);\n\n    const packParams = ethers.utils.defaultAbiCoder.encode(\n      [\"string\", \"uint256\", \"uint256\"],\n      [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1],\n    );\n\n    // TODO: make it gasless\n    const tx = await asset.safeBatchTransferFrom(\n      from,\n      this.address,\n      ids,\n      amounts,\n      packParams,\n      await this.getCallOverrides(),\n    );\n    const receipt = await tx.wait();\n    const event = receipt?.events?.find((e) => e.event === \"PackCreated\");\n    const packId = event?.args?.packId;\n    return await this.get(packId);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  // owner functions\n  public async getLinkBalance(): Promise<CurrencyValue> {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      chainlink.linkTokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n\n  public async depositLink(amount: BigNumberish) {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    // TODO: make it gasless\n    const tx = await erc20.transfer(\n      this.address,\n      amount,\n      await this.getCallOverrides(),\n    );\n    await tx.wait();\n  }\n\n  public async withdrawLink(to: string, amount: BigNumberish) {\n    await this.sendTransaction(\"transferLink\", [to, amount]);\n  }\n\n  public async setRoyaltyBps(amount: number) {\n    await this.sendTransaction(\"setRoyaltyBps\", [amount]);\n  }\n\n  public async setModuleMetadata(metadata: MetadataURIOrObject) {\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(restricted = false): Promise<void> {\n    await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n","import { ERC20__factory, Royalty, Royalty__factory } from \"@3rdweb/contracts\";\nimport { BigNumber } from \"ethers\";\nimport { ModuleType } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { Module } from \"../core/module\";\nimport { SplitRecipient } from \"../types/SplitRecipient\";\n\nexport interface ISplitsModule {\n  /**\n   * Returns a list of all recipients with their\n   * respective split percentages.\n   *\n   */\n  getAllRecipients(): Promise<SplitRecipient[]>;\n\n  /**\n   * Get the split percentage of a recipient.\n   *\n   * @param address - The address of the recipient.\n   */\n  getRecipientSplitPercentage(address: string): Promise<SplitRecipient>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency.\n   *\n   * @param address - The address of the recipient to check the balance of.\n   */\n  balanceOf(address: string): Promise<BigNumber>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency in a specific currency.\n   *\n   * @param walletAddress - The address of the recipient to check the balance of.\n   * @param tokenAddress - The address of the currency to check the balance in.\n   */\n  balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet.\n   *\n   * @param address - The address to withdraw royalties for.\n   */\n  withdraw(address: string): Promise<void>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet, in the\n   * currency specified by `tokenAddress`.\n   *\n   * For example: If the native currency of a chain is ETH but the user\n   * wants to withdraw their split in $MATIC, they should pass\n   * the address of the $MATIC token as the `tokenAddress` parameter.\n   *\n   * @param walletAddress - The address to withdraw royalties for.\n   */\n  withdrawToken(walletAddress: string, tokenAddress: string): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients.\n   */\n  distribute(): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients in the specified currency.\n   *\n   * @param tokenAddress - The address of the currency to distribute the funds in.\n   */\n  distributeToken(tokenAddress: string): Promise<void>;\n}\n\n/**\n *\n * Access this module by calling {@link ThirdwebSDK.getSplitsModule}\n * @alpha\n */\nexport class SplitsModule extends Module<Royalty> implements ISplitsModule {\n  public static moduleType: ModuleType = ModuleType.SPLITS as const;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Royalty {\n    return Royalty__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return SplitsModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  public async getAllRecipients(): Promise<SplitRecipient[]> {\n    const recipients: SplitRecipient[] = [];\n\n    let index = BigNumber.from(0);\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const recipientAddress = await this.readOnlyContract.payee(index);\n        recipients.push(\n          await this.getRecipientSplitPercentage(recipientAddress),\n        );\n        index = index.add(1);\n      } catch (err: any) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\n          \"method\" in err &&\n          (err[\"method\"] as string).toLowerCase().includes(\"payee(uint256)\")\n        ) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return recipients;\n  }\n\n  public async getRecipientSplitPercentage(\n    address: string,\n  ): Promise<SplitRecipient> {\n    const [totalShares, walletsShares] = await Promise.all([\n      this.readOnlyContract.totalShares(),\n      this.readOnlyContract.shares(address),\n    ]);\n\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage:\n        walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() /\n        1e5,\n    };\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    const walletBalance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    const totalReleased = await this.readOnlyContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n\n    return this._pendingPayment(\n      address,\n      totalReceived,\n      await this.readOnlyContract[\"released(address)\"](address),\n    );\n  }\n\n  public async balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);\n    const walletBalance = await erc20.balanceOf(this.address);\n    const totalReleased = await this.readOnlyContract[\"totalReleased(address)\"](\n      tokenAddress,\n    );\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(\n      walletAddress,\n      totalReceived,\n      await this.readOnlyContract[\"released(address,address)\"](\n        tokenAddress,\n        walletAddress,\n      ),\n    );\n    return await getCurrencyValue(this.providerOrSigner, tokenAddress, value);\n  }\n\n  public async withdraw(address: string): Promise<void> {\n    await this.sendTransaction(\"release(address)\", [address]);\n  }\n\n  private async _pendingPayment(\n    address: string,\n    totalReceived: BigNumber,\n    alreadyReleased: BigNumber,\n  ): Promise<BigNumber> {\n    const addressReceived = totalReceived.mul(\n      await this.readOnlyContract.shares(address),\n    );\n    const totalRoyaltyAvailable = addressReceived.div(\n      await this.readOnlyContract.totalShares(),\n    );\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  public async withdrawToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<void> {\n    await this.sendTransaction(\"release(address,address)\", [\n      tokenAddress,\n      walletAddress,\n    ]);\n  }\n\n  public async distribute(): Promise<void> {\n    await this.sendTransaction(\"distribute()\", []);\n  }\n\n  public async distributeToken(tokenAddress: string): Promise<void> {\n    await this.sendTransaction(\"distribute(address)\", [tokenAddress]);\n  }\n}\n","import { Registry, Registry__factory } from \"@3rdweb/contracts\";\nimport { ContractMetadata, getContractMetadata } from \"../common/contract\";\nimport { Module } from \"./module\";\n\n/**\n * @public\n */\nexport interface IAppModule {\n  address: string;\n  version: number;\n  metadata?: ContractMetadata;\n}\n\n/**\n * The RegistryModule. This should always be created via `getRegistryModule()` on the main SDK.\n * @internal\n */\nexport class RegistryModule extends Module<Registry> {\n  /**\n   * @internal\n   */\n  protected connectContract(): Registry {\n    return Registry__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  public async getProtocolContracts(): Promise<IAppModule[]> {\n    const deployer = await this.getSignerAddress();\n    const maxVersion = await this.readOnlyContract.getProtocolControlCount(\n      deployer,\n    );\n    const versions = Array.from(Array(maxVersion.toNumber()).keys()).reverse();\n    const addresses = await Promise.all(\n      versions.map((v) =>\n        this.readOnlyContract.getProtocolControl(deployer, (v + 1).toString()),\n      ),\n    );\n    const metadatas = await Promise.all(\n      addresses.map((address) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          address,\n          this.ipfsGatewayUrl,\n        ).catch(() => undefined),\n      ),\n    );\n    return versions.map((v, i) => {\n      return {\n        address: addresses[i],\n        version: v,\n        metadata: metadatas[i],\n      };\n    });\n  }\n}\n","import { Provider } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { BytesLike, ContractReceipt, ethers, Signer } from \"ethers\";\nimport type { C } from \"ts-toolbelt\";\nimport { getContractMetadata, uploadMetadata } from \"../common\";\nimport {\n  FORWARDER_ADDRESS,\n  getContractAddressByChainId,\n} from \"../common/address\";\nimport { SUPPORTED_CHAIN_ID } from \"../common/chain\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { AppModule } from \"../modules/app\";\nimport { CollectionModule } from \"../modules/collection\";\nimport { DatastoreModule } from \"../modules/datastore\";\nimport { DropModule } from \"../modules/drop\";\nimport { MarketModule } from \"../modules/market\";\nimport { NFTModule } from \"../modules/nft\";\nimport { PackModule } from \"../modules/pack\";\nimport { SplitsModule } from \"../modules/royalty\";\nimport { CurrencyModule } from \"../modules/token\";\nimport { ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { IAppModule, RegistryModule } from \"./registry\";\nimport {\n  ForwardRequestMessage,\n  MetadataURIOrObject,\n  ProviderOrSigner,\n  ValidProviderInput,\n} from \"./types\";\n\n/**\n * The optional options that can be passed to the SDK.\n * @public\n */\nexport interface ISDKOptions {\n  /**\n   * An optional IPFS Gateway. (Default: `https://cloudflare-ipfs.com/ipfs/`).\n   */\n  ipfsGatewayUrl: string;\n\n  /**\n   * Optional Registry Contract Address\n   */\n  registryContractAddress: string;\n\n  /**\n   * maxGasPrice for transactions\n   */\n  maxGasPriceInGwei: number;\n\n  /**\n   * Optional default speed setting for transactions\n   */\n  gasSpeed: string;\n\n  /**\n   * Optional relayer url to be used for gasless transaction\n   */\n  transactionRelayerUrl: string;\n\n  /**\n   * Optional function for sending transaction to relayer\n   * @returns transaction hash of relayed transaction.\n   */\n  transactionRelayerSendFunction: (\n    message: ForwardRequestMessage,\n    signature: BytesLike,\n  ) => Promise<string>;\n\n  /**\n   * Optional trusted forwarder address overwrite\n   */\n  transactionRelayerForwarderAddress: string;\n\n  /**\n   * Optional read only RPC url\n   */\n  readOnlyRpcUrl: string;\n}\n\n/**\n * @internal\n */\nexport type AnyContract =\n  | typeof AppModule\n  | typeof CollectionModule\n  | typeof NFTModule\n  | typeof CurrencyModule\n  | typeof MarketModule\n  | typeof PackModule\n  | typeof RegistryModule\n  | typeof DropModule\n  | typeof DatastoreModule\n  | typeof SplitsModule;\n\n/**\n * The entrypoint to the SDK.\n * @public\n */\nexport class ThirdwebSDK {\n  // default options\n  private options: ISDKOptions;\n  private defaultOptions: ISDKOptions = {\n    ipfsGatewayUrl: \"https://cloudflare-ipfs.com/ipfs/\",\n    registryContractAddress: \"\",\n    maxGasPriceInGwei: 100,\n    gasSpeed: \"fastest\",\n    transactionRelayerUrl: \"\",\n    transactionRelayerSendFunction: this.defaultRelayerSendFunction.bind(this),\n    transactionRelayerForwarderAddress: FORWARDER_ADDRESS,\n    readOnlyRpcUrl: \"\",\n  };\n  private modules = new Map<string, C.Instance<AnyContract>>();\n  private providerOrSigner: ProviderOrSigner;\n\n  private _signer: Signer | null = null;\n\n  /**\n   * The active Signer, you should not need to access this unless you are deploying new modules.\n   * @internal\n   */\n  public get signer(): Signer | null {\n    return this._signer;\n  }\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  private _registry: RegistryModule | null = null;\n  private get registry(): RegistryModule | null {\n    return this._registry;\n  }\n  private set registry(value: RegistryModule | null) {\n    this._registry = value;\n  }\n\n  constructor(\n    providerOrNetwork: ValidProviderInput,\n    opts?: Partial<ISDKOptions>,\n  ) {\n    this.providerOrSigner = this.setProviderOrSigner(providerOrNetwork);\n    this.options = {\n      ...this.defaultOptions,\n      ...opts,\n    };\n  }\n  private updateModuleSigners() {\n    for (const [, _module] of this.modules) {\n      if (this.isReadOnly()) {\n        _module.clearSigner();\n      }\n      _module.setProviderOrSigner(this.providerOrSigner);\n    }\n  }\n\n  private async getChainID(): Promise<number> {\n    const provider = Provider.isProvider(this.providerOrSigner)\n      ? this.providerOrSigner\n      : this.providerOrSigner.provider;\n    invariant(provider, \"getRegistryAddress() -- No Provider\");\n\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  private async getRegistryAddress(): Promise<string | undefined> {\n    if (this.options.registryContractAddress) {\n      return this.options.registryContractAddress;\n    }\n    return getContractAddressByChainId(\n      (await this.getChainID()) as SUPPORTED_CHAIN_ID,\n    );\n  }\n  /**\n   *\n   * @param address - The contract address of the given Registry module.\n   * @returns The Registry Module.\n   * @internal\n   */\n  private async getRegistryModule(): Promise<RegistryModule> {\n    const address = await this.getRegistryAddress();\n    invariant(address, \"getRegistryModule() -- No Address\");\n    return (this.registry = this.getOrCreateModule(address, RegistryModule));\n  }\n\n  private getOrCreateModule<T extends AnyContract>(\n    address: string,\n    _Module: T,\n  ): C.Instance<T> {\n    if (this.modules.has(address)) {\n      return this.modules.get(address) as C.Instance<T>;\n    }\n    const _newModule = new _Module(\n      this.providerOrSigner,\n      address,\n      this.options,\n      this,\n    );\n    this.modules.set(address, _newModule);\n    return _newModule as C.Instance<T>;\n  }\n\n  /**\n   * you should not need this unless you are creating new modules\n   * @returns the active registry module forwarder address\n   * @internal\n   */\n  public async getForwarderAddress(): Promise<string> {\n    return await (\n      this.registry || (await this.getRegistryModule())\n    ).readOnlyContract.forwarder();\n  }\n\n  /**\n   * Call this to get the current apps.\n   * @returns All currently registered apps for the connected wallet\n   */\n  public async getApps(): Promise<IAppModule[]> {\n    return (\n      this.registry || (await this.getRegistryModule())\n    ).getProtocolContracts();\n  }\n\n  /**\n   * Call this to create a new app\n   * @param metadata - metadata URI or a JSON object\n   * @returns The transaction receipt\n   */\n  public async createApp(\n    metadata: MetadataURIOrObject,\n  ): Promise<ContractReceipt> {\n    const registryContract = (this.registry || (await this.getRegistryModule()))\n      .contract;\n    const gasPrice = await this.getGasPrice();\n    const txOpts: Record<string, any> = {};\n    // could technically be `0` so simple falsy check does not suffice\n    if (typeof gasPrice === \"number\") {\n      txOpts.gasPrice = parseUnits(gasPrice.toString(), \"gwei\");\n    }\n\n    const uri = await uploadMetadata(\n      metadata,\n      registryContract.address,\n      (await this.signer?.getAddress()) || undefined,\n    );\n\n    const txn = await registryContract.deployProtocol(uri, txOpts);\n    return await txn.wait();\n  }\n\n  /**\n   *\n   * @param speed - what speed to prefer, default: \"fastest\"\n   * @param maxGas - how much gas to use at most, default: 100\n   * @returns the optiomal gas price\n   */\n  public async getGasPrice(\n    speed?: string,\n    maxGasGwei?: number,\n  ): Promise<number | null> {\n    const _speed = speed ? speed : this.options.gasSpeed;\n    const _maxGas = maxGasGwei ? maxGasGwei : this.options.maxGasPriceInGwei;\n    return await getGasPriceForChain(await this.getChainID(), _speed, _maxGas);\n  }\n\n  /**\n   *\n   * @param providerOrSignerOrNetwork - A valid \"ethers\" Provider, Signer or a Network address to create a Provider with.\n   * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.\n   */\n  public setProviderOrSigner(providerOrSignerOrNetwork: ValidProviderInput) {\n    if (\n      Provider.isProvider(providerOrSignerOrNetwork) ||\n      Signer.isSigner(providerOrSignerOrNetwork)\n    ) {\n      // sdk instantiated with a provider / signer\n      this.providerOrSigner = providerOrSignerOrNetwork;\n    } else {\n      // sdk instantiated with a network name / network url\n      this.providerOrSigner = ethers.getDefaultProvider(\n        providerOrSignerOrNetwork,\n      );\n    }\n    // if we're setting a signer then also update that\n    if (Signer.isSigner(providerOrSignerOrNetwork)) {\n      this.signer = providerOrSignerOrNetwork;\n    } else {\n      this.signer = null;\n    }\n    this.updateModuleSigners();\n    return this.providerOrSigner;\n  }\n\n  /**\n   *\n   * @public\n   * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid \"Signer.\")\n   */\n  public isReadOnly(): boolean {\n    return !Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @public\n   * @returns The contract metadata for the given contract address.\n   */\n  public async getContractMetadata(\n    address: string,\n  ): Promise<ModuleMetadataNoType> {\n    return {\n      ...(await getContractMetadata(\n        this.providerOrSigner,\n        address,\n        this.options.ipfsGatewayUrl,\n      )),\n      address,\n    };\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given App module.\n   * @returns The App Module.\n   */\n  public getAppModule(address: string): AppModule {\n    return this.getOrCreateModule(address, AppModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given NFT module.\n   * @returns The NFT Module.\n   */\n  public getNFTModule(address: string): NFTModule {\n    return this.getOrCreateModule(address, NFTModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Collection module.\n   * @returns The Collection Module.\n   */\n  public getCollectionModule(address: string): CollectionModule {\n    return this.getOrCreateModule(address, CollectionModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Pack module.\n   * @returns The Pack Module.\n   */\n  public getPackModule(address: string): PackModule {\n    return this.getOrCreateModule(address, PackModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Currency module.\n   * @returns The Currency Module.\n   */\n  public getCurrencyModule(address: string): CurrencyModule {\n    return this.getOrCreateModule(address, CurrencyModule);\n  }\n\n  /**\n   * @alpha\n   * @param address - The contract address of the given Datastore module.\n   * @returns The Datastore Module.\n   */\n  public getDatastoreModule(address: string): DatastoreModule {\n    return this.getOrCreateModule(address, DatastoreModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Market module.\n   * @returns The Market Module.\n   */\n  public getMarketModule(address: string): MarketModule {\n    return this.getOrCreateModule(address, MarketModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Drop module.\n   * @returns The Drop Module.\n   */\n  public getDropModule(address: string): DropModule {\n    return this.getOrCreateModule(address, DropModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Royalty module.\n   * @returns The Splits Module.\n   */\n  public getSplitsModule(address: string): SplitsModule {\n    return this.getOrCreateModule(address, SplitsModule);\n  }\n\n  /**\n   * Used for SDK that requires js bridging like Unity SDK.\n   * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.\n   *\n   * @internal\n   * @param route - sdk execution route\n   * @param payload - request arguments for the function\n   * @returns\n   */\n  public invokeRoute(route: string, payload: Record<string, any>) {\n    const parts = route.split(\".\");\n\n    if (parts.length > 0 && parts[0] === \"thirdweb\") {\n      if (parts.length === 4) {\n        // thirdweb.module_name.address.function_name\n        const moduleName = parts[1];\n        const moduleAddress = parts[2];\n        const funcName = parts[3];\n        return (this.getModuleByName(moduleName, moduleAddress) as any)[\n          funcName\n        ](...(payload.arguments || []));\n      } else if (parts.length === 3) {\n        // reserved for: thirdweb.bridge.function_name\n        throw new Error(\"reserved for thirdweb.bridge.function_name\");\n      } else if (parts.length === 2) {\n        // main sdk functions: thirdweb.function_name\n        const funcName = parts[1];\n        return (this as any)[funcName](...(payload.arguments || []));\n      }\n    }\n\n    throw new Error(\"uknown route\");\n  }\n\n  // used for invoke route for unity sdk.\n  private getModuleByName(name: string, address: string) {\n    if (name === \"currency\") {\n      return this.getCurrencyModule(address);\n    } else if (name === \"nft\") {\n      return this.getNFTModule(address);\n    } else if (name === \"market\") {\n      return this.getMarketModule(address);\n    } else if (name === \"bundle\" || name === \"collection\") {\n      return this.getCollectionModule(address);\n    } else if (name === \"drop\") {\n      return this.getDropModule(address);\n    } else if (name === \"splits\") {\n      return this.getSplitsModule(address);\n    } else if (name === \"pack\") {\n      return this.getPackModule(address);\n    } else if (name === \"datastore\") {\n      return this.getDatastoreModule(address);\n    } else if (name === \"app\" || name === \"project\") {\n      return this.getAppModule(address);\n    }\n    throw new Error(\"unsupported module\");\n  }\n\n  private async defaultRelayerSendFunction(\n    message: ForwardRequestMessage,\n    signature: BytesLike,\n  ): Promise<string> {\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      type: \"forward\",\n    });\n    // console.log(\"POST\", this.options.transactionRelayerUrl, body);\n    const response = await fetch(this.options.transactionRelayerUrl, {\n      method: \"POST\",\n      body,\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\"relay transaction failed\");\n  }\n}\n\n/**\n * Deprecated, please use ThirdwebSDK instead.\n * @public\n * @deprecated use ThirdwebSDK instead\n */\nexport const NFTLabsSDK = ThirdwebSDK;\n","/**\n * The {@link https://thirdweb.com | thirdweb} typescript sdk.\n *\n * @remarks\n * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.\n *\n * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )\n *\n *\n * @example\n * To get you started here's how you would instantiate the SDK and fetch some NFTs\n *\n * 1. Install the sdk\n * ```shell\n * npm install @3rdweb/sdk\n * ```\n *\n * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.\n *\n * 3. Write the tiniest amount of code!\n * ```typescript\n *  1 | import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *  2 | import type { NFTModule, NFTMetadataOwner } from \"@3rdweb/sdk\";\n *  3 |\n *  5 | const contractAddress = \"0x...\"; // your contract address from step 2\n *  6 |\n *  7 | const sdk = new ThirdwebSDK();\n *  8 |\n *  9 | const nftModule: NFTModule = sdk.getNftModule(contractAddress);\n * 10 |\n * 11 | const nftListWithOwnerAddress: NFTMetadataOwner[] = await nftModule.getAllWithOwner();\n * 12 |\n * 13 | console.log(nftListWithOwnerAddress);\n * ```\n * ```\n * Output\n * => [\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       ...\n *    ]\n * ```\n *\n * @packageDocumentation\n */\n\nimport fetch from \"node-fetch\";\n\nexport * from \"./common\";\nexport type { InvariantError } from \"./common/invariant\";\nexport * from \"./core\";\nexport type { Module, ModuleWithRoles } from \"./core/module\";\nexport type { IAppModule } from \"./core/registry\";\nexport * from \"./core/types\";\nexport * from \"./modules\";\nexport * from \"./types\";\n\nif (!globalThis.fetch) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  globalThis.fetch = fetch;\n}\n"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","replaceIpfsWithGateway","ipfsUrl","gatewayUrl","endsWith","replace","uploadToIPFS","data","contractAddress","signerAddress","headers","formData","FormData","append","fetch","body","res","json","IpfsUri","uploadMetadata","metadata","JSON","stringify","require","InterfaceId_IERC721","arrayify","InterfaceId_IERC1155","contractUriABI","inputs","outputs","internalType","stateMutability","getContractMetadata","provider","address","ipfsGatewayUrl","contract","Contract","contractURI","uri","meta","entity","image","isContract","getCode","getCurrencyMetadata","providerOrSigner","asset","toLowerCase","AddressZero","erc20","ERC20__factory","connect","all","symbol","decimals","getCurrencyValue","price","toString","displayValue","formatUnits","ChainId","NotFoundError","_Error","ModuleType","ChainlinkVrf","Polygon","vrfCoordinator","linkTokenAddress","keyHash","fees","ethers","utils","parseEther","Mumbai","Rinkeby","Mainnet","tokenUriABI","getMetadataWithoutContract","tokenId","getTokenMetadata","getTokenUri","id","tokenURI","RolesMap","admin","minter","pauser","transfer","editor","lister","_role","getRoleHash","role","hexZeroPad","keccak256","toUtf8Bytes","getGasStationUrl","chainId","getGasPriceForChain","speed","maxGasPrice","gasStationUrl","gas","Math","min","console","CONTRACT_ADDRESSES","registry","Avalanche","AvalancheFujiTestnet","Fantom","FantomTestnet","getContractAddressByChainId","invariant","condition","message","ForwardRequest","_nonces","getAndIncrementNonce","forwarder","getNonce","nonce","BigNumber","from","add","Module","options","sdk","_providerOrSigner","_signer","readOnlyContract","setProviderOrSigner","connectContract","readOnlyRpcUrl","getDefaultProvider","exists","getProvider","getMetadata","getModuleType","getProviderOrSigner","setMetadata","sendTransaction","Signer","isSigner","signer","clearSigner","getSigner","hasValidSigner","getSignerAddress","getAddress","getChainID","getNetwork","getCallOverrides","gasSpeed","maxGasPriceInGwei","gasPriceChain","gasPrice","parseUnits","args","callOverrides","transactionRelayerUrl","sendGaslessTransaction","sendAndWaitForTransaction","functions","tx","wait","log","to","encodeFunctionData","estimateGas","mul","Forwarder__factory","forwarderAddress","transactionRelayerForwarderAddress","domain","version","verifyingContract","types","_signTypedData","signature","transactionRelayerSendFunction","txHash","waitForTransaction","parseEventLogs","eventName","logs","decodeEventLog","topics","e","ModuleWithRoles","_Module","getModuleRoles","getRoleMembers","roles","includes","roleHash","getRoleMemberCount","count","toNumber","Array","map","getRoleMember","getAllRoleMembers","grantRole","revokeRole","CommonModuleMetadata","description","externalLink","__decorate","JsonProperty","String","PropertyConvertingMode","IGNORE_NULLABLE","JsonObject","BundleModuleMetadata","sellerFeeBasisPoints","feeRecipient","Number","CurrencyModuleMetadata","DatastoreModuleMetadata","DropModuleMetadata","maxSupply","baseTokenUri","MarketModuleMetadata","marketFeeBasisPoints","NftModuleMetadata","PackModuleMetadata","SplitsModuleMetadata","recipientSplits","CurrencyModule","Coin__factory","moduleType","get","getValue","totalSupply","balance","balanceOf","allowance","spender","allowanceOf","owner","amount","setAllowance","mint","mintTo","burn","burnFrom","transferFrom","setModuleMetadata","setRestrictedTransfer","restricted","CURRENCY","AppModule","jsonConvert","JsonConvert","ProtocolControl__factory","getModuleAddress","getAllModulesOfType","getNFTAddress","NFT","getCollectionAddress","COLLECTION","getPackAddress","PACK","getCurrencyAddress","getMarketAddress","MARKET","getDropAddress","DROP","getDatastoreAddress","DATASTORE","getRoyaltyTreasury","getAllContractMetadata","addresses","_this2","metadatas","filter","d","getPackModules","m","getNFTModules","getCollectionModules","getCurrencyModules","getDatastoreModules","getMarketModules","getDropModules","getAllModuleMetadata","filterByModuleType","moduleTypesToGet","_this3","moduleAddresses","reduce","acc","curr","concat","setRoyaltyTreasury","treasury","setModuleRoyaltyTreasury","moduleAddress","withdrawFunds","currency","_prepareMetadata","_deployModule","factory","getGasPrice","txOpts","ContractFactory","abi","bytecode","deploy","deployed","addModule","addModuleTx","deployBundleModule","serializedMetadata","serializeObject","metadataUri","getForwarderAddress","NFTCollection__factory","getCollectionModule","deploySplitsModule","SPLITS","s","shares","Royalty__factory","getSplitsModule","deployNftModule","NFT__factory","getNFTModule","deployCurrencyModule","getCurrencyModule","deployMarketModule","Market__factory","getMarketModule","deployPackModule","Pack__factory","getPackModule","deployDropModule","LazyNFT__factory","getDropModule","deployDatastoreModule","DataStore__factory","getDatastoreModule","CollectionModule","creator","supply","ownedByAddress","getAll","nextTokenId","maxId","_this","isApproved","operator","isApprovedForAll","setApproval","approved","createBatch","metadataWithSupply","createAndMintBatch","createAndMint","a","uris","supplies","event","receipt","tokenIds","createWithERC20","tokenContract","tokenAmount","createWithERC721","mintBatch","mintBatchTo","ids","amounts","burnBatch","burnBatchFrom","account","transferBatchFrom","setRoyaltyBps","getOwned","_address","balanceOfBatch","fill","ownedBalances","b","gt","DatastoreModule","getUint","setUint","DropModule","Drop__factory","ownerOf","getAllUnclaimed","nextMintTokenId","unmintedId","sub","getAllClaimed","indices","_this4","tokenOfOwnerByIndex","getActiveMintCondition","getLastStartedMintConditionIndex","index","mintConditions","getAllMintConditions","conditions","maxTotalSupply","totalUnclaimedSupply","totalClaimedSupply","lazyMint","lazyMintBatch","lazyMintAmount","setPublicMintConditions","_conditions","c","startTimestamp","startTimestampInSeconds","maxMintSupply","currentMintSupply","quantityLimitPerTransaction","waitTimeSecondsLimitPerTransaction","pricePerToken","merkleRoot","claim","quantity","proofs","mintCondition","overrides","setBaseTokenUri","setMaxTotalSupply","MarketModule","transformResultToListing","listing","assetContract","listingId","seller","tokenMetadata","currencyContract","currencyMetadata","saleStart","Date","saleEnd","lte","MAX_SAFE_INTEGER","getListing","getAllListings","listings","getListingsByAsset","getListingsBySeller","getListingsByAssetContract","l","eq","filterSeller","filterTokenContract","filterTokenId","getMarketFeeBps","marketFeeBps","list","tokensPerBuyer","secondsUntilStart","secondsUntilEnd","erc165","ERC165__factory","supportsInterface","ERC721__factory","getApproved","setApprovalForAll","ERC1155__factory","unlistAll","maxQuantity","unlist","buy","totalPrice","lt","increaseAllowance","setMarketFeeBps","fee","NFTModule","getWithOwner","getAllWithOwner","PackModule","open","packId","requestId","opener","once","filters","PackOpenFulfilled","_packId","_opener","_requestId","rewardContract","rewardIds","rewardId","getPack","currentSupply","openStart","getNFTs","getPackWithRewards","packReward","source","reward","amountsPacked","assets","packParams","defaultAbiCoder","encode","secondsUntilOpenStart","rewardsPerOpen","safeBatchTransferFrom","events","_receipt$events","find","_event$args","getLinkBalance","chainlink","depositLink","withdrawLink","SplitsModule","getAllRecipients","recipients","payee","recipientAddress","getRecipientSplitPercentage","_context2","totalShares","splitPercentage","div","getBalance","walletBalance","totalReceived","_pendingPayment","balanceOfToken","walletAddress","tokenAddress","withdraw","alreadyReleased","addressReceived","totalRoyaltyAvailable","withdrawToken","distribute","distributeToken","RegistryModule","Registry__factory","getProtocolContracts","deployer","getProtocolControlCount","versions","v","getProtocolControl","ThirdwebSDK","providerOrNetwork","opts","defaultOptions","registryContractAddress","defaultRelayerSendFunction","bind","modules","Map","_registry","updateModuleSigners","_module","isReadOnly","Provider","isProvider","getRegistryAddress","getRegistryModule","getOrCreateModule","has","_newModule","set","getApps","createApp","registryContract","_this$signer","deployProtocol","txn","maxGasGwei","_speed","_maxGas","providerOrSignerOrNetwork","getAppModule","invokeRoute","route","payload","parts","split","funcName","getModuleByName","arguments","request","response","ok","parse","NFTLabsSDK","$enum","getKeyOrDefault","moduleName","getValueOrDefault","toUpperCase"],"mappings":"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"}