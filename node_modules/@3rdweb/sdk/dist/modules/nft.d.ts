import { NFT } from "@3rdweb/contracts";
import { TransactionReceipt } from "@ethersproject/providers";
import { BigNumber, BigNumberish } from "ethers";
import { ModuleType, Role } from "../common";
import { NFTMetadata, NFTMetadataOwner } from "../common/nft";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
/**
 * Access this module by calling {@link ThirdwebSDK.getNFTModule}
 * @public
 */
export declare class NFTModule extends ModuleWithRoles<NFT> {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "minter", "pauser", "transfer"];
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): NFT;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    get(tokenId: string): Promise<NFTMetadata>;
    getAll(): Promise<NFTMetadata[]>;
    getWithOwner(tokenId: string): Promise<NFTMetadataOwner>;
    getAllWithOwner(): Promise<NFTMetadataOwner[]>;
    /**
     * Checks the owner of a particular NFT
     *
     * @param tokenId - ID of the NFT to get the owner of
     * @returns the owner of the token, or a zero address if the
     * token has been burned
     */
    ownerOf(tokenId: string): Promise<string>;
    getOwned(_address?: string): Promise<NFTMetadata[]>;
    totalSupply(): Promise<BigNumber>;
    balanceOf(address: string): Promise<BigNumber>;
    balance(): Promise<BigNumber>;
    isApproved(address: string, operator: string): Promise<boolean>;
    setApproval(operator: string, approved?: boolean): Promise<TransactionReceipt>;
    transfer(to: string, tokenId: string): Promise<TransactionReceipt>;
    mint(metadata: MetadataURIOrObject): Promise<NFTMetadata>;
    mintTo(to: string, metadata: MetadataURIOrObject): Promise<NFTMetadata>;
    mintBatch(metadatas: MetadataURIOrObject[]): Promise<NFTMetadata[]>;
    mintBatchTo(to: string, metadatas: MetadataURIOrObject[]): Promise<NFTMetadata[]>;
    burn(tokenId: BigNumberish): Promise<TransactionReceipt>;
    transferFrom(from: string, to: string, tokenId: BigNumberish): Promise<TransactionReceipt>;
    setRestrictedTransfer(restricted?: boolean): Promise<TransactionReceipt>;
    setRoyaltyBps(amount: number): Promise<TransactionReceipt>;
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<TransactionReceipt>;
}
