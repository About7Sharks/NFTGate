import { Pack as PackContract } from "@3rdweb/contracts";
import { BigNumber, BigNumberish, BytesLike } from "ethers";
import { CurrencyValue, ModuleType, Role } from "../common";
import { NFTMetadata } from "../common/nft";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
/**
 * @beta
 */
export interface PackMetadata {
    id: string;
    creator: string;
    currentSupply: BigNumber;
    openStart: Date | null;
    metadata: NFTMetadata;
}
/**
 * @public
 */
export interface PackNFTMetadata {
    supply: BigNumber;
    metadata: NFTMetadata;
}
/**
 * @beta
 */
export interface IPackCreateArgs {
    assetContract: string;
    metadata: MetadataURIOrObject;
    assets: {
        tokenId: BigNumberish;
        amount: BigNumberish;
    }[];
    secondsUntilOpenStart?: number;
    rewardsPerOpen?: number;
}
/**
 * @beta
 */
export interface IPackBatchArgs {
    tokenId: BigNumberish;
    amount: BigNumberish;
}
/**
 * Access this module by calling {@link ThirdwebSDK.getPackModule}
 * @beta
 */
export declare class PackModule extends ModuleWithRoles<PackContract> {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "minter", "pauser", "transfer"];
    /**
     * @override
     * @internal
     */
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): PackContract;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    open(packId: string): Promise<NFTMetadata[]>;
    get(packId: string): Promise<PackMetadata>;
    getAll(): Promise<PackMetadata[]>;
    getNFTs(packId: string): Promise<PackNFTMetadata[]>;
    balanceOf(address: string, tokenId: string): Promise<BigNumber>;
    balance(tokenId: string): Promise<BigNumber>;
    isApproved(address: string, operator: string): Promise<boolean>;
    setApproval(operator: string, approved?: boolean): Promise<void>;
    transfer(to: string, tokenId: string, amount: BigNumber): Promise<void>;
    create(args: IPackCreateArgs): Promise<PackMetadata>;
    transferFrom(from: string, to: string, args: IPackBatchArgs, data?: BytesLike): Promise<void>;
    transferBatchFrom(from: string, to: string, args: IPackBatchArgs[], data?: BytesLike): Promise<void>;
    getLinkBalance(): Promise<CurrencyValue>;
    depositLink(amount: BigNumberish): Promise<void>;
    withdrawLink(to: string, amount: BigNumberish): Promise<void>;
    setRoyaltyBps(amount: number): Promise<void>;
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<void>;
    setRestrictedTransfer(restricted?: boolean): Promise<void>;
}
