import { NFTCollection as NFTCollectionContract } from "@3rdweb/contracts";
import { BigNumber, BigNumberish } from "@ethersproject/bignumber";
import { TransactionReceipt } from "@ethersproject/providers";
import { BytesLike } from "ethers";
import { ModuleType, Role } from "../common";
import { NFTMetadata } from "../common/nft";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
/**
 * @beta
 */
export interface CollectionMetadata {
    creator: string;
    supply: BigNumber;
    metadata: NFTMetadata;
    ownedByAddress: number;
}
/**
 * @beta
 */
export interface INFTCollectionCreateArgs {
    metadata: MetadataURIOrObject;
    supply: BigNumberish;
}
/**
 * @beta
 */
export interface INFTCollectionBatchArgs {
    tokenId: BigNumberish;
    amount: BigNumberish;
}
/**
 * Access this module by calling {@link ThirdwebSDK.getCollectionModule}
 * @beta
 */
export declare class CollectionModule extends ModuleWithRoles<NFTCollectionContract> {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "minter", "pauser", "transfer"];
    /**
     * @override
     * @internal
     */
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): NFTCollectionContract;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    /**
     *
     * Get a single collection item by tokenId.
     * @param tokenId - the unique token id of the nft
     * @returns A promise that resolves to a `CollectionMetadata`.
     */
    get(tokenId: string, address?: string): Promise<CollectionMetadata>;
    /**
     * Return all items in the collection.
     * @returns An array of `INFTCollection`.
     */
    getAll(address?: string): Promise<CollectionMetadata[]>;
    balanceOf(address: string, tokenId: string): Promise<BigNumber>;
    balance(tokenId: string): Promise<BigNumber>;
    isApproved(address: string, operator: string): Promise<boolean>;
    setApproval(operator: string, approved?: boolean): Promise<TransactionReceipt>;
    transfer(to: string, tokenId: string, amount: BigNumberish): Promise<TransactionReceipt>;
    create(metadata: MetadataURIOrObject): Promise<CollectionMetadata>;
    createBatch(metadatas: MetadataURIOrObject[]): Promise<CollectionMetadata[]>;
    createAndMint(metadataWithSupply: INFTCollectionCreateArgs): Promise<CollectionMetadata>;
    createAndMintBatch(metadataWithSupply: INFTCollectionCreateArgs[]): Promise<CollectionMetadata[]>;
    createWithERC20(tokenContract: string, tokenAmount: BigNumberish, args: INFTCollectionCreateArgs): Promise<void>;
    createWithERC721(tokenContract: string, tokenId: BigNumberish, metadata: MetadataURIOrObject): Promise<void>;
    mint(args: INFTCollectionBatchArgs): Promise<void>;
    mintTo(to: string, args: INFTCollectionBatchArgs, data?: BytesLike): Promise<void>;
    mintBatch(args: INFTCollectionBatchArgs[]): Promise<void>;
    mintBatchTo(to: string, args: INFTCollectionBatchArgs[], data?: BytesLike): Promise<void>;
    burn(args: INFTCollectionBatchArgs): Promise<TransactionReceipt>;
    burnBatch(args: INFTCollectionBatchArgs[]): Promise<TransactionReceipt>;
    burnFrom(account: string, args: INFTCollectionBatchArgs): Promise<TransactionReceipt>;
    burnBatchFrom(account: string, args: INFTCollectionBatchArgs[]): Promise<TransactionReceipt>;
    transferFrom(from: string, to: string, args: INFTCollectionBatchArgs, data?: BytesLike): Promise<TransactionReceipt>;
    transferBatchFrom(from: string, to: string, args: INFTCollectionBatchArgs[], data?: BytesLike): Promise<TransactionReceipt>;
    setRoyaltyBps(amount: number): Promise<TransactionReceipt>;
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<TransactionReceipt>;
    setRestrictedTransfer(restricted?: boolean): Promise<TransactionReceipt>;
    /**
     * `getOwned` is a convenience method for getting all owned tokens
     * for a particular wallet.
     *
     * @param _address - The address to check for token ownership
     * @returns An array of CollectionMetadata objects that are owned by the address
     */
    getOwned(_address?: string): Promise<CollectionMetadata[]>;
}
