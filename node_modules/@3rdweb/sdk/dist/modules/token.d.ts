import { Coin } from "@3rdweb/contracts";
import { TransactionReceipt } from "@ethersproject/providers";
import { BigNumber, BigNumberish } from "ethers";
import { ModuleType, Role } from "../common";
import { Currency, CurrencyValue } from "../common/currency";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
/**
 *
 * Access this module by calling {@link ThirdwebSDK.getCurrencyModule}
 * @public
 */
export declare class CurrencyModule extends ModuleWithRoles<Coin> {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "minter", "pauser", "transfer"];
    /**
     * @override
     * @internal
     */
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): Coin;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    get(): Promise<Currency>;
    getValue(value: BigNumberish): Promise<CurrencyValue>;
    totalSupply(): Promise<BigNumber>;
    balance(): Promise<CurrencyValue>;
    balanceOf(address: string): Promise<CurrencyValue>;
    allowance(spender: string): Promise<BigNumber>;
    allowanceOf(owner: string, spender: string): Promise<BigNumber>;
    transfer(to: string, amount: BigNumber): Promise<TransactionReceipt>;
    setAllowance(spender: string, amount: BigNumber): Promise<TransactionReceipt>;
    mint(amount: BigNumberish): Promise<void>;
    mintTo(to: string, amount: BigNumberish): Promise<void>;
    burn(amount: BigNumberish): Promise<TransactionReceipt>;
    burnFrom(from: string, amount: BigNumberish): Promise<TransactionReceipt>;
    transferFrom(from: string, to: string, amount: BigNumberish): Promise<TransactionReceipt>;
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<TransactionReceipt>;
    setRestrictedTransfer(restricted?: boolean): Promise<TransactionReceipt>;
}
