import { Royalty } from "@3rdweb/contracts";
import { BigNumber } from "ethers";
import { ModuleType } from "../common";
import { Currency, CurrencyValue } from "../common/currency";
import { Module } from "../core/module";
import { SplitRecipient } from "../types/SplitRecipient";
export interface ISplitsModule {
    /**
     * Returns a list of all recipients with their
     * respective split percentages.
     *
     */
    getAllRecipients(): Promise<SplitRecipient[]>;
    /**
     * Get the split percentage of a recipient.
     *
     * @param address - The address of the recipient.
     */
    getRecipientSplitPercentage(address: string): Promise<SplitRecipient>;
    /**
     * Returns the amount of royalty available for a recipient
     * to withdraw in the native currency.
     *
     * @param address - The address of the recipient to check the balance of.
     */
    balanceOf(address: string): Promise<BigNumber>;
    /**
     * Returns the amount of royalty available for a recipient
     * to withdraw in the native currency in a specific currency.
     *
     * @param walletAddress - The address of the recipient to check the balance of.
     * @param tokenAddress - The address of the currency to check the balance in.
     */
    balanceOfToken(walletAddress: string, tokenAddress: string): Promise<CurrencyValue>;
    /**
     * Transaction that will withdraw the split amount of royalty that
     * the `address` is owed and transfer it to the wallet.
     *
     * @param address - The address to withdraw royalties for.
     */
    withdraw(address: string): Promise<void>;
    /**
     * Transaction that will withdraw the split amount of royalty that
     * the `address` is owed and transfer it to the wallet, in the
     * currency specified by `tokenAddress`.
     *
     * For example: If the native currency of a chain is ETH but the user
     * wants to withdraw their split in $MATIC, they should pass
     * the address of the $MATIC token as the `tokenAddress` parameter.
     *
     * @param walletAddress - The address to withdraw royalties for.
     */
    withdrawToken(walletAddress: string, tokenAddress: string): Promise<void>;
    /**
     * Distributes all funds to the recipients.
     */
    distribute(): Promise<void>;
    /**
     * Distributes all funds to the recipients in the specified currency.
     *
     * @param tokenAddress - The address of the currency to distribute the funds in.
     */
    distributeToken(tokenAddress: string): Promise<void>;
}
/**
 *
 * Access this module by calling {@link ThirdwebSDK.getSplitsModule}
 * @alpha
 */
export declare class SplitsModule extends Module<Royalty> implements ISplitsModule {
    static moduleType: ModuleType;
    /**
     * @internal
     */
    protected connectContract(): Royalty;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    get(): Promise<Currency>;
    getAllRecipients(): Promise<SplitRecipient[]>;
    getRecipientSplitPercentage(address: string): Promise<SplitRecipient>;
    balanceOf(address: string): Promise<BigNumber>;
    balanceOfToken(walletAddress: string, tokenAddress: string): Promise<CurrencyValue>;
    withdraw(address: string): Promise<void>;
    private _pendingPayment;
    withdrawToken(walletAddress: string, tokenAddress: string): Promise<void>;
    distribute(): Promise<void>;
    distributeToken(tokenAddress: string): Promise<void>;
}
