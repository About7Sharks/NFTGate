import { Market } from "@3rdweb/contracts";
import { TransactionReceipt } from "@ethersproject/providers";
import { BigNumber, BigNumberish } from "ethers";
import { ModuleType, Role } from "../common";
import { CurrencyValue } from "../common/currency";
import { NFTMetadata } from "../common/nft";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
/**
 * Filter options for the Market module.
 * @public
 */
export interface ListingFilter {
    seller?: string;
    tokenContract?: string;
    tokenId?: string;
}
/**
 * Metadata for items listed on a Market module.
 * @public
 */
export interface ListingMetadata {
    id: string;
    seller: string;
    tokenContract: string;
    tokenId: string;
    tokenMetadata?: NFTMetadata;
    quantity: BigNumber;
    currencyContract: string;
    currencyMetadata: CurrencyValue | null;
    price: BigNumber;
    saleStart: Date | null;
    saleEnd: Date | null;
}
/**
 * Access this module by calling {@link ThirdwebSDK.getMarketModule}
 * @public
 */
export declare class MarketModule extends ModuleWithRoles<Market> {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "lister", "pauser"];
    /**
     * @override
     * @internal
     */
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): Market;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    private transformResultToListing;
    /**
     * @deprecated Use {@link MarketModule.get} instead.
     */
    getListing(listingId: string): Promise<ListingMetadata>;
    /**
     * @deprecated Use {@link MarketModule.getAll} instead.
     */
    getAllListings(filter?: ListingFilter): Promise<ListingMetadata[]>;
    get(listingId: string): Promise<ListingMetadata>;
    getAll(filter?: ListingFilter): Promise<ListingMetadata[]>;
    getMarketFeeBps(): Promise<BigNumber>;
    list(assetContract: string, tokenId: string, currencyContract: string, price: BigNumberish, quantity: BigNumberish, tokensPerBuyer?: BigNumberish, secondsUntilStart?: BigNumberish, secondsUntilEnd?: BigNumberish): Promise<ListingMetadata>;
    unlistAll(listingId: string): Promise<void>;
    unlist(listingId: string, quantity: BigNumberish): Promise<void>;
    buy(listingId: string, quantity: BigNumberish): Promise<ListingMetadata>;
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<TransactionReceipt>;
    setMarketFeeBps(fee: number): Promise<TransactionReceipt>;
}
