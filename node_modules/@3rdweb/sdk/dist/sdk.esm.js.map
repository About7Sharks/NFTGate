{"version":3,"file":"sdk.esm.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/common/ipfs.ts","../src/common/contract.ts","../src/common/currency.ts","../src/common/error.ts","../src/common/chain.ts","../src/common/chainlink.ts","../src/common/module-type.ts","../src/common/nft.ts","../src/common/role.ts","../src/common/gas-price.ts","../src/common/address.ts","../src/common/invariant.ts","../src/common/forwarder.ts","../src/core/module.ts","../src/types/module-deployments/CommonModuleMetadata.ts","../src/types/module-deployments/BundleModuleMetadata.ts","../src/types/module-deployments/CurrencyModuleMetadata.ts","../src/types/module-deployments/DatastoreModuleMetadata.ts","../src/types/module-deployments/DropModuleMetadata.ts","../src/types/module-deployments/MarketModuleMetadata.ts","../src/types/module-deployments/NftModuleMetadata.ts","../src/types/module-deployments/PackModuleMetadata.ts","../src/types/module-deployments/SplitsModuleMetadata.ts","../src/modules/token.ts","../src/modules/app.ts","../src/modules/bundle.ts","../src/modules/datastore.ts","../src/modules/drop.ts","../src/modules/market.ts","../src/modules/nft.ts","../src/modules/pack.ts","../src/modules/royalty.ts","../src/core/registry.ts","../src/core/index.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { MetadataURIOrObject } from \"../core/types\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\n/**\n *\n * @param ipfsUrl - the ipfs:// uri\n * @param gatewayUrl - the gateway url\n * @returns the fully formed IPFS url\n * @internal\n */\nexport function replaceIpfsWithGateway(ipfsUrl: string, gatewayUrl: string) {\n  if (!ipfsUrl || typeof ipfsUrl !== \"string\") {\n    return \"\";\n  }\n  if (!gatewayUrl.endsWith(\"/\")) {\n    gatewayUrl = `${gatewayUrl}/`;\n  }\n  return ipfsUrl.replace(\"ipfs://\", gatewayUrl);\n}\n\n/**\n * A helper function to upload arbitrary data to IPFS and return the resulting IPFS uri.\n * @param data - stringified JSON || File\n * @param contractAddress - (Optional) the contract address to associate the data with\n * @param signerAddress - (Optional) the wallet address of the actor that is uploading the file\n * @returns The `ipfs://<hash>` uri of the uploaded file\n * @public\n */\nexport async function uploadToIPFS(\n  data: string | File,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  const headers = {\n    \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    \"X-Public-Address\": signerAddress || \"\",\n  };\n\n  const formData = new FormData();\n  formData.append(\"file\", data);\n  const res = await fetch(\"https://upload.nftlabs.co/upload\", {\n    method: \"POST\",\n    body: formData as any,\n    headers,\n  });\n\n  const body = await res.json();\n  return body.IpfsUri;\n}\n\n/**\n * @internal\n */\nexport async function uploadMetadata(\n  metadata: MetadataURIOrObject,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  }\n\n  return await uploadToIPFS(\n    JSON.stringify(metadata),\n    contractAddress,\n    signerAddress,\n  );\n}\n","import { arrayify } from \"@ethersproject/bytes\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { ProviderOrSigner } from \"../core/types\";\nimport { replaceIpfsWithGateway } from \"./ipfs\";\n\n/**\n * The typical contract metadata found on the modules.\n * @public\n */\nexport interface ContractMetadata {\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  external_link?: string;\n  seller_fee_basis_points?: number;\n  fee_recipient?: string;\n}\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC721 = arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC1155 = arrayify(\"0xd9b67a26\");\n\nconst contractUriABI = [\n  {\n    inputs: [] as [],\n    name: \"contractURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * @internal\n */\nexport async function getContractMetadata(\n  provider: ProviderOrSigner,\n  address: string,\n  ipfsGatewayUrl: string,\n): Promise<ContractMetadata> {\n  const contract = new Contract(address, contractUriABI, provider);\n  const uri = await contract.contractURI();\n  const gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);\n  const meta = await fetch(gatewayUrl);\n  const metadata = await meta.json();\n  const entity: ContractMetadata = {\n    ...metadata,\n    uri,\n    image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl),\n  };\n  return entity;\n}\n\n/**\n * @internal\n */\nexport async function isContract(\n  provider: Provider,\n  address: string,\n): Promise<boolean> {\n  return (await provider.getCode(address)) !== \"0x\";\n}\n","import { ERC20__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumber } from \"ethers\";\nimport { ProviderOrSigner } from \"../core/types\";\n\n/**\n * Currency metadata.\n * @public\n */\nexport interface Currency {\n  name: string;\n  symbol: string;\n  decimals: number;\n}\n\n/**\n * Currency metadata & value.\n * @public\n */\nexport interface CurrencyValue extends Currency {\n  value: string;\n  displayValue: string;\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyMetadata(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n): Promise<Currency> {\n  try {\n    if (asset.toLowerCase() !== AddressZero) {\n      const erc20 = ERC20__factory.connect(asset, providerOrSigner);\n      const [name, symbol, decimals] = await Promise.all([\n        erc20.name(),\n        erc20.symbol(),\n        erc20.decimals(),\n      ]);\n      return {\n        name,\n        symbol,\n        decimals,\n      };\n    }\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n  return {\n    name: \"\",\n    symbol: \"\",\n    decimals: 0,\n  };\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyValue(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n  price: BigNumber,\n): Promise<CurrencyValue> {\n  const metadata = await getCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: price.toString(),\n    displayValue: formatUnits(price, metadata.decimals),\n  };\n}\n","/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @public\n */\nexport class NotFoundError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"NOT_FOUND\");\n  }\n}\n","export enum ChainId {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Kovan = 42,\n  BSC = 56,\n  xDai = 100,\n  Polygon = 137,\n  Moonriver = 1285,\n  Mumbai = 80001,\n  Harmony = 1666600000,\n  Localhost = 1337,\n  Hardhat = 31337,\n  Fantom = 250,\n  FantomTestnet = 4002,\n  Avalanche = 43114,\n  AvalancheFujiTestnet = 43113,\n}\n\nexport type SUPPORTED_CHAIN_ID =\n  | ChainId.Mainnet\n  | ChainId.Rinkeby\n  | ChainId.Mumbai\n  | ChainId.Polygon\n  | ChainId.Fantom\n  | ChainId.FantomTestnet\n  | ChainId.Avalanche\n  | ChainId.AvalancheFujiTestnet;\n\nexport const SUPPORTED_CHAIN_IDS: SUPPORTED_CHAIN_ID[] = [\n  ChainId.Mainnet,\n  ChainId.Rinkeby,\n  ChainId.Polygon,\n  ChainId.Mumbai,\n  ChainId.Fantom,\n  ChainId.FantomTestnet,\n  ChainId.Avalanche,\n  ChainId.AvalancheFujiTestnet,\n];\n","import { BigNumber, ethers } from \"ethers\";\nimport { ChainId } from \"./chain\";\n\n/**\n *\n * @internal\n */\nexport type ChainlinkInfo = {\n  vrfCoordinator: string;\n  linkTokenAddress: string;\n  keyHash: string;\n  fees: BigNumber;\n};\n\n/**\n *\n * @internal\n */\nexport const ChainlinkVrf: Record<number, ChainlinkInfo> = {\n  [ChainId.Polygon]: {\n    vrfCoordinator: \"0x3d2341ADb2D31f1c5530cDC622016af293177AE0\",\n    linkTokenAddress: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n    keyHash:\n      \"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Mumbai]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Rinkeby]: {\n    vrfCoordinator: \"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\",\n    linkTokenAddress: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n    keyHash:\n      \"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\",\n    fees: ethers.utils.parseEther(\"0.1\"),\n  },\n  [ChainId.Mainnet]: {\n    vrfCoordinator: \"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\",\n    linkTokenAddress: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    keyHash:\n      \"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\",\n    fees: ethers.utils.parseEther(\"2\"),\n  },\n};\n","import { $enum } from \"ts-enum-util\";\n\n/**\n * The type of Modules that are available.\n * @public\n */\nexport enum ModuleType {\n  CURRENCY = 0,\n  COLLECTION = 1,\n  BUNDLE = 1,\n  NFT = 2,\n  DYNAMIC_NFT = 3,\n  ACCESS_NFT = 4,\n  PACK = 5,\n  MARKET = 6,\n  DROP = 7,\n  DATASTORE = 8,\n  SPLITS = 9,\n}\n/**\n *\n * @param moduleName - a supported module name\n * @returns The {@link ModuleType} or undefined\n * @public\n */\n\nexport function convertNameToModuleType(\n  moduleName?: string,\n): ModuleType | undefined {\n  return $enum(ModuleType).getValueOrDefault(\n    moduleName?.toUpperCase(),\n    undefined,\n  );\n}\n\n/**\n *\n * @param moduleType - A {@link ModuleType}\n * @returns The name of the given {@link ModuleType} or undefined\n * @public\n */\nexport function convertModuleTypeToName(\n  moduleType: ModuleType,\n): keyof typeof ModuleType | undefined {\n  return $enum(ModuleType).getKeyOrDefault(moduleType, undefined);\n}\n","import { LazyNFT, NFT, NFTCollection } from \"@3rdweb/contracts\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { JSONValue, ProviderOrSigner } from \"../core/types\";\nimport { NotFoundError } from \"./error\";\nimport { replaceIpfsWithGateway } from \"./ipfs\";\n\n// support erc721 and erc1155\nconst tokenUriABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"uri\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * The shared NFT metadata.\n * @public\n */\nexport interface NFTMetadata {\n  id: string;\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  properties?: Record<string, JSONValue>;\n}\n\n/**\n * The shared NFT metadata, including the current owner address.\n * @public\n */\nexport interface NFTMetadataOwner {\n  owner: string;\n  metadata: NFTMetadata;\n}\n\n/**\n * @internal\n */\nexport type NFTContractTypes = NFT | NFTCollection | LazyNFT;\n\n/**\n/* @internal\n */\nexport async function getMetadataWithoutContract(\n  provider: ProviderOrSigner,\n  contractAddress: string,\n  tokenId: string,\n  ipfsGatewayUrl: string,\n): Promise<NFTMetadata> {\n  const contract = new Contract(contractAddress, tokenUriABI, provider) as NFT;\n  return getTokenMetadata(contract, tokenId, ipfsGatewayUrl);\n}\n\n/**\n/* @internal\n */\nexport async function getTokenMetadata(\n  contract: NFTContractTypes,\n  tokenId: string,\n  ipfsGatewayUrl: string,\n): Promise<NFTMetadata> {\n  const uri = await getTokenUri(contract, tokenId);\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  const gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);\n  const meta = await fetch(gatewayUrl);\n  const metadata = await meta.json();\n  const entity: NFTMetadata = {\n    ...metadata,\n    id: tokenId,\n    uri,\n    image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl),\n  };\n  return entity;\n}\n\n/**\n/* @internal\n */\nexport async function getTokenUri(\n  contract: NFTContractTypes,\n  tokenId: string,\n): Promise<string> {\n  let uri = \"\";\n  try {\n    uri = await contract.tokenURI(tokenId);\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  if (!uri) {\n    try {\n      uri = await (contract as NFTCollection).uri(tokenId);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n  return uri;\n}\n","import { BytesLike, ethers } from \"ethers\";\n\n/**\n * Roles are used to handle permissions on modules that extend {@link ModuleWithRoles}.\n * @public\n */\nexport interface IRoles {\n  /**\n   * This admin role allows the wallet to modify contract metadata and {@link ModuleWithRoles.grantRole | grant} and {@link ModuleWithRoles.revokeRole | revoke} Roles.\n   * @public\n   */\n  admin: \"admin\";\n  /**\n   * The minter role allows the wallet to mint new assets.\n   * ({@link NFTModule.mint | NFTs}, {@link CurrencyModule.mint | Tokens}, {@link PackModule.create | Packs}, etc)\n   * @public\n   */\n  minter: \"minter\";\n  /**\n   * The pauser role allows the wallet to pause all external contract interactions.\n   * @public\n   */\n  pauser: \"pauser\";\n  /**\n   * The transfer role allows the wallet to transfer and receive assets\n   * **even** when the module is set to be non-transferrable.\n   * @public\n   */\n  transfer: \"transfer\";\n  /**\n   * The editor role allows the wallet to edit data in the {@link DatastoreModule}.\n   * @alpha\n   */\n  editor: \"editor\";\n  /**\n   * The lister role allows the wallet to list assets on the {@link MarketModule}.\n   * @public\n   */\n  lister: \"lister\";\n}\n\n/**\n * {@inheritDoc IRoles}\n * @public\n */\nexport type Role = keyof IRoles;\n\n/**\n *\n * @internal\n */\nexport const RolesMap: IRoles = {\n  admin: \"admin\",\n  minter: \"minter\",\n  pauser: \"pauser\",\n  transfer: \"transfer\",\n  editor: \"editor\",\n  lister: \"lister\",\n} as const;\n\n/**\n *\n * @internal\n */\nconst _role: Record<Role, string> = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  editor: \"EDITOR_ROLE\",\n  lister: \"LISTER_ROLE\",\n};\n\n/**\n * @internal\n */\nexport function getRoleHash(role: Role): BytesLike {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers.utils.keccak256(ethers.utils.toUtf8Bytes(_role[role]));\n}\n","import { ChainId } from \"./chain\";\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId?: number): string | null {\n  if (!chainId) {\n    return null;\n  }\n\n  if (chainId === ChainId.Polygon) {\n    return \"https://gasstation-mainnet.matic.network\";\n  }\n\n  return null;\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nexport async function getGasPriceForChain(\n  chainId: number,\n  speed: string,\n  maxGasPrice: number,\n): Promise<number | null> {\n  const gasStationUrl = getGasStationUrl(chainId);\n  if (!gasStationUrl) {\n    return null;\n  }\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    const gas = data[speed];\n    if (gas > 0) {\n      return Math.min(gas, maxGasPrice);\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return null;\n}\n","import { ChainId, SUPPORTED_CHAIN_ID } from \"./chain\";\n\nexport const FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\nexport const CONTRACT_ADDRESSES: Record<\n  SUPPORTED_CHAIN_ID,\n  Record<\"registry\", string>\n> = {\n  [ChainId.Mainnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Rinkeby]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Polygon]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Mumbai]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Avalanche]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Fantom]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.FantomTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n};\n\nexport function getContractAddressByChainId(\n  chainId: ChainId,\n): string | undefined {\n  return CONTRACT_ADDRESSES[chainId as SUPPORTED_CHAIN_ID][\"registry\"];\n}\n","const genericMessage = \"Invariant Violation\";\n\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\n/**\n * Error that may get thrown when an invariant assummption fails.\n * @public\n */\nexport class InvariantError extends Error {\n  /**\n   * @internal\n   */\n  framesToPop = 1;\n  /**\n   * @internal\n   */\n  name = genericMessage;\n  /**\n   * @internal\n   */\n  constructor(message: string = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message,\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n/**\n * @internal\n * @param condition - any truthy condition to assert\n * @param message  - optional message to use if the condition is falsy\n */\nexport function invariant(condition: any, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n","import { Forwarder } from \"@3rdweb/contracts\";\nimport { BigNumber } from \"ethers\";\n\n/**\n * @internal\n */\nexport const ForwardRequest = [\n  { name: \"from\", type: \"address\" },\n  { name: \"to\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"gas\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"data\", type: \"bytes\" },\n];\n\nconst _nonces: Record<string, BigNumber> = {};\n\nexport async function getAndIncrementNonce(\n  forwarder: Forwarder,\n  address: string,\n): Promise<BigNumber> {\n  if (!(address in _nonces)) {\n    _nonces[address] = await forwarder.getNonce(address);\n  }\n\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n","import { AccessControlEnumerable, Forwarder__factory } from \"@3rdweb/contracts\";\nimport {\n  JsonRpcSigner,\n  Log,\n  Provider,\n  TransactionReceipt,\n} from \"@ethersproject/providers\";\nimport { BaseContract, BigNumber, CallOverrides, ethers, Signer } from \"ethers\";\nimport type { ISDKOptions, ThirdwebSDK } from \".\";\nimport { getContractMetadata, isContract } from \"../common/contract\";\nimport { ForwardRequest, getAndIncrementNonce } from \"../common/forwarder\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { ModuleType } from \"../common/module-type\";\nimport { getRoleHash, Role } from \"../common/role\";\nimport { ModuleMetadata } from \"../types/ModuleMetadata\";\nimport type { MetadataURIOrObject, ProviderOrSigner } from \"./types\";\n\n/**\n * The root Module class. All other Modules extend this.\n * @remarks This should never be instantiated directly.\n * @public\n */\nexport class Module<TContract extends BaseContract = BaseContract> {\n  /**\n   * @readonly\n   */\n  public readonly address: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly ipfsGatewayUrl: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly options: ISDKOptions;\n\n  protected readonly sdk: ThirdwebSDK;\n\n  /**\n   * @internal\n   */\n  private _providerOrSigner: ProviderOrSigner | null = null;\n  /**\n   * @internal\n   */\n  protected get providerOrSigner(): ProviderOrSigner {\n    return this.signer || this._providerOrSigner || this.getProviderOrSigner();\n  }\n\n  private set providerOrSigner(value: ProviderOrSigner) {\n    this._providerOrSigner = value;\n  }\n\n  /**\n   * @internal\n   */\n  private _signer: Signer | null = null;\n  /**\n   * @internal\n   */\n  protected get signer(): Signer | null {\n    return this._signer;\n  }\n\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  /**\n   * Contract connects to the SDK signer or provider\n   * @internal\n   */\n  public contract: TContract;\n  /**\n   * Contract connects to the {@link ISDKOptions.readOnlyRpcUrl} if provided, otherwise connect to signer or provider\n   * @internal\n   */\n  public readOnlyContract: TContract;\n\n  /**\n   * @internal\n   */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    this.address = address;\n    this.options = options;\n    this.ipfsGatewayUrl = options.ipfsGatewayUrl;\n    this.setProviderOrSigner(providerOrSigner);\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n    this.sdk = sdk;\n  }\n\n  /**\n   * @public\n   * @returns whether the given contract exists on-chain\n   */\n  public async exists(): Promise<boolean> {\n    const provider = await this.getProvider();\n    invariant(provider, \"exists() -- No Provider\");\n    return isContract(provider, this.address);\n  }\n\n  /**\n   * @public\n   * Get the metadata of the contract.\n   */\n  public async getMetadata(): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const contract = this.connectContract();\n    const type = this.getModuleType();\n\n    return {\n      metadata: await getContractMetadata(\n        this.getProviderOrSigner(),\n        contract.address,\n        this.options.ipfsGatewayUrl,\n      ),\n      address: contract.address,\n      type,\n    };\n  }\n\n  /**\n   * @public\n   * Set new metadata on the contract and return it if successful.\n   * @param metadata - The metadata to set.\n   */\n  public async setMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n    return this.getMetadata();\n  }\n\n  /**\n   * @internal\n   */\n  public setProviderOrSigner(providerOrSigner: ProviderOrSigner) {\n    this.providerOrSigner = providerOrSigner;\n    if (Signer.isSigner(providerOrSigner)) {\n      this.signer = providerOrSigner;\n    }\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n  }\n\n  /**\n   * @internal\n   */\n  public clearSigner(): void {\n    this.signer = null;\n  }\n\n  /**\n   * @internal\n   */\n  private getProviderOrSigner(): ProviderOrSigner {\n    return this.signer || this.providerOrSigner;\n  }\n\n  /**\n   * @internal\n   */\n  protected getSigner(): Signer | null {\n    if (Signer.isSigner(this.signer)) {\n      return this.signer;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  protected hasValidSigner(): boolean {\n    return Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @internal\n   */\n  protected async getSignerAddress(): Promise<string> {\n    const signer = this.getSigner();\n    invariant(signer, \"Cannot get signer address without valid signer\");\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  protected async getProvider(): Promise<Provider | undefined> {\n    const provider: Provider | undefined = Signer.isSigner(\n      this.getProviderOrSigner(),\n    )\n      ? (this.providerOrSigner as Signer).provider\n      : (this.providerOrSigner as Provider);\n    return provider;\n  }\n\n  /**\n   * @internal\n   */\n  protected async getChainID(): Promise<number> {\n    const provider = await this.getProvider();\n    invariant(provider, \"getChainID() -- No Provider\");\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected connectContract(): TContract {\n    throw new Error(\"connectContract has to be implemented\");\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    throw new Error(\"getModuleType has to be implemented\");\n  }\n\n  /**\n   * @internal\n   */\n  protected async getCallOverrides(): Promise<CallOverrides> {\n    const chainId = await this.getChainID();\n    const speed = this.options.gasSpeed;\n    const maxGasPrice = this.options.maxGasPriceInGwei;\n    const gasPriceChain = await getGasPriceForChain(\n      chainId,\n      speed,\n      maxGasPrice,\n    );\n    if (!gasPriceChain) {\n      return {};\n    }\n    // TODO: support EIP-1559 by try-catch, provider.getFeeData();\n    return {\n      gasPrice: ethers.utils.parseUnits(gasPriceChain.toString(), \"gwei\"),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  protected async sendTransaction(\n    fn: string,\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    if (this.options.transactionRelayerUrl) {\n      return await this.sendGaslessTransaction(fn, args, callOverrides);\n    } else {\n      return await this.sendAndWaitForTransaction(fn, args, callOverrides);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendAndWaitForTransaction(\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    const contract = this.contract;\n    const tx = await contract.functions[fn](...args, callOverrides);\n    if (tx.wait) {\n      return await tx.wait();\n    }\n    return tx;\n  }\n\n  /**\n   * @internal\n   */\n  private async sendGaslessTransaction(\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    console.log(\"callOverrides\", callOverrides);\n    const signer = this.getSigner();\n    invariant(\n      signer,\n      \"Cannot execute gasless transaction without valid signer\",\n    );\n    const provider = await this.getProvider();\n    invariant(provider, \"no provider to execute transaction\");\n    const chainId = await this.getChainID();\n    const contract = this.contract;\n    const from = await this.getSignerAddress();\n    const to = this.address;\n    const value = 0;\n    const data = contract.interface.encodeFunctionData(fn, args);\n    const gas = (await contract.estimateGas[fn](...args)).mul(2);\n    const forwarderAddress = this.options.transactionRelayerForwarderAddress;\n    const forwarder = Forwarder__factory.connect(\n      forwarderAddress,\n      this.getProviderOrSigner(),\n    );\n    const nonce = await getAndIncrementNonce(forwarder, from);\n\n    const domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      chainId,\n      verifyingContract: forwarderAddress,\n    };\n\n    const types = {\n      ForwardRequest,\n    };\n\n    const message = {\n      from,\n      to,\n      value: BigNumber.from(value).toString(),\n      gas: BigNumber.from(gas).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data,\n    };\n\n    const signature = await (signer as JsonRpcSigner)._signTypedData(\n      domain,\n      types,\n      message,\n    );\n\n    // await forwarder.verify(message, signature);\n    const txHash = await this.options.transactionRelayerSendFunction(\n      message,\n      signature,\n    );\n\n    return await provider.waitForTransaction(txHash);\n  }\n\n  protected parseEventLogs(eventName: string, logs?: Log[]): any {\n    if (!logs) {\n      return null;\n    }\n    const contract = this.contract;\n    for (const log of logs) {\n      try {\n        const event = contract.interface.decodeEventLog(\n          eventName,\n          log.data,\n          log.topics,\n        );\n        return event;\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n    }\n    return null;\n  }\n}\n\n/**\n * Extends the {@link Module} class to add {@link Role} functionality.\n *\n * @public\n */\nexport class ModuleWithRoles<\n  TContract extends AccessControlEnumerable = AccessControlEnumerable,\n> extends Module<TContract> {\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    throw new Error(\"getModuleRoles has to be implemented by a subclass\");\n  }\n\n  /**\n   * @internal\n   */\n  private get roles() {\n    return this.getModuleRoles();\n  }\n\n  /** @internal */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    super(providerOrSigner, address, options, sdk);\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   *\n   * @param role - The {@link IRoles | role} to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\n   * @see {@link ModuleWithRoles.getAllRoleMembers | getAllRoleMembers} to get get a list of addresses for all supported roles on the module.\n   * @example Say you want to get the list of addresses that are members of the {@link IRoles.minter | minter} role.\n   * ```typescript\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\n   * ```\n   *\n   * @public\n   */\n  public async getRoleMembers(role: Role): Promise<string[]> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const contract = this.contract;\n    const roleHash = getRoleHash(role);\n    const count = (await contract.getRoleMemberCount(roleHash)).toNumber();\n    return await Promise.all(\n      Array.from(Array(count).keys()).map((i) =>\n        contract.getRoleMember(roleHash, i),\n      ),\n    );\n  }\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the module.\n   *\n   * @see {@link ModuleWithRoles.getRoleMembers | getRoleMembers} to get a list of addresses that are members of a specific role.\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the module does not support roles this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async getAllRoleMembers(): Promise<Partial<Record<Role, string[]>>> {\n    invariant(this.roles.length, \"this module has no support for roles\");\n    const roles: Partial<Record<Role, string[]>> = {};\n    for (const role of this.roles) {\n      roles[role] = await this.getRoleMembers(role);\n    }\n    return roles;\n  }\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks\n   *\n   * Make sure you are sure you want to grant the role to the address.\n   *\n   * @param role - The {@link IRoles | role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async grantRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    return await this.sendTransaction(\"grantRole\", [\n      getRoleHash(role),\n      address,\n    ]);\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the {@link IRoles.admin | admin} role, you will no longer be able to administer the module.\n   * There is no way to recover from this.\n   *\n   * @param role - The {@link IRoles | role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async revokeRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const signerAddress = await this.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return await this.sendTransaction(\"renounceRole\", [\n        getRoleHash(role),\n        address,\n      ]);\n    } else {\n      return await this.sendTransaction(\"revokeRole\", [\n        getRoleHash(role),\n        address,\n      ]);\n    }\n  }\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\n\n/**\n * CommonModuleMetadata defines the common properties of a module deployment.\n */\n@JsonObject(\"CommonModuleMetadata\")\nexport default class CommonModuleMetadata {\n  /**\n   * The name of the module.\n   */\n  @JsonProperty(\"name\", String)\n  name = \"\";\n\n  /**\n   * The description of the module.\n   */\n  @JsonProperty(\"description\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  description?: string = undefined;\n\n  /**\n   * An image URI for the module.\n   */\n  @JsonProperty(\"image\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  image?: string = undefined;\n\n  /**\n   * An external link for the module.\n   */\n  @JsonProperty(\"external_link\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  externalLink?: string = undefined;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CollectionModuleMetadata\")\nexport default class BundleModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CurrencyModuleMetadata\")\nexport default class CurrencyModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The symbol for the Currency (required)\n   */\n  @JsonProperty(\"symbol\", String)\n  symbol = \"\";\n}\n","import { JsonObject } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DatastoreModuleMetadata\")\nexport default class DatastoreModuleMetadata extends CommonModuleMetadata {}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DropModuleMetadata\")\nexport default class DropModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The amount of fees collected on the primary sale, represented as basis points. The default is 0.\n   *\n   * For example, if the primary sale is $100 and the primary fee is 1000 BPS, then the primary fee of $10\n   * is distributed to the primary sale recipient.\n   *\n   * The destination for this fee is either the project address, or a Splits contract address\n   * if it was set using the `setModuleRoyaltyTreasury` method.\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"primary_sale_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleFeeBasisPoints? = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the Drop Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n\n  /**\n   * The max supply (required)\n   */\n  @JsonProperty(\"max_supply\", Number, PropertyConvertingMode.IGNORE_NULLABLE)\n  maxSupply = 1;\n\n  /**\n   * The address of the receiver of the initial sale.You can use this field to\n   * distribute the initial sale proceeds. All drop contracts are required to set this field,\n   * even if the tokens are planned to be free. If you plan to do a free drop, you can set this\n   * field to `AddressZero`\n   *\n   * This does not effect royalties in any way.\n   *\n   * For example, if a token is sold for $100, and there is a 0% fee,\n   * then $100 will be distributed to the address set on this property.\n   *\n   * If the token is sold for $100, and there is a 10% primary sale fee,\n   * then $90 will be distributed to the address set on this property.\n   *\n   * All secondary sales will use the `sellerFeeBasisPoints` and royalty recipient address.\n   */\n  @JsonProperty(\n    \"primary_sale_recipient_address\",\n    String,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleRecipientAddress = \"\";\n\n  /**\n   * The IPFS base URI thats prepended to all token URIs. This allows\n   * you to batch upload all the metadata for the tokens ahead of time\n   * so they can be lazy minted later\n   *\n   * e.g. if a Drop Collection has a token URI of /ipfs/BOREDAPES/TOKEN1, then the IPFS base URI is /BOREDAPES/\n   */\n  @JsonProperty(\n    \"base_token_uri\",\n    String,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  baseTokenUri = \"\";\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"MarketModuleMetadata\")\nexport default class MarketModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The fee collected on all sales out of this marketplace. This fee\n   * only applies to items sold from the marketplace and does not\n   * include any resale royalties that occur outside of this marketplace.\n   * The default is 0 (no fees).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  marketFeeBasisPoints = 0;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"NftModuleMetadata\")\nexport default class NftModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the NFT Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"PackModuleMetadata\")\nexport default class PackModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n","import { JsonObject } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\nimport { NewSplitRecipient } from \"./NewSplitRecipient\";\n\n@JsonObject(\"SplitsModuleMetadata\")\nexport default class SplitsModuleMetadata extends CommonModuleMetadata {\n  recipientSplits: NewSplitRecipient[] = [];\n}\n","import { Coin, Coin__factory } from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\nexport interface ITokenMintArgs {\n  address: string;\n  amount: BigNumberish;\n}\n\nexport interface ITokenMintFromArgs extends ITokenMintArgs {\n  fromAddress: string;\n}\n\n/**\n *\n * Access this module by calling {@link ThirdwebSDK.getCurrencyModule}\n * @public\n */\nexport class CurrencyModule extends ModuleWithRoles<Coin> {\n  public static moduleType: ModuleType = ModuleType.CURRENCY as const;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return CurrencyModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Coin {\n    return Coin__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return CurrencyModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  public async getValue(value: BigNumberish): Promise<CurrencyValue> {\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      this.address,\n      BigNumber.from(value),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  public async balance(): Promise<CurrencyValue> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async balanceOf(address: string): Promise<CurrencyValue> {\n    return await this.getValue(await this.readOnlyContract.balanceOf(address));\n  }\n\n  public async allowance(spender: string): Promise<BigNumber> {\n    return await this.allowanceOf(await this.getSignerAddress(), spender);\n  }\n\n  public async allowanceOf(owner: string, spender: string): Promise<BigNumber> {\n    return await this.readOnlyContract.allowance(owner, spender);\n  }\n  // write functions\n  public async transfer(\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transfer\", [to, amount]);\n  }\n\n  public async setAllowance(\n    spender: string,\n    amount: BigNumber,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"approve\", [spender, amount]);\n  }\n\n  // owner functions\n  public async mint(amount: BigNumberish) {\n    await this.mintTo(await this.getSignerAddress(), amount);\n  }\n\n  public async mintTo(to: string, amount: BigNumberish) {\n    await this.sendTransaction(\"mint\", [to, amount]);\n  }\n\n  public async mintBatchTo(args: ITokenMintArgs[]) {\n    const encoded = [];\n    for (const arg of args) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"mint\", [\n          arg.address,\n          arg.amount,\n        ]),\n      );\n    }\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async burn(amount: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [amount]);\n  }\n\n  public async burnFrom(\n    from: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burnFrom\", [from, amount]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  public async transferBatch(args: ITokenMintArgs[]) {\n    const encoded = args.map((arg) =>\n      this.contract.interface.encodeFunctionData(\"transfer\", [\n        arg.address,\n        arg.amount,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async transferFromBatch(args: ITokenMintFromArgs[]) {\n    const encoded = args.map((arg) =>\n      this.contract.interface.encodeFunctionData(\"transferFrom\", [\n        arg.fromAddress,\n        arg.address,\n        arg.amount,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n}\n","import {\n  Coin__factory,\n  DataStore__factory,\n  LazyNFT__factory,\n  Market__factory,\n  NFTCollection__factory,\n  NFT__factory,\n  Pack__factory,\n  ProtocolControl,\n  ProtocolControl__factory,\n  Royalty__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, ethers, Signer } from \"ethers\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { JsonConvert } from \"json2typescript\";\nimport { ChainlinkVrf, Role, RolesMap, uploadMetadata } from \"../common\";\nimport { getContractMetadata } from \"../common/contract\";\nimport { invariant } from \"../common/invariant\";\nimport { ModuleType } from \"../common/module-type\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport IAppModule from \"../interfaces/IAppModule\";\nimport BundleModuleMetadata from \"../types/module-deployments/BundleModuleMetadata\";\nimport CurrencyModuleMetadata from \"../types/module-deployments/CurrencyModuleMetadata\";\nimport DatastoreModuleMetadata from \"../types/module-deployments/DatastoreModuleMetadata\";\nimport DropModuleMetadata from \"../types/module-deployments/DropModuleMetadata\";\nimport MarketModuleMetadata from \"../types/module-deployments/MarketModuleMetadata\";\nimport NftModuleMetadata from \"../types/module-deployments/NftModuleMetadata\";\nimport PackModuleMetadata from \"../types/module-deployments/PackModuleMetadata\";\nimport SplitsModuleMetadata from \"../types/module-deployments/SplitsModuleMetadata\";\nimport { ModuleMetadata, ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { CollectionModule } from \"./collection\";\nimport { DatastoreModule } from \"./datastore\";\nimport { DropModule } from \"./drop\";\nimport { MarketModule } from \"./market\";\nimport { NFTModule } from \"./nft\";\nimport { PackModule } from \"./pack\";\nimport { SplitsModule } from \"./royalty\";\nimport { CurrencyModule } from \"./token\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getAppModule}\n * @public\n */\nexport class AppModule\n  extends ModuleWithRoles<ProtocolControl>\n  implements IAppModule\n{\n  private jsonConvert = new JsonConvert();\n\n  public static roles = [RolesMap.admin] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return CurrencyModule.roles;\n  }\n\n  /**\n   * The internal module type for the app module.\n   * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.\n   * @internal\n   * @readonly\n   */\n  private moduleType: ModuleType = -1;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): ProtocolControl {\n    return ProtocolControl__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return this.moduleType;\n  }\n\n  /**\n   * @internal\n   *\n   */\n  private async getModuleAddress(moduleType: ModuleType): Promise<string[]> {\n    return await this.readOnlyContract.getAllModulesOfType(moduleType);\n  }\n\n  private async getNFTAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.NFT);\n  }\n\n  private async getBundleAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.BUNDLE);\n  }\n\n  private async getPackAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.PACK);\n  }\n\n  private async getCurrencyAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.CURRENCY);\n  }\n\n  private async getMarketAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.MARKET);\n  }\n\n  private async getDropAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DROP);\n  }\n\n  private async getDatastoreAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DATASTORE);\n  }\n\n  public async getRoyaltyTreasury(address?: string): Promise<string> {\n    return await this.readOnlyContract.getRoyaltyTreasury(\n      address || AddressZero,\n    );\n  }\n\n  /**\n   * @internal\n   * @param addresses - The addresses of the modules to get metadata for.\n   */\n  public async getAllContractMetadata(\n    addresses: string[],\n  ): Promise<ModuleMetadataNoType[]> {\n    const metadatas = await Promise.all(\n      addresses.map((address) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          address,\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n    return addresses\n      .filter((d) => d)\n      .map((address, i) => {\n        return {\n          address,\n          metadata: metadatas[i],\n        };\n      });\n  }\n\n  /**\n   * Method to get a list of pack module metadata.\n   * @returns A promise of an array of Pack modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getPackModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getPackAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.PACK,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of NFT module metadata.\n   * @returns A promise of an array of NFT modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getNFTModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getNFTAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.NFT,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of Bundle module metadata.\n   * @returns A promise of an array of Bundle modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCollectionModules(): Promise<ModuleMetadata[]> {\n    return await this.getBundleModules();\n  }\n\n  public async getBundleModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getBundleAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.BUNDLE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Currency module metadata.\n   * @returns A promise of an array of Currency modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCurrencyModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getCurrencyAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.CURRENCY,\n    }));\n  }\n\n  /**\n   * Method to get a list of Datastore module metadata.\n   * @alpha\n   * @returns A promise of an array of Datastore modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDatastoreModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getDatastoreAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.DATASTORE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Market module metadata.\n   * @returns A promise of an array of Market modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getMarketModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getMarketAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.MARKET,\n    }));\n  }\n\n  /**\n   * Method to get a list of Drop module metadata.\n   * @returns A promise of an array of Drop modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDropModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getDropAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.DROP,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of all module metadata on a given app.\n   * @public\n   * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.\n   * @returns Array of module metadata\n   */\n  public async getAllModuleMetadata(\n    filterByModuleType?: ModuleType[],\n  ): Promise<ModuleMetadata[]> {\n    const moduleTypesToGet = filterByModuleType || [\n      ModuleType.NFT,\n      ModuleType.BUNDLE,\n      ModuleType.PACK,\n      ModuleType.CURRENCY,\n      ModuleType.MARKET,\n      ModuleType.DROP,\n      ModuleType.DATASTORE,\n    ];\n    return (\n      await Promise.all(\n        moduleTypesToGet.map(async (moduleType) => {\n          const moduleAddresses = await this.getModuleAddress(moduleType);\n          return (await this.getAllContractMetadata(moduleAddresses)).map(\n            (m) => ({\n              ...m,\n              type: moduleType,\n            }),\n          );\n        }),\n      )\n    ).reduce((acc, curr) => acc.concat(curr), []);\n  }\n\n  // owner functions\n  /**\n   * @deprecated - Use setMetadata() instead\n   */\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyTreasury(\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyTreasury\", [treasury]);\n  }\n\n  public async setModuleRoyaltyTreasury(\n    moduleAddress: string,\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setModuleRoyaltyTreasury\", [\n      moduleAddress,\n      treasury,\n    ]);\n  }\n\n  public async withdrawFunds(\n    to: string,\n    currency: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"withdrawFunds\", [to, currency]);\n  }\n\n  /**\n   * Helper method that deploys a module and returns its address\n   *\n   * @internal\n   *\n   * @param moduleType - The ModuleType to deploy\n   * @param args - Constructor arguments for the module\n   * @param factory - The ABI factory used to call the `deploy` method\n   * @returns The address of the deployed module\n   */\n  private async _deployModule<T extends ModuleType>(\n    moduleType: T,\n    args: any[],\n    factory: any,\n  ): Promise<string> {\n    const gasPrice = await this.sdk.getGasPrice();\n    const txOpts = gasPrice\n      ? { gasPrice: ethers.utils.parseUnits(gasPrice.toString(), \"gwei\") }\n      : {};\n\n    const tx = await new ethers.ContractFactory(factory.abi, factory.bytecode)\n      .connect(this.signer as Signer)\n      .deploy(...args, txOpts);\n\n    await tx.deployed();\n    const contractAddress = tx.address;\n\n    const addModuleTx = await this.contract.addModule(\n      contractAddress,\n      moduleType,\n      txOpts,\n    );\n    await addModuleTx.wait();\n    return contractAddress;\n  }\n\n  /**\n   * Deploys a collection module.\n   *\n   * @param metadata - Metadata about the module.\n   * @returns A promise with the newly created module.\n   */\n  public async deployBundleModule(\n    metadata: BundleModuleMetadata,\n  ): Promise<CollectionModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      metadata,\n      BundleModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.COLLECTION,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        BigNumber.from(\n          metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        ),\n      ],\n      NFTCollection__factory,\n    );\n\n    return this.sdk.getCollectionModule(address);\n  }\n\n  /**\n   * Deploys a Splits module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed splits module\n   */\n  public async deploySplitsModule(\n    metadata: SplitsModuleMetadata,\n  ): Promise<SplitsModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      metadata,\n      SplitsModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.SPLITS,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.recipientSplits.map((s) => s.address),\n        metadata.recipientSplits.map((s) => s.shares),\n      ],\n      Royalty__factory,\n    );\n\n    return this.sdk.getSplitsModule(address);\n  }\n\n  /**\n   * Deploys a NFT module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed NFT module\n   */\n  public async deployNftModule(\n    metadata: NftModuleMetadata,\n  ): Promise<NFTModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      metadata,\n      NftModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.NFT,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.sellerFeeBasisPoints,\n      ],\n      NFT__factory,\n    );\n\n    return this.sdk.getNFTModule(address);\n  }\n\n  /**\n   * Deploys a currency module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed currency module\n   */\n  public async deployCurrencyModule(\n    metadata: CurrencyModuleMetadata,\n  ): Promise<CurrencyModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      metadata,\n      CurrencyModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.CURRENCY,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n      ],\n      Coin__factory,\n    );\n\n    return this.sdk.getCurrencyModule(address);\n  }\n\n  /**\n   * Deploys a Marketplace module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Marketplace module\n   */\n  public async deployMarketModule(\n    metadata: MarketModuleMetadata,\n  ): Promise<MarketModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      metadata,\n      MarketModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.MARKET,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.marketFeeBasisPoints ? metadata.marketFeeBasisPoints : 0,\n      ],\n      Market__factory,\n    );\n\n    return this.sdk.getMarketModule(address);\n  }\n\n  /**\n   * Deploys a Pack module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Pack module\n   */\n  public async deployPackModule(\n    metadata: PackModuleMetadata,\n  ): Promise<PackModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      metadata,\n      PackModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const chainId = await this.getChainID();\n    const { vrfCoordinator, linkTokenAddress, keyHash, fees } =\n      ChainlinkVrf[chainId as keyof typeof ChainlinkVrf];\n\n    const address = await this._deployModule(\n      ModuleType.PACK,\n      [\n        this.address,\n        metadataUri,\n        vrfCoordinator,\n        linkTokenAddress,\n        keyHash,\n        fees,\n        await this.sdk.getForwarderAddress(),\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n      ],\n      Pack__factory,\n    );\n\n    return this.sdk.getPackModule(address);\n  }\n\n  /**\n   * Deploys a Drop module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Drop module\n   */\n  public async deployDropModule(\n    metadata: DropModuleMetadata,\n  ): Promise<DropModule> {\n    invariant(metadata.maxSupply !== undefined, \"Max supply must be specified\");\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      metadata,\n      DropModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.DROP,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.baseTokenUri ? metadata.baseTokenUri : \"\",\n        metadata.maxSupply,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n        metadata.primarySaleRecipientAddress,\n      ],\n      LazyNFT__factory,\n    );\n\n    return this.sdk.getDropModule(address);\n  }\n\n  /**\n   * Deploys a Datastore module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Datastore module\n   */\n  public async deployDatastoreModule(\n    metadata: DatastoreModuleMetadata,\n  ): Promise<DatastoreModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      metadata,\n      DatastoreModuleMetadata,\n    );\n\n    const metadataUri = await uploadMetadata(\n      serializedMetadata,\n      this.address,\n      await this.getSignerAddress(),\n    );\n\n    const address = await this._deployModule(\n      ModuleType.DATASTORE,\n      [this.address, await this.sdk.getForwarderAddress(), metadataUri],\n      DataStore__factory,\n    );\n\n    return this.sdk.getDatastoreModule(address);\n  }\n}\n","import {\n  NFTCollection as NFTBundleContract,\n  NFTCollection__factory,\n  ERC721__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BytesLike } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * @beta\n */\n\nexport interface BundleMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: number;\n}\nexport interface CollectionMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: number;\n}\n\n/**\n * @beta\n */\n\nexport interface INFTBundleCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\nexport interface INFTCollectionCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\n\n/**\n * @beta\n */\n\nexport interface INFTCollectionBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\nexport interface INFTBundleBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getBundleModule}\n * @beta\n */\nexport class BundleModule extends ModuleWithRoles<NFTBundleContract> {\n  public static moduleType: ModuleType = ModuleType.BUNDLE;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return BundleModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): NFTBundleContract {\n    return NFTCollection__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return BundleModule.moduleType;\n  }\n\n  /**\n   *\n   * Get a single bundle item by tokenId.\n   * @param tokenId - the unique token id of the nft\n   * @returns A promise that resolves to a `BundleMetadata`.\n   */\n  public async get(tokenId: string, address?: string): Promise<BundleMetadata> {\n    const [metadata, creator, supply, ownedByAddress] = await Promise.all([\n      getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl),\n      this.readOnlyContract.creator(tokenId),\n      this.readOnlyContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(\"0\")),\n      address ? (await this.balanceOf(address, tokenId)).toNumber() : 0,\n    ]);\n    return {\n      creator,\n      supply,\n      metadata,\n      ownedByAddress,\n    };\n  }\n\n  /**\n   * Return all items in the bundle.\n   * @returns An array of `INFTBundle`.\n   */\n  public async getAll(address?: string): Promise<BundleMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.get(i.toString(), address),\n      ),\n    );\n  }\n\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(\n      await this.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(\n    address: string,\n    operator: string,\n    assetContract?: string,\n    assetId?: BigNumberish,\n  ): Promise<boolean> {\n    if (!assetContract) {\n      return await this.readOnlyContract.isApprovedForAll(address, operator);\n    }\n    if (!assetId) {\n      throw new Error(\"tokenId is required\");\n    }\n    const contract = ERC721__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n    const approved = await contract.isApprovedForAll(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    const isTokenApproved =\n      (await contract.getApproved(assetId)).toLowerCase() ===\n      this.address.toLowerCase();\n    return approved || isTokenApproved;\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.transferFrom(\n      await this.getSignerAddress(),\n      to,\n      { tokenId, amount },\n      [0],\n    );\n  }\n\n  // owner functions\n  public async create(metadata: MetadataURIOrObject): Promise<BundleMetadata> {\n    return (await this.createBatch([metadata]))[0];\n  }\n\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<BundleMetadata[]> {\n    const metadataWithSupply = metadatas.map((m) => ({\n      metadata: m,\n      supply: 0,\n    }));\n    return this.createAndMintBatch(metadataWithSupply);\n  }\n\n  public async createAndMint(\n    metadataWithSupply: INFTBundleCreateArgs,\n  ): Promise<BundleMetadata> {\n    return (await this.createAndMintBatch([metadataWithSupply]))[0];\n  }\n\n  public async createAndMintBatch(\n    metadataWithSupply: INFTBundleCreateArgs[],\n  ): Promise<BundleMetadata[]> {\n    const uris = await Promise.all(\n      metadataWithSupply.map((a) => a.metadata).map((a) => uploadMetadata(a)),\n    );\n    const supplies = metadataWithSupply.map((a) => a.supply);\n    const to = await this.getSignerAddress();\n    const receipt = await this.sendTransaction(\"createNativeTokens\", [\n      to,\n      uris,\n      supplies,\n      [0],\n    ]);\n    const event = this.parseEventLogs(\"NativeTokens\", receipt?.logs);\n    const tokenIds = event?.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async createWithToken(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTBundleCreateArgs,\n  ) {\n    const uri = await uploadMetadata(args.metadata);\n    await this.sendTransaction(\"wrapERC20\", [\n      tokenContract,\n      tokenAmount,\n      args.supply,\n      uri,\n    ]);\n  }\n  public async createWithErc20(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTBundleCreateArgs,\n  ) {\n    return this.createWithToken(tokenContract, tokenAmount, args);\n  }\n\n  public async createWithNFT(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"wrapERC721\", [tokenContract, tokenId, uri]);\n  }\n  public async createWithERC721(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    return this.createWithNFT(tokenContract, tokenId, metadata);\n  }\n\n  public async mint(args: INFTBundleBatchArgs) {\n    await this.mintTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintTo(\n    to: string,\n    args: INFTBundleBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"mint\", [to, args.tokenId, args.amount, data]);\n  }\n\n  public async mintBatch(args: INFTBundleBatchArgs[]) {\n    await this.mintBatchTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintBatchTo(\n    to: string,\n    args: INFTBundleBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"mintBatch\", [to, ids, amounts, data]);\n  }\n\n  public async burn(args: INFTBundleBatchArgs): Promise<TransactionReceipt> {\n    return await this.burnFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnBatch(\n    args: INFTBundleBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    return await this.burnBatchFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnFrom(\n    account: string,\n    args: INFTBundleBatchArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [\n      account,\n      args.tokenId,\n      args.amount,\n    ]);\n  }\n\n  public async burnBatchFrom(\n    account: string,\n    args: INFTBundleBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: INFTBundleBatchArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: INFTBundleBatchArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyBps\", [amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<BundleMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => await this.get(b.tokenId.toString())),\n    );\n  }\n}\n","import { DataStore, DataStore__factory } from \"@3rdweb/contracts\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { ModuleWithRoles } from \"../core/module\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getDatastoreModule}\n * @alpha\n */\nexport class DatastoreModule extends ModuleWithRoles<DataStore> {\n  public static moduleType: ModuleType = ModuleType.DATASTORE;\n\n  public static roles = [RolesMap.admin, RolesMap.editor] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DatastoreModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): DataStore {\n    return DataStore__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DatastoreModule.moduleType;\n  }\n\n  public async getUint(key: string): Promise<BigNumberish | undefined> {\n    const keyHash = keccak256(key.toString());\n    return await this.readOnlyContract.getUint(keyHash);\n  }\n\n  // write functions\n  public async setUint(\n    key: string,\n    value: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    const keyHash = keccak256(key.toString());\n    return await this.sendTransaction(\"setUint\", [keyHash, value]);\n  }\n}\n","import {\n  LazyNFT as Drop,\n  LazyNFT__factory as Drop__factory,\n} from \"@3rdweb/contracts\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getTokenMetadata, NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * @beta\n */\nexport interface CreatePublicMintCondition {\n  startTimestampInSeconds?: BigNumberish;\n  maxMintSupply: BigNumberish;\n  quantityLimitPerTransaction?: BigNumberish;\n  waitTimeSecondsLimitPerTransaction?: BigNumberish;\n  pricePerToken?: BigNumberish;\n  currency?: string;\n  merkleRoot?: BytesLike;\n}\n\n/**\n * @beta\n */\nexport interface PublicMintCondition {\n  startTimestamp: BigNumberish;\n  maxMintSupply: BigNumberish;\n  currentMintSupply: BigNumberish;\n  quantityLimitPerTransaction: BigNumberish;\n  waitTimeSecondsLimitPerTransaction: BigNumberish;\n  pricePerToken: BigNumberish;\n  currency: string;\n  merkleRoot: BytesLike;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getDropModule}\n * @beta\n */\nexport class DropModule extends ModuleWithRoles<Drop> {\n  public static moduleType: ModuleType = ModuleType.DROP;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Drop {\n    return Drop__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DropModule.moduleType;\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.ipfsGatewayUrl,\n    );\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAll(): Promise<NFTMetadataOwner[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getAllUnclaimed(): Promise<NFTMetadataOwner[]> {\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const unmintedId = await this.readOnlyContract.nextMintTokenId();\n    return await Promise.all(\n      Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map((i) =>\n        this.get(unmintedId.add(i).toString()),\n      ),\n    );\n  }\n\n  public async getAllClaimed(): Promise<NFTMetadataOwner[]> {\n    const maxId = (await this.readOnlyContract.nextMintTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async ownerOf(tokenId: string): Promise<string> {\n    return await this.readOnlyContract.ownerOf(tokenId);\n  }\n\n  public async getOwned(_address?: string): Promise<NFTMetadataOwner[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async getActiveMintCondition(): Promise<PublicMintCondition> {\n    const index =\n      await this.readOnlyContract.getLastStartedMintConditionIndex();\n    return await this.readOnlyContract.mintConditions(index);\n  }\n\n  public async getAllMintConditions(): Promise<PublicMintCondition[]> {\n    const conditions = [];\n    for (let i = 0; ; i++) {\n      try {\n        conditions.push(await this.readOnlyContract.mintConditions(i));\n      } catch (e) {\n        break;\n      }\n    }\n    return conditions;\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextTokenId();\n  }\n\n  public async maxTotalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.maxTotalSupply();\n  }\n\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    return (await this.readOnlyContract.nextTokenId()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextMintTokenId();\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  // owner functions\n  public async lazyMint(metadata: MetadataURIOrObject) {\n    await this.lazyMintBatch([metadata]);\n  }\n\n  public async lazyMintBatch(metadatas: MetadataURIOrObject[]) {\n    const uris = await Promise.all(metadatas.map((m) => uploadMetadata(m)));\n    await this.sendTransaction(\"lazyMintBatch\", [uris]);\n  }\n\n  public async lazyMintAmount(amount: BigNumberish) {\n    await this.sendTransaction(\"lazyMintAmount\", [amount]);\n  }\n\n  public async setPublicMintConditions(\n    conditions: CreatePublicMintCondition[],\n  ) {\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: c.startTimestampInSeconds || 0,\n      maxMintSupply: c.maxMintSupply,\n      currentMintSupply: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxMintSupply,\n      waitTimeSecondsLimitPerTransaction:\n        c.waitTimeSecondsLimitPerTransaction || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setPublicMintConditions\", [_conditions]);\n  }\n\n  public async claim(quantity: BigNumberish) {\n    const proofs = [hexZeroPad([0], 32)];\n    const mintCondition = await this.getActiveMintCondition();\n    const overrides = (await this.getCallOverrides()) || {};\n    if (\n      mintCondition.currency === AddressZero &&\n      mintCondition.pricePerToken > 0\n    ) {\n      overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n        quantity,\n      );\n    }\n    await this.sendTransaction(\"claim\", [quantity, proofs], overrides);\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyBps\", [amount]);\n  }\n\n  public async setBaseTokenUri(uri: string): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setBaseTokenURI\", [uri]);\n  }\n\n  public async setMaxTotalSupply(\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMaxTotalSupply\", [amount]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted: boolean,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC165__factory,\n  ERC20__factory,\n  ERC721__factory,\n  Market,\n  Market__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { InterfaceId_IERC721 } from \"../common/contract\";\nimport { CurrencyValue, getCurrencyValue } from \"../common/currency\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * Filter options for the Market module.\n * @public\n */\nexport interface ListingFilter {\n  seller?: string;\n  tokenContract?: string;\n  tokenId?: string;\n}\n\n/**\n * Metadata for items listed on a Market module.\n * @public\n */\nexport interface ListingMetadata {\n  id: string;\n  seller: string;\n  tokenContract: string;\n  tokenId: string;\n  tokenMetadata?: NFTMetadata;\n  quantity: BigNumber;\n  currencyContract: string;\n  currencyMetadata: CurrencyValue | null;\n  price: BigNumber;\n  saleStart: Date | null;\n  saleEnd: Date | null;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getMarketModule}\n * @public\n */\nexport class MarketModule extends ModuleWithRoles<Market> {\n  public static moduleType: ModuleType = ModuleType.MARKET;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.lister,\n    RolesMap.pauser,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return MarketModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Market {\n    return Market__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return MarketModule.moduleType;\n  }\n\n  private async transformResultToListing(\n    listing: any,\n  ): Promise<ListingMetadata> {\n    let currency: CurrencyValue | null = null;\n\n    try {\n      currency = await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.pricePerToken,\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    let metadata: NFTMetadata | undefined = undefined;\n    try {\n      metadata = await getMetadataWithoutContract(\n        this.providerOrSigner,\n        listing.assetContract,\n        listing.tokenId.toString(),\n        this.ipfsGatewayUrl,\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    return {\n      id: listing.listingId.toString(),\n      seller: listing.seller,\n      tokenId: listing.tokenId.toString(),\n      tokenContract: listing.assetContract,\n      tokenMetadata: metadata,\n      quantity: listing.quantity,\n      price: listing.pricePerToken,\n      currencyContract: listing.currency,\n      currencyMetadata: currency,\n      saleStart: listing.saleStart.gt(0)\n        ? new Date(listing.saleStart.toNumber() * 1000)\n        : null,\n      saleEnd:\n        listing.saleEnd.gt(0) &&\n        listing.saleEnd.lte(Number.MAX_SAFE_INTEGER - 1)\n          ? new Date(listing.saleEnd.toNumber() * 1000)\n          : null,\n    };\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.get} instead.\n   */\n  public async getListing(listingId: string): Promise<ListingMetadata> {\n    return await this.get(listingId);\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.getAll} instead.\n   */\n  public async getAllListings(\n    filter?: ListingFilter,\n  ): Promise<ListingMetadata[]> {\n    return await this.getAll(filter);\n  }\n\n  public async get(listingId: string): Promise<ListingMetadata> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    return await this.transformResultToListing(listing);\n  }\n\n  public async getAll(filter?: ListingFilter): Promise<ListingMetadata[]> {\n    let listings: any[] = [];\n\n    if (!filter) {\n      listings = listings.concat(await this.readOnlyContract.getAllListings());\n    } else {\n      if (filter.tokenContract && filter.tokenId) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAsset(\n            filter.tokenContract,\n            filter.tokenId,\n          ),\n        );\n      } else if (filter.seller) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsBySeller(filter.seller),\n        );\n      } else if (filter.tokenContract) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAssetContract(\n            filter.tokenContract,\n          ),\n        );\n      } else {\n        listings = listings.concat(\n          await this.readOnlyContract.getAllListings(),\n        );\n      }\n    }\n\n    listings = listings\n      .filter((l) => {\n        if (l.quantity.eq(0)) {\n          return false;\n        }\n        if (filter) {\n          const filterSeller = filter?.seller || \"\";\n          const filterTokenContract = filter?.tokenContract || \"\";\n          const filterTokenId = filter?.tokenId || \"\";\n\n          if (\n            filterSeller &&\n            filterSeller.toLowerCase() !== l.seller.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenContract &&\n            filterTokenContract.toLowerCase() !== l.assetContract.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenId &&\n            filterTokenId.toLowerCase() !== l.tokenId.toString().toLowerCase()\n          ) {\n            return false;\n          }\n        }\n        return true;\n      })\n      .map((l) => this.transformResultToListing(l));\n    return await Promise.all(listings);\n  }\n\n  public async getMarketFeeBps(): Promise<BigNumber> {\n    return await this.readOnlyContract.marketFeeBps();\n  }\n\n  // write functions\n  public async list(\n    assetContract: string,\n    tokenId: string,\n    currencyContract: string,\n    price: BigNumberish,\n    quantity: BigNumberish,\n    tokensPerBuyer: BigNumberish = 0,\n    secondsUntilStart: BigNumberish = 0,\n    secondsUntilEnd: BigNumberish = 0,\n  ): Promise<ListingMetadata> {\n    const from = await this.getSignerAddress();\n    const erc165 = ERC165__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n\n    // check for token approval\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    if (isERC721) {\n      const asset = ERC721__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        const isTokenApproved =\n          (await asset.getApproved(tokenId)).toLowerCase() ===\n          this.address.toLowerCase();\n\n        if (!isTokenApproved) {\n          // TODO: make it gasless\n          const tx = await asset.setApprovalForAll(\n            this.address,\n            true,\n            await this.getCallOverrides(),\n          );\n          await tx.wait();\n        }\n      }\n    } else {\n      const asset = ERC1155__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        // TODO: make it gasless\n        const tx = await asset.setApprovalForAll(\n          this.address,\n          true,\n          await this.getCallOverrides(),\n        );\n        await tx.wait();\n      }\n    }\n\n    const receipt = await this.sendTransaction(\"list\", [\n      assetContract,\n      tokenId,\n      currencyContract,\n      price,\n      quantity,\n      tokensPerBuyer,\n      secondsUntilStart,\n      secondsUntilEnd,\n    ]);\n    const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n    const listing = event?.listing;\n    return await this.transformResultToListing(listing);\n  }\n\n  public async unlistAll(listingId: string) {\n    const maxQuantity = (await this.get(listingId)).quantity;\n    await this.unlist(listingId, maxQuantity);\n  }\n\n  public async unlist(listingId: string, quantity: BigNumberish) {\n    await this.sendTransaction(\"unlist\", [listingId, quantity]);\n  }\n\n  public async buy(\n    listingId: string,\n    quantity: BigNumberish,\n  ): Promise<ListingMetadata> {\n    const listing = await this.get(listingId);\n    const owner = await this.getSignerAddress();\n    const spender = this.address;\n    const totalPrice = listing.price.mul(BigNumber.from(quantity));\n    if (listing.currencyContract && listing.currencyContract !== AddressZero) {\n      const erc20 = ERC20__factory.connect(\n        listing.currencyContract,\n        this.providerOrSigner,\n      );\n      const allowance = await erc20.allowance(owner, spender);\n      if (allowance.lt(totalPrice)) {\n        // TODO: make it gasless\n        const tx = await erc20.increaseAllowance(\n          spender,\n          totalPrice,\n          await this.getCallOverrides(),\n        );\n        await tx.wait();\n      }\n    }\n\n    const receipt = await this.sendTransaction(\"buy\", [listingId, quantity]);\n    const event = this.parseEventLogs(\"NewSale\", receipt?.logs);\n    return await this.transformResultToListing(event?.listing);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setMarketFeeBps(fee: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMarketFeeBps\", [fee]);\n  }\n}\n","/* eslint-disable new-cap */\nimport { NFT, NFT__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getTokenMetadata, NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getNFTModule}\n * @public\n */\nexport class NFTModule extends ModuleWithRoles<NFT> {\n  public static moduleType: ModuleType = ModuleType.NFT;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  protected getModuleRoles(): readonly Role[] {\n    return NFTModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): NFT {\n    return NFT__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return NFTModule.moduleType;\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.ipfsGatewayUrl,\n    );\n  }\n\n  public async getAll(): Promise<NFTMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getWithOwner(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId),\n      this.get(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAllWithOwner(): Promise<NFTMetadataOwner[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.getWithOwner(i.toString()),\n      ),\n    );\n  }\n\n  /**\n   * Checks the owner of a particular NFT\n   *\n   * @param tokenId - ID of the NFT to get the owner of\n   * @returns the owner of the token, or a zero address if the\n   * token has been burned\n   */\n  public async ownerOf(tokenId: string): Promise<string> {\n    try {\n      return await this.readOnlyContract.ownerOf(tokenId);\n    } catch (e) {\n      return AddressZero;\n    }\n  }\n\n  public async getOwned(_address?: string): Promise<NFTMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  // owner functions\n  public async mint(metadata: MetadataURIOrObject): Promise<NFTMetadata> {\n    return await this.mintTo(await this.getSignerAddress(), metadata);\n  }\n\n  public async mintTo(\n    to: string,\n    metadata: MetadataURIOrObject,\n  ): Promise<NFTMetadata> {\n    const uri = await uploadMetadata(metadata);\n    const receipt = await this.sendTransaction(\"mintNFT\", [to, uri]);\n    const event = this.parseEventLogs(\"Minted\", receipt?.logs);\n    const tokenId = event?.tokenId;\n    return await this.get(tokenId.toString());\n  }\n\n  public async mintBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    return await this.mintBatchTo(await this.getSignerAddress(), metadatas);\n  }\n\n  public async mintBatchTo(\n    to: string,\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    const uris = await Promise.all(metadatas.map((m) => uploadMetadata(m)));\n    const receipt = await this.sendTransaction(\"mintNFTBatch\", [to, uris]);\n    const event = this.parseEventLogs(\"MintedBatch\", receipt?.logs);\n    const tokenIds = event.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyBps\", [amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC20__factory,\n  Pack as PackContract,\n  Pack__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish, BytesLike, ethers } from \"ethers\";\nimport {\n  CurrencyValue,\n  getCurrencyValue,\n  ModuleType,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { ChainlinkVrf } from \"../common/chainlink\";\nimport { NotFoundError } from \"../common/error\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * @beta\n */\nexport interface PackMetadata {\n  id: string;\n  creator: string;\n  currentSupply: BigNumber;\n  openStart: Date | null;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackNFTMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @beta\n */\nexport interface IPackCreateArgs {\n  assetContract: string;\n  metadata: MetadataURIOrObject;\n  assets: {\n    tokenId: BigNumberish;\n    amount: BigNumberish;\n  }[];\n  secondsUntilOpenStart?: number;\n  rewardsPerOpen?: number;\n}\n\n/**\n * @beta\n */\nexport interface IPackBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getPackModule}\n * @beta\n */\nexport class PackModule extends ModuleWithRoles<PackContract> {\n  public static moduleType: ModuleType = ModuleType.PACK;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return PackModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): PackContract {\n    return Pack__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return PackModule.moduleType;\n  }\n\n  public async open(packId: string): Promise<NFTMetadata[]> {\n    const receipt = await this.sendTransaction(\"openPack\", [packId]);\n    const event = this.parseEventLogs(\"PackOpenRequest\", receipt?.logs);\n    const requestId = event.requestId;\n    const opener = event.opener;\n\n    const fulfillEvent: any = await new Promise((resolve) => {\n      this.readOnlyContract.once(\n        // eslint-disable-next-line new-cap\n        this.readOnlyContract.filters.PackOpenFulfilled(null, opener),\n        (_packId, _opener, _requestId, rewardContract, rewardIds) => {\n          if (requestId === _requestId) {\n            resolve({\n              packId: _packId,\n              opener: _opener,\n              requestId,\n              rewardContract,\n              rewardIds,\n            });\n          }\n        },\n      );\n    });\n    const { rewardIds } = fulfillEvent;\n    return await Promise.all(\n      rewardIds.map((rewardId: BigNumber) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          this.address,\n          rewardId.toString(),\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n  }\n\n  public async get(packId: string): Promise<PackMetadata> {\n    const [meta, state, supply] = await Promise.all([\n      getMetadataWithoutContract(\n        this.providerOrSigner,\n        this.address,\n        packId,\n        this.ipfsGatewayUrl,\n      ),\n      this.readOnlyContract.getPack(packId),\n      this.readOnlyContract\n        .totalSupply(packId)\n        .catch(() => BigNumber.from(\"0\")),\n    ]);\n    const entity: PackMetadata = {\n      id: packId,\n      metadata: meta,\n      creator: state.creator,\n      currentSupply: supply,\n      openStart: state.openStart.gt(0)\n        ? new Date(state.openStart.toNumber() * 1000)\n        : null,\n    };\n    return entity;\n  }\n\n  public async getAll(): Promise<PackMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getNFTs(packId: string): Promise<PackNFTMetadata[]> {\n    const packReward = await this.readOnlyContract.getPackWithRewards(packId);\n    if (!packReward.source) {\n      throw new NotFoundError();\n    }\n    const rewards = await Promise.all(\n      packReward.tokenIds.map((tokenId) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          packReward.source,\n          tokenId.toString(),\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n    return rewards.map((reward, i) => ({\n      supply: packReward.amountsPacked[i],\n      metadata: reward,\n    }));\n  }\n\n  // passthrough to the contract\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress(), tokenId);\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  public async setApproval(operator: string, approved = true) {\n    await this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n  }\n\n  public async transfer(to: string, tokenId: string, amount: BigNumber) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      await this.getSignerAddress(),\n      to,\n      tokenId,\n      amount,\n      [0],\n    ]);\n  }\n\n  // owner functions\n  public async create(args: IPackCreateArgs): Promise<PackMetadata> {\n    const asset = ERC1155__factory.connect(\n      args.assetContract,\n      this.providerOrSigner,\n    );\n\n    const from = await this.getSignerAddress();\n    const ids = args.assets.map((a) => a.tokenId);\n    const amounts = args.assets.map((a) => a.amount);\n    const uri = await uploadMetadata(args.metadata);\n\n    const packParams = ethers.utils.defaultAbiCoder.encode(\n      [\"string\", \"uint256\", \"uint256\"],\n      [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1],\n    );\n\n    // TODO: make it gasless\n    const tx = await asset.safeBatchTransferFrom(\n      from,\n      this.address,\n      ids,\n      amounts,\n      packParams,\n      await this.getCallOverrides(),\n    );\n    const receipt = await tx.wait();\n    const event = receipt?.events?.find((e) => e.event === \"PackCreated\");\n    const packId = event?.args?.packId;\n    return await this.get(packId);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  // owner functions\n  public async getLinkBalance(): Promise<CurrencyValue> {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      chainlink.linkTokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n\n  public async depositLink(amount: BigNumberish) {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    // TODO: make it gasless\n    const tx = await erc20.transfer(\n      this.address,\n      amount,\n      await this.getCallOverrides(),\n    );\n    await tx.wait();\n  }\n\n  public async withdrawLink(to: string, amount: BigNumberish) {\n    await this.sendTransaction(\"transferLink\", [to, amount]);\n  }\n\n  public async setRoyaltyBps(amount: number) {\n    await this.sendTransaction(\"setRoyaltyBps\", [amount]);\n  }\n\n  public async setModuleMetadata(metadata: MetadataURIOrObject) {\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(restricted = false): Promise<void> {\n    await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n","import { ERC20__factory, Royalty, Royalty__factory } from \"@3rdweb/contracts\";\nimport { BigNumber } from \"ethers\";\nimport { ModuleType } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { Module } from \"../core/module\";\nimport { SplitRecipient } from \"../types/SplitRecipient\";\n\nexport interface ISplitsModule {\n  /**\n   * Returns a list of all recipients with their\n   * respective split percentages.\n   *\n   */\n  getAllRecipients(): Promise<SplitRecipient[]>;\n\n  /**\n   * Get the split percentage of a recipient.\n   *\n   * @param address - The address of the recipient.\n   */\n  getRecipientSplitPercentage(address: string): Promise<SplitRecipient>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency.\n   *\n   * @param address - The address of the recipient to check the balance of.\n   */\n  balanceOf(address: string): Promise<BigNumber>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency in a specific currency.\n   *\n   * @param walletAddress - The address of the recipient to check the balance of.\n   * @param tokenAddress - The address of the currency to check the balance in.\n   */\n  balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet.\n   *\n   * @param address - The address to withdraw royalties for.\n   */\n  withdraw(address: string): Promise<void>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet, in the\n   * currency specified by `tokenAddress`.\n   *\n   * For example: If the native currency of a chain is ETH but the user\n   * wants to withdraw their split in $MATIC, they should pass\n   * the address of the $MATIC token as the `tokenAddress` parameter.\n   *\n   * @param walletAddress - The address to withdraw royalties for.\n   */\n  withdrawToken(walletAddress: string, tokenAddress: string): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients.\n   */\n  distribute(): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients in the specified currency.\n   *\n   * @param tokenAddress - The address of the currency to distribute the funds in.\n   */\n  distributeToken(tokenAddress: string): Promise<void>;\n}\n\n/**\n *\n * Access this module by calling {@link ThirdwebSDK.getSplitsModule}\n * @alpha\n */\nexport class SplitsModule extends Module<Royalty> implements ISplitsModule {\n  public static moduleType: ModuleType = ModuleType.SPLITS as const;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Royalty {\n    return Royalty__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return SplitsModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  public async getAllRecipients(): Promise<SplitRecipient[]> {\n    const recipients: SplitRecipient[] = [];\n\n    let index = BigNumber.from(0);\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const recipientAddress = await this.readOnlyContract.payee(index);\n        recipients.push(\n          await this.getRecipientSplitPercentage(recipientAddress),\n        );\n        index = index.add(1);\n      } catch (err: any) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\n          \"method\" in err &&\n          (err[\"method\"] as string).toLowerCase().includes(\"payee(uint256)\")\n        ) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return recipients;\n  }\n\n  public async getRecipientSplitPercentage(\n    address: string,\n  ): Promise<SplitRecipient> {\n    const [totalShares, walletsShares] = await Promise.all([\n      this.readOnlyContract.totalShares(),\n      this.readOnlyContract.shares(address),\n    ]);\n\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage:\n        walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() /\n        1e5,\n    };\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    const walletBalance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    const totalReleased = await this.readOnlyContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n\n    return this._pendingPayment(\n      address,\n      totalReceived,\n      await this.readOnlyContract[\"released(address)\"](address),\n    );\n  }\n\n  public async balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);\n    const walletBalance = await erc20.balanceOf(this.address);\n    const totalReleased = await this.readOnlyContract[\"totalReleased(address)\"](\n      tokenAddress,\n    );\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(\n      walletAddress,\n      totalReceived,\n      await this.readOnlyContract[\"released(address,address)\"](\n        tokenAddress,\n        walletAddress,\n      ),\n    );\n    return await getCurrencyValue(this.providerOrSigner, tokenAddress, value);\n  }\n\n  public async withdraw(address: string): Promise<void> {\n    await this.sendTransaction(\"release(address)\", [address]);\n  }\n\n  private async _pendingPayment(\n    address: string,\n    totalReceived: BigNumber,\n    alreadyReleased: BigNumber,\n  ): Promise<BigNumber> {\n    const addressReceived = totalReceived.mul(\n      await this.readOnlyContract.shares(address),\n    );\n    const totalRoyaltyAvailable = addressReceived.div(\n      await this.readOnlyContract.totalShares(),\n    );\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  public async withdrawToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<void> {\n    await this.sendTransaction(\"release(address,address)\", [\n      tokenAddress,\n      walletAddress,\n    ]);\n  }\n\n  public async distribute(): Promise<void> {\n    await this.sendTransaction(\"distribute()\", []);\n  }\n\n  public async distributeToken(tokenAddress: string): Promise<void> {\n    await this.sendTransaction(\"distribute(address)\", [tokenAddress]);\n  }\n}\n","import { Registry, Registry__factory } from \"@3rdweb/contracts\";\nimport { ContractMetadata, getContractMetadata } from \"../common/contract\";\nimport { Module } from \"./module\";\n\n/**\n * @public\n */\nexport interface IAppModule {\n  address: string;\n  version: number;\n  metadata?: ContractMetadata;\n}\n\n/**\n * The RegistryModule. This should always be created via `getRegistryModule()` on the main SDK.\n * @internal\n */\nexport class RegistryModule extends Module<Registry> {\n  /**\n   * @internal\n   */\n  protected connectContract(): Registry {\n    return Registry__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  public async getProtocolContracts(): Promise<IAppModule[]> {\n    const deployer = await this.getSignerAddress();\n    const maxVersion = await this.readOnlyContract.getProtocolControlCount(\n      deployer,\n    );\n    const versions = Array.from(Array(maxVersion.toNumber()).keys()).reverse();\n    const addresses = await Promise.all(\n      versions.map((v) =>\n        this.readOnlyContract.getProtocolControl(deployer, (v + 1).toString()),\n      ),\n    );\n    const metadatas = await Promise.all(\n      addresses.map((address) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          address,\n          this.ipfsGatewayUrl,\n        ).catch(() => undefined),\n      ),\n    );\n    return versions.map((v, i) => {\n      return {\n        address: addresses[i],\n        version: v,\n        metadata: metadatas[i],\n      };\n    });\n  }\n}\n","import { Provider } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { BytesLike, ContractReceipt, ethers, Signer } from \"ethers\";\nimport type { C } from \"ts-toolbelt\";\nimport { getContractMetadata, uploadMetadata } from \"../common\";\nimport {\n  FORWARDER_ADDRESS,\n  getContractAddressByChainId,\n} from \"../common/address\";\nimport { SUPPORTED_CHAIN_ID } from \"../common/chain\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { AppModule } from \"../modules/app\";\nimport { BundleModule } from \"../modules/bundle\";\nimport { DatastoreModule } from \"../modules/datastore\";\nimport { DropModule } from \"../modules/drop\";\nimport { MarketModule } from \"../modules/market\";\nimport { CollectionModule } from \"../modules/collection\";\nimport { NFTModule } from \"../modules/nft\";\nimport { PackModule } from \"../modules/pack\";\nimport { SplitsModule } from \"../modules/royalty\";\nimport { CurrencyModule } from \"../modules/token\";\nimport { ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { IAppModule, RegistryModule } from \"./registry\";\nimport {\n  ForwardRequestMessage,\n  MetadataURIOrObject,\n  ProviderOrSigner,\n  ValidProviderInput,\n} from \"./types\";\n\n/**\n * The optional options that can be passed to the SDK.\n * @public\n */\nexport interface ISDKOptions {\n  /**\n   * An optional IPFS Gateway. (Default: `https://cloudflare-ipfs.com/ipfs/`).\n   */\n  ipfsGatewayUrl: string;\n\n  /**\n   * Optional Registry Contract Address\n   */\n  registryContractAddress: string;\n\n  /**\n   * maxGasPrice for transactions\n   */\n  maxGasPriceInGwei: number;\n\n  /**\n   * Optional default speed setting for transactions\n   */\n  gasSpeed: string;\n\n  /**\n   * Optional relayer url to be used for gasless transaction\n   */\n  transactionRelayerUrl: string;\n\n  /**\n   * Optional function for sending transaction to relayer\n   * @returns transaction hash of relayed transaction.\n   */\n  transactionRelayerSendFunction: (\n    message: ForwardRequestMessage,\n    signature: BytesLike,\n  ) => Promise<string>;\n\n  /**\n   * Optional trusted forwarder address overwrite\n   */\n  transactionRelayerForwarderAddress: string;\n\n  /**\n   * Optional read only RPC url\n   */\n  readOnlyRpcUrl: string;\n}\n\n/**\n * @internal\n */\nexport type AnyContract =\n  | typeof AppModule\n  | typeof BundleModule\n  | typeof NFTModule\n  | typeof CurrencyModule\n  | typeof MarketModule\n  | typeof PackModule\n  | typeof RegistryModule\n  | typeof DropModule\n  | typeof DatastoreModule\n  | typeof SplitsModule;\n\n/**\n * The entrypoint to the SDK.\n * @public\n */\nexport class ThirdwebSDK {\n  // default options\n  private options: ISDKOptions;\n  private defaultOptions: ISDKOptions = {\n    ipfsGatewayUrl: \"https://cloudflare-ipfs.com/ipfs/\",\n    registryContractAddress: \"\",\n    maxGasPriceInGwei: 100,\n    gasSpeed: \"fastest\",\n    transactionRelayerUrl: \"\",\n    transactionRelayerSendFunction: this.defaultRelayerSendFunction.bind(this),\n    transactionRelayerForwarderAddress: FORWARDER_ADDRESS,\n    readOnlyRpcUrl: \"\",\n  };\n  private modules = new Map<string, C.Instance<AnyContract>>();\n  private providerOrSigner: ProviderOrSigner;\n\n  private _signer: Signer | null = null;\n\n  /**\n   * The active Signer, you should not need to access this unless you are deploying new modules.\n   * @internal\n   */\n  public get signer(): Signer | null {\n    return this._signer;\n  }\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  private _registry: RegistryModule | null = null;\n  private get registry(): RegistryModule | null {\n    return this._registry;\n  }\n  private set registry(value: RegistryModule | null) {\n    this._registry = value;\n  }\n\n  constructor(\n    providerOrNetwork: ValidProviderInput,\n    opts?: Partial<ISDKOptions>,\n  ) {\n    this.providerOrSigner = this.setProviderOrSigner(providerOrNetwork);\n    this.options = {\n      ...this.defaultOptions,\n      ...opts,\n    };\n  }\n  private updateModuleSigners() {\n    for (const [, _module] of this.modules) {\n      if (this.isReadOnly()) {\n        _module.clearSigner();\n      }\n      _module.setProviderOrSigner(this.providerOrSigner);\n    }\n  }\n\n  private async getChainID(): Promise<number> {\n    const provider = Provider.isProvider(this.providerOrSigner)\n      ? this.providerOrSigner\n      : this.providerOrSigner.provider;\n    invariant(provider, \"getRegistryAddress() -- No Provider\");\n\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  private async getRegistryAddress(): Promise<string | undefined> {\n    if (this.options.registryContractAddress) {\n      return this.options.registryContractAddress;\n    }\n    return getContractAddressByChainId(\n      (await this.getChainID()) as SUPPORTED_CHAIN_ID,\n    );\n  }\n  /**\n   *\n   * @param address - The contract address of the given Registry module.\n   * @returns The Registry Module.\n   * @internal\n   */\n  private async getRegistryModule(): Promise<RegistryModule> {\n    const address = await this.getRegistryAddress();\n    invariant(address, \"getRegistryModule() -- No Address\");\n    return (this.registry = this.getOrCreateModule(address, RegistryModule));\n  }\n\n  private getOrCreateModule<T extends AnyContract>(\n    address: string,\n    _Module: T,\n  ): C.Instance<T> {\n    if (this.modules.has(address)) {\n      return this.modules.get(address) as C.Instance<T>;\n    }\n    const _newModule = new _Module(\n      this.providerOrSigner,\n      address,\n      this.options,\n      this,\n    );\n    this.modules.set(address, _newModule);\n    return _newModule as C.Instance<T>;\n  }\n\n  /**\n   * you should not need this unless you are creating new modules\n   * @returns the active registry module forwarder address\n   * @internal\n   */\n  public async getForwarderAddress(): Promise<string> {\n    return await (\n      this.registry || (await this.getRegistryModule())\n    ).readOnlyContract.forwarder();\n  }\n\n  /**\n   * Call this to get the current apps.\n   * @returns All currently registered apps for the connected wallet\n   */\n  public async getApps(): Promise<IAppModule[]> {\n    return (\n      this.registry || (await this.getRegistryModule())\n    ).getProtocolContracts();\n  }\n\n  /**\n   * Call this to create a new app\n   * @param metadata - metadata URI or a JSON object\n   * @returns The transaction receipt\n   */\n  public async createApp(\n    metadata: MetadataURIOrObject,\n  ): Promise<ContractReceipt> {\n    const registryContract = (this.registry || (await this.getRegistryModule()))\n      .contract;\n    const gasPrice = await this.getGasPrice();\n    const txOpts: Record<string, any> = {};\n    // could technically be `0` so simple falsy check does not suffice\n    if (typeof gasPrice === \"number\") {\n      txOpts.gasPrice = parseUnits(gasPrice.toString(), \"gwei\");\n    }\n\n    const uri = await uploadMetadata(\n      metadata,\n      registryContract.address,\n      (await this.signer?.getAddress()) || undefined,\n    );\n\n    const txn = await registryContract.deployProtocol(uri, txOpts);\n    return await txn.wait();\n  }\n\n  /**\n   *\n   * @param speed - what speed to prefer, default: \"fastest\"\n   * @param maxGas - how much gas to use at most, default: 100\n   * @returns the optiomal gas price\n   */\n  public async getGasPrice(\n    speed?: string,\n    maxGasGwei?: number,\n  ): Promise<number | null> {\n    const _speed = speed ? speed : this.options.gasSpeed;\n    const _maxGas = maxGasGwei ? maxGasGwei : this.options.maxGasPriceInGwei;\n    return await getGasPriceForChain(await this.getChainID(), _speed, _maxGas);\n  }\n\n  /**\n   *\n   * @param providerOrSignerOrNetwork - A valid \"ethers\" Provider, Signer or a Network address to create a Provider with.\n   * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.\n   */\n  public setProviderOrSigner(providerOrSignerOrNetwork: ValidProviderInput) {\n    if (\n      Provider.isProvider(providerOrSignerOrNetwork) ||\n      Signer.isSigner(providerOrSignerOrNetwork)\n    ) {\n      // sdk instantiated with a provider / signer\n      this.providerOrSigner = providerOrSignerOrNetwork;\n    } else {\n      // sdk instantiated with a network name / network url\n      this.providerOrSigner = ethers.getDefaultProvider(\n        providerOrSignerOrNetwork,\n      );\n    }\n    // if we're setting a signer then also update that\n    if (Signer.isSigner(providerOrSignerOrNetwork)) {\n      this.signer = providerOrSignerOrNetwork;\n    } else {\n      this.signer = null;\n    }\n    this.updateModuleSigners();\n    return this.providerOrSigner;\n  }\n\n  /**\n   *\n   * @public\n   * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid \"Signer.\")\n   */\n  public isReadOnly(): boolean {\n    return !Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @public\n   * @returns The contract metadata for the given contract address.\n   */\n  public async getContractMetadata(\n    address: string,\n  ): Promise<ModuleMetadataNoType> {\n    return {\n      ...(await getContractMetadata(\n        this.providerOrSigner,\n        address,\n        this.options.ipfsGatewayUrl,\n      )),\n      address,\n    };\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given App module.\n   * @returns The App Module.\n   */\n  public getAppModule(address: string): AppModule {\n    return this.getOrCreateModule(address, AppModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given NFT module.\n   * @returns The NFT Module.\n   */\n  public getNFTModule(address: string): NFTModule {\n    return this.getOrCreateModule(address, NFTModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Collection module.\n   * @returns The Bundle Module.\n   * @deprecated Use the new {@link getBundleModule} function instead.\n   */\n  public getCollectionModule(address: string): CollectionModule {\n    return this.getBundleModule(address);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Bundle module.\n   * @returns The Bundle Module.\n   */\n  public getBundleModule(address: string): BundleModule {\n    return this.getOrCreateModule(address, BundleModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Pack module.\n   * @returns The Pack Module.\n   */\n  public getPackModule(address: string): PackModule {\n    return this.getOrCreateModule(address, PackModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Currency module.\n   * @returns The Currency Module.\n   */\n  public getCurrencyModule(address: string): CurrencyModule {\n    return this.getOrCreateModule(address, CurrencyModule);\n  }\n\n  /**\n   * @alpha\n   * @param address - The contract address of the given Datastore module.\n   * @returns The Datastore Module.\n   */\n  public getDatastoreModule(address: string): DatastoreModule {\n    return this.getOrCreateModule(address, DatastoreModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Market module.\n   * @returns The Market Module.\n   */\n  public getMarketModule(address: string): MarketModule {\n    return this.getOrCreateModule(address, MarketModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Drop module.\n   * @returns The Drop Module.\n   */\n  public getDropModule(address: string): DropModule {\n    return this.getOrCreateModule(address, DropModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Royalty module.\n   * @returns The Splits Module.\n   */\n  public getSplitsModule(address: string): SplitsModule {\n    return this.getOrCreateModule(address, SplitsModule);\n  }\n\n  /**\n   * Used for SDK that requires js bridging like Unity SDK.\n   * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.\n   *\n   * @internal\n   * @param route - sdk execution route\n   * @param payload - request arguments for the function\n   * @returns\n   */\n  public invokeRoute(route: string, payload: Record<string, any>) {\n    const parts = route.split(\".\");\n\n    if (parts.length > 0 && parts[0] === \"thirdweb\") {\n      if (parts.length === 4) {\n        // thirdweb.module_name.address.function_name\n        const moduleName = parts[1];\n        const moduleAddress = parts[2];\n        const funcName = parts[3];\n        return (this.getModuleByName(moduleName, moduleAddress) as any)[\n          funcName\n        ](...(payload.arguments || []));\n      } else if (parts.length === 3) {\n        // reserved for: thirdweb.bridge.function_name\n        throw new Error(\"reserved for thirdweb.bridge.function_name\");\n      } else if (parts.length === 2) {\n        // main sdk functions: thirdweb.function_name\n        const funcName = parts[1];\n        return (this as any)[funcName](...(payload.arguments || []));\n      }\n    }\n\n    throw new Error(\"uknown route\");\n  }\n\n  // used for invoke route for unity sdk.\n  private getModuleByName(name: string, address: string) {\n    if (name === \"currency\") {\n      return this.getCurrencyModule(address);\n    } else if (name === \"nft\") {\n      return this.getNFTModule(address);\n    } else if (name === \"market\") {\n      return this.getMarketModule(address);\n    } else if (name === \"bundle\" || name === \"collection\") {\n      return this.getCollectionModule(address);\n    } else if (name === \"drop\") {\n      return this.getDropModule(address);\n    } else if (name === \"splits\") {\n      return this.getSplitsModule(address);\n    } else if (name === \"pack\") {\n      return this.getPackModule(address);\n    } else if (name === \"datastore\") {\n      return this.getDatastoreModule(address);\n    } else if (name === \"app\" || name === \"project\") {\n      return this.getAppModule(address);\n    }\n    throw new Error(\"unsupported module\");\n  }\n\n  private async defaultRelayerSendFunction(\n    message: ForwardRequestMessage,\n    signature: BytesLike,\n  ): Promise<string> {\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      type: \"forward\",\n    });\n    // console.log(\"POST\", this.options.transactionRelayerUrl, body);\n    const response = await fetch(this.options.transactionRelayerUrl, {\n      method: \"POST\",\n      body,\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\"relay transaction failed\");\n  }\n}\n\n/**\n * Deprecated, please use ThirdwebSDK instead.\n * @public\n * @deprecated use ThirdwebSDK instead\n */\nexport const NFTLabsSDK = ThirdwebSDK;\n","/**\n * The {@link https://thirdweb.com | thirdweb} typescript sdk.\n *\n * @remarks\n * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.\n *\n * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )\n *\n *\n * @example\n * To get you started here's how you would instantiate the SDK and fetch some NFTs\n *\n * 1. Install the sdk\n * ```shell\n * npm install @3rdweb/sdk\n * ```\n *\n * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.\n *\n * 3. Write the tiniest amount of code!\n * ```typescript\n *  1 | import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *  2 | import type { NFTModule, NFTMetadataOwner } from \"@3rdweb/sdk\";\n *  3 |\n *  5 | const contractAddress = \"0x...\"; // your contract address from step 2\n *  6 |\n *  7 | const sdk = new ThirdwebSDK();\n *  8 |\n *  9 | const nftModule: NFTModule = sdk.getNftModule(contractAddress);\n * 10 |\n * 11 | const nftListWithOwnerAddress: NFTMetadataOwner[] = await nftModule.getAllWithOwner();\n * 12 |\n * 13 | console.log(nftListWithOwnerAddress);\n * ```\n * ```\n * Output\n * => [\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       ...\n *    ]\n * ```\n *\n * @packageDocumentation\n */\n\nimport fetch from \"node-fetch\";\n\nexport * from \"./common\";\nexport type { InvariantError } from \"./common/invariant\";\nexport * from \"./core\";\nexport type { Module, ModuleWithRoles } from \"./core/module\";\nexport type { IAppModule } from \"./core/registry\";\nexport * from \"./core/types\";\nexport * from \"./modules\";\nexport * from \"./types\";\n\nif (!globalThis.fetch) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  globalThis.fetch = fetch;\n}\n"],"names":["undefined","globalThis","FormData","require","replaceIpfsWithGateway","ipfsUrl","gatewayUrl","endsWith","replace","uploadToIPFS","data","contractAddress","signerAddress","headers","formData","append","fetch","method","body","res","json","IpfsUri","uploadMetadata","metadata","JSON","stringify","InterfaceId_IERC721","arrayify","InterfaceId_IERC1155","contractUriABI","inputs","name","outputs","internalType","type","stateMutability","getContractMetadata","provider","address","ipfsGatewayUrl","contract","Contract","contractURI","uri","meta","entity","image","isContract","getCode","getCurrencyMetadata","providerOrSigner","asset","toLowerCase","AddressZero","erc20","ERC20__factory","connect","Promise","all","symbol","decimals","getCurrencyValue","price","value","toString","displayValue","formatUnits","NotFoundError","Error","ChainId","ChainlinkVrf","Polygon","vrfCoordinator","linkTokenAddress","keyHash","fees","ethers","utils","parseEther","Mumbai","Rinkeby","Mainnet","ModuleType","convertNameToModuleType","moduleName","$enum","getValueOrDefault","toUpperCase","convertModuleTypeToName","moduleType","getKeyOrDefault","tokenUriABI","getMetadataWithoutContract","tokenId","getTokenMetadata","getTokenUri","id","tokenURI","RolesMap","admin","minter","pauser","transfer","editor","lister","_role","getRoleHash","role","hexZeroPad","keccak256","toUtf8Bytes","getGasStationUrl","chainId","getGasPriceForChain","speed","maxGasPrice","gasStationUrl","gas","Math","min","console","error","FORWARDER_ADDRESS","CONTRACT_ADDRESSES","registry","Avalanche","AvalancheFujiTestnet","Fantom","FantomTestnet","getContractAddressByChainId","invariant","condition","message","ForwardRequest","_nonces","getAndIncrementNonce","forwarder","getNonce","nonce","BigNumber","from","add","Module","options","sdk","_providerOrSigner","_signer","readOnlyContract","setProviderOrSigner","connectContract","readOnlyRpcUrl","getDefaultProvider","exists","getProvider","getMetadata","getModuleType","getProviderOrSigner","setMetadata","sendTransaction","Signer","isSigner","signer","clearSigner","getSigner","hasValidSigner","getSignerAddress","getAddress","getChainID","getNetwork","getCallOverrides","gasSpeed","maxGasPriceInGwei","gasPriceChain","gasPrice","parseUnits","fn","args","callOverrides","transactionRelayerUrl","sendGaslessTransaction","sendAndWaitForTransaction","functions","tx","wait","log","to","encodeFunctionData","estimateGas","mul","forwarderAddress","transactionRelayerForwarderAddress","Forwarder__factory","domain","version","verifyingContract","types","_signTypedData","signature","transactionRelayerSendFunction","txHash","waitForTransaction","parseEventLogs","eventName","logs","event","decodeEventLog","topics","e","ModuleWithRoles","getModuleRoles","getRoleMembers","roles","includes","roleHash","getRoleMemberCount","count","toNumber","Array","keys","map","i","getRoleMember","getAllRoleMembers","length","grantRole","revokeRole","CommonModuleMetadata","description","externalLink","__decorate","JsonProperty","String","PropertyConvertingMode","IGNORE_NULLABLE","JsonObject","BundleModuleMetadata","sellerFeeBasisPoints","feeRecipient","Number","CurrencyModuleMetadata","DatastoreModuleMetadata","DropModuleMetadata","primarySaleFeeBasisPoints","maxSupply","primarySaleRecipientAddress","baseTokenUri","MarketModuleMetadata","marketFeeBasisPoints","NftModuleMetadata","PackModuleMetadata","SplitsModuleMetadata","recipientSplits","CurrencyModule","Coin__factory","get","getValue","totalSupply","balance","balanceOf","allowance","spender","allowanceOf","owner","amount","setAllowance","mint","mintTo","mintBatchTo","encoded","arg","push","burn","burnFrom","transferFrom","setModuleMetadata","setRestrictedTransfer","restricted","transferBatch","transferFromBatch","fromAddress","CURRENCY","AppModule","jsonConvert","JsonConvert","ProtocolControl__factory","getModuleAddress","getAllModulesOfType","getNFTAddress","NFT","getBundleAddress","BUNDLE","getPackAddress","PACK","getCurrencyAddress","getMarketAddress","MARKET","getDropAddress","DROP","getDatastoreAddress","DATASTORE","getRoyaltyTreasury","getAllContractMetadata","addresses","metadatas","filter","d","getPackModules","m","getNFTModules","getCollectionModules","getBundleModules","getCurrencyModules","getDatastoreModules","getMarketModules","getDropModules","getAllModuleMetadata","filterByModuleType","moduleTypesToGet","moduleAddresses","reduce","acc","curr","concat","setRoyaltyTreasury","treasury","setModuleRoyaltyTreasury","moduleAddress","withdrawFunds","currency","_deployModule","factory","getGasPrice","txOpts","ContractFactory","abi","bytecode","deploy","deployed","addModule","addModuleTx","deployBundleModule","serializedMetadata","serializeObject","metadataUri","COLLECTION","getForwarderAddress","NFTCollection__factory","getCollectionModule","deploySplitsModule","SPLITS","s","shares","Royalty__factory","getSplitsModule","deployNftModule","NFT__factory","getNFTModule","deployCurrencyModule","getCurrencyModule","deployMarketModule","Market__factory","getMarketModule","deployPackModule","Pack__factory","getPackModule","deployDropModule","isAddress","LazyNFT__factory","getDropModule","deployDatastoreModule","DataStore__factory","getDatastoreModule","BundleModule","creator","supply","ownedByAddress","getAll","nextTokenId","maxId","isApproved","operator","assetContract","assetId","isApprovedForAll","ERC721__factory","approved","getApproved","isTokenApproved","setApproval","create","createBatch","metadataWithSupply","createAndMintBatch","createAndMint","a","uris","supplies","receipt","tokenIds","createWithToken","tokenContract","tokenAmount","createWithErc20","createWithNFT","createWithERC721","mintBatch","ids","amounts","burnBatch","burnBatchFrom","account","transferBatchFrom","setRoyaltyBps","getOwned","_address","balanceOfBatch","fill","balances","ownedBalances","b","gt","DatastoreModule","getUint","key","setUint","DropModule","Drop__factory","ownerOf","getAllUnclaimed","nextMintTokenId","unmintedId","sub","getAllClaimed","indices","tokenOfOwnerByIndex","getActiveMintCondition","getLastStartedMintConditionIndex","index","mintConditions","getAllMintConditions","conditions","maxTotalSupply","totalUnclaimedSupply","totalClaimedSupply","lazyMint","lazyMintBatch","lazyMintAmount","setPublicMintConditions","_conditions","c","startTimestamp","startTimestampInSeconds","maxMintSupply","currentMintSupply","quantityLimitPerTransaction","waitTimeSecondsLimitPerTransaction","pricePerToken","merkleRoot","claim","quantity","proofs","mintCondition","overrides","setBaseTokenUri","setMaxTotalSupply","MarketModule","transformResultToListing","listing","listingId","seller","tokenMetadata","currencyContract","currencyMetadata","saleStart","Date","saleEnd","lte","MAX_SAFE_INTEGER","getListing","getAllListings","listings","getListingsByAsset","getListingsBySeller","getListingsByAssetContract","l","eq","filterSeller","filterTokenContract","filterTokenId","getMarketFeeBps","marketFeeBps","list","tokensPerBuyer","secondsUntilStart","secondsUntilEnd","erc165","ERC165__factory","supportsInterface","isERC721","setApprovalForAll","ERC1155__factory","unlistAll","maxQuantity","unlist","buy","totalPrice","lt","increaseAllowance","setMarketFeeBps","fee","NFTModule","getWithOwner","getAllWithOwner","PackModule","open","packId","requestId","opener","resolve","once","filters","PackOpenFulfilled","_packId","_opener","_requestId","rewardContract","rewardIds","fulfillEvent","rewardId","getPack","state","currentSupply","openStart","getNFTs","getPackWithRewards","packReward","source","rewards","reward","amountsPacked","assets","packParams","defaultAbiCoder","encode","secondsUntilOpenStart","rewardsPerOpen","safeBatchTransferFrom","events","find","getLinkBalance","chainlink","depositLink","withdrawLink","SplitsModule","getAllRecipients","recipients","payee","recipientAddress","getRecipientSplitPercentage","totalShares","walletsShares","splitPercentage","div","getBalance","walletBalance","totalReleased","totalReceived","_pendingPayment","balanceOfToken","walletAddress","tokenAddress","withdraw","alreadyReleased","addressReceived","totalRoyaltyAvailable","withdrawToken","distribute","distributeToken","RegistryModule","Registry__factory","getProtocolContracts","deployer","getProtocolControlCount","maxVersion","versions","reverse","v","getProtocolControl","ThirdwebSDK","providerOrNetwork","opts","defaultOptions","registryContractAddress","defaultRelayerSendFunction","bind","modules","Map","_registry","updateModuleSigners","_module","isReadOnly","Provider","isProvider","getRegistryAddress","getRegistryModule","getOrCreateModule","_Module","has","_newModule","set","getApps","createApp","registryContract","deployProtocol","txn","maxGasGwei","_speed","_maxGas","providerOrSignerOrNetwork","getAppModule","getBundleModule","invokeRoute","route","payload","parts","split","funcName","getModuleByName","arguments","request","response","ok","resp","result","parse","NFTLabsSDK"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,IAAI,UAAU,OAAO,EAAE;AAElC;AACA,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC;AAC5B,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC;AACjC,EAAE,IAAIA,WAAS,CAAC;AAChB,EAAE,IAAI,OAAO,GAAG,OAAO,MAAM,KAAK,UAAU,GAAG,MAAM,GAAG,EAAE,CAAC;AAC3D,EAAE,IAAI,cAAc,GAAG,OAAO,CAAC,QAAQ,IAAI,YAAY,CAAC;AACxD,EAAE,IAAI,mBAAmB,GAAG,OAAO,CAAC,aAAa,IAAI,iBAAiB,CAAC;AACvE,EAAE,IAAI,iBAAiB,GAAG,OAAO,CAAC,WAAW,IAAI,eAAe,CAAC;AACjE;AACA,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;AACnC,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE;AACpC,MAAM,KAAK,EAAE,KAAK;AAClB,MAAM,UAAU,EAAE,IAAI;AACtB,MAAM,YAAY,EAAE,IAAI;AACxB,MAAM,QAAQ,EAAE,IAAI;AACpB,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AACpB,GAAG;AACH,EAAE,IAAI;AACN;AACA,IAAI,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AACnB,GAAG,CAAC,OAAO,GAAG,EAAE;AAChB,IAAI,MAAM,GAAG,SAAS,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;AACvC,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AAC9B,KAAK,CAAC;AACN,GAAG;AACH;AACA,EAAE,SAAS,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE;AACrD;AACA,IAAI,IAAI,cAAc,GAAG,OAAO,IAAI,OAAO,CAAC,SAAS,YAAY,SAAS,GAAG,OAAO,GAAG,SAAS,CAAC;AACjG,IAAI,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;AAC5D,IAAI,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;AACjD;AACA;AACA;AACA,IAAI,SAAS,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACjE;AACA,IAAI,OAAO,SAAS,CAAC;AACrB,GAAG;AACH,EAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;AAClC,IAAI,IAAI;AACR,MAAM,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;AACxD,KAAK,CAAC,OAAO,GAAG,EAAE;AAClB,MAAM,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACzC,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,sBAAsB,GAAG,gBAAgB,CAAC;AAChD,EAAE,IAAI,sBAAsB,GAAG,gBAAgB,CAAC;AAChD,EAAE,IAAI,iBAAiB,GAAG,WAAW,CAAC;AACtC,EAAE,IAAI,iBAAiB,GAAG,WAAW,CAAC;AACtC;AACA;AACA;AACA,EAAE,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,SAAS,GAAG,EAAE;AACzB,EAAE,SAAS,iBAAiB,GAAG,EAAE;AACjC,EAAE,SAAS,0BAA0B,GAAG,EAAE;AAC1C;AACA;AACA;AACA,EAAE,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAC7B,EAAE,MAAM,CAAC,iBAAiB,EAAE,cAAc,EAAE,YAAY;AACxD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL;AACA,EAAE,IAAI,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC;AACvC,EAAE,IAAI,uBAAuB,GAAG,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3E,EAAE,IAAI,uBAAuB;AAC7B,MAAM,uBAAuB,KAAK,EAAE;AACpC,MAAM,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,cAAc,CAAC,EAAE;AAC5D;AACA;AACA,IAAI,iBAAiB,GAAG,uBAAuB,CAAC;AAChD,GAAG;AACH;AACA,EAAE,IAAI,EAAE,GAAG,0BAA0B,CAAC,SAAS;AAC/C,IAAI,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAC3D,EAAE,iBAAiB,CAAC,SAAS,GAAG,0BAA0B,CAAC;AAC3D,EAAE,MAAM,CAAC,EAAE,EAAE,aAAa,EAAE,0BAA0B,CAAC,CAAC;AACxD,EAAE,MAAM,CAAC,0BAA0B,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;AACvE,EAAE,iBAAiB,CAAC,WAAW,GAAG,MAAM;AACxC,IAAI,0BAA0B;AAC9B,IAAI,iBAAiB;AACrB,IAAI,mBAAmB;AACvB,GAAG,CAAC;AACJ;AACA;AACA;AACA,EAAE,SAAS,qBAAqB,CAAC,SAAS,EAAE;AAC5C,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,SAAS,MAAM,EAAE;AACzD,MAAM,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,GAAG,EAAE;AAC9C,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACzC,OAAO,CAAC,CAAC;AACT,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA,EAAE,OAAO,CAAC,mBAAmB,GAAG,SAAS,MAAM,EAAE;AACjD,IAAI,IAAI,IAAI,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,WAAW,CAAC;AAClE,IAAI,OAAO,IAAI;AACf,QAAQ,IAAI,KAAK,iBAAiB;AAClC;AACA;AACA,QAAQ,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,MAAM,mBAAmB;AAC/D,QAAQ,KAAK,CAAC;AACd,GAAG,CAAC;AACJ;AACA,EAAE,OAAO,CAAC,IAAI,GAAG,SAAS,MAAM,EAAE;AAClC,IAAI,IAAI,MAAM,CAAC,cAAc,EAAE;AAC/B,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;AAChE,KAAK,MAAM;AACX,MAAM,MAAM,CAAC,SAAS,GAAG,0BAA0B,CAAC;AACpD,MAAM,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;AAC7D,KAAK;AACL,IAAI,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACzC,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,CAAC,KAAK,GAAG,SAAS,GAAG,EAAE;AAChC,IAAI,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAC5B,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,aAAa,CAAC,SAAS,EAAE,WAAW,EAAE;AACjD,IAAI,SAAS,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE;AAClD,MAAM,IAAI,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AAC/D,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACnC,QAAQ,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3B,OAAO,MAAM;AACb,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;AAChC,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AACjC,QAAQ,IAAI,KAAK;AACjB,YAAY,OAAO,KAAK,KAAK,QAAQ;AACrC,YAAY,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;AAC3C,UAAU,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,EAAE;AACzE,YAAY,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACnD,WAAW,EAAE,SAAS,GAAG,EAAE;AAC3B,YAAY,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAClD,WAAW,CAAC,CAAC;AACb,SAAS;AACT;AACA,QAAQ,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,SAAS,EAAE;AACnE;AACA;AACA;AACA,UAAU,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;AACnC,UAAU,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1B,SAAS,EAAE,SAAS,KAAK,EAAE;AAC3B;AACA;AACA,UAAU,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACzD,SAAS,CAAC,CAAC;AACX,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,eAAe,CAAC;AACxB;AACA,IAAI,SAAS,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE;AAClC,MAAM,SAAS,0BAA0B,GAAG;AAC5C,QAAQ,OAAO,IAAI,WAAW,CAAC,SAAS,OAAO,EAAE,MAAM,EAAE;AACzD,UAAU,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAC/C,SAAS,CAAC,CAAC;AACX,OAAO;AACP;AACA,MAAM,OAAO,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,eAAe,GAAG,eAAe,CAAC,IAAI;AAC9C,UAAU,0BAA0B;AACpC;AACA;AACA,UAAU,0BAA0B;AACpC,SAAS,GAAG,0BAA0B,EAAE,CAAC;AACzC,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B,GAAG;AACH;AACA,EAAE,qBAAqB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACjD,EAAE,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,mBAAmB,EAAE,YAAY;AACnE,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL,EAAE,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AACxC;AACA;AACA;AACA;AACA,EAAE,OAAO,CAAC,KAAK,GAAG,SAAS,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE;AAC7E,IAAI,IAAI,WAAW,KAAK,KAAK,CAAC,EAAE,WAAW,GAAG,OAAO,CAAC;AACtD;AACA,IAAI,IAAI,IAAI,GAAG,IAAI,aAAa;AAChC,MAAM,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC;AAC/C,MAAM,WAAW;AACjB,KAAK,CAAC;AACN;AACA,IAAI,OAAO,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC;AAC/C,QAAQ,IAAI;AACZ,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,MAAM,EAAE;AAC1C,UAAU,OAAO,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;AAC1D,SAAS,CAAC,CAAC;AACX,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;AACpD,IAAI,IAAI,KAAK,GAAG,sBAAsB,CAAC;AACvC;AACA,IAAI,OAAO,SAAS,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE;AACxC,MAAM,IAAI,KAAK,KAAK,iBAAiB,EAAE;AACvC,QAAQ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;AACxD,OAAO;AACP;AACA,MAAM,IAAI,KAAK,KAAK,iBAAiB,EAAE;AACvC,QAAQ,IAAI,MAAM,KAAK,OAAO,EAAE;AAChC,UAAU,MAAM,GAAG,CAAC;AACpB,SAAS;AACT;AACA;AACA;AACA,QAAQ,OAAO,UAAU,EAAE,CAAC;AAC5B,OAAO;AACP;AACA,MAAM,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC9B,MAAM,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AACxB;AACA,MAAM,OAAO,IAAI,EAAE;AACnB,QAAQ,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACxC,QAAQ,IAAI,QAAQ,EAAE;AACtB,UAAU,IAAI,cAAc,GAAG,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACtE,UAAU,IAAI,cAAc,EAAE;AAC9B,YAAY,IAAI,cAAc,KAAK,gBAAgB,EAAE,SAAS;AAC9D,YAAY,OAAO,cAAc,CAAC;AAClC,WAAW;AACX,SAAS;AACT;AACA,QAAQ,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,EAAE;AACvC;AACA;AACA,UAAU,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC;AACrD;AACA,SAAS,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AAC/C,UAAU,IAAI,KAAK,KAAK,sBAAsB,EAAE;AAChD,YAAY,KAAK,GAAG,iBAAiB,CAAC;AACtC,YAAY,MAAM,OAAO,CAAC,GAAG,CAAC;AAC9B,WAAW;AACX;AACA,UAAU,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACjD;AACA,SAAS,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE;AAChD,UAAU,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAChD,SAAS;AACT;AACA,QAAQ,KAAK,GAAG,iBAAiB,CAAC;AAClC;AACA,QAAQ,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACtD,QAAQ,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AACtC;AACA;AACA,UAAU,KAAK,GAAG,OAAO,CAAC,IAAI;AAC9B,cAAc,iBAAiB;AAC/B,cAAc,sBAAsB,CAAC;AACrC;AACA,UAAU,IAAI,MAAM,CAAC,GAAG,KAAK,gBAAgB,EAAE;AAC/C,YAAY,SAAS;AACrB,WAAW;AACX;AACA,UAAU,OAAO;AACjB,YAAY,KAAK,EAAE,MAAM,CAAC,GAAG;AAC7B,YAAY,IAAI,EAAE,OAAO,CAAC,IAAI;AAC9B,WAAW,CAAC;AACZ;AACA,SAAS,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AAC5C,UAAU,KAAK,GAAG,iBAAiB,CAAC;AACpC;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AACnC,UAAU,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AACnC,SAAS;AACT,OAAO;AACP,KAAK,CAAC;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,mBAAmB,CAAC,QAAQ,EAAE,OAAO,EAAE;AAClD,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACnD,IAAI,IAAI,MAAM,KAAKA,WAAS,EAAE;AAC9B;AACA;AACA,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B;AACA,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AACtC;AACA,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;AACzC;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC,UAAU,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAClC,UAAU,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACjD;AACA,UAAU,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AAC1C;AACA;AACA,YAAY,OAAO,gBAAgB,CAAC;AACpC,WAAW;AACX,SAAS;AACT;AACA,QAAQ,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AACjC,QAAQ,OAAO,CAAC,GAAG,GAAG,IAAI,SAAS;AACnC,UAAU,gDAAgD,CAAC,CAAC;AAC5D,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAClE;AACA,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACjC,MAAM,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AAC/B,MAAM,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AAC/B,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;AAC1B;AACA,IAAI,IAAI,EAAE,IAAI,EAAE;AAChB,MAAM,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AAC/B,MAAM,OAAO,CAAC,GAAG,GAAG,IAAI,SAAS,CAAC,kCAAkC,CAAC,CAAC;AACtE,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;AACnB;AACA;AACA,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;AAChD;AACA;AACA,MAAM,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE;AACvC,QAAQ,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAChC,QAAQ,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAChC,OAAO;AACP;AACA,KAAK,MAAM;AACX;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK;AACL;AACA;AACA;AACA,IAAI,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC5B,IAAI,OAAO,gBAAgB,CAAC;AAC5B,GAAG;AACH;AACA;AACA;AACA,EAAE,qBAAqB,CAAC,EAAE,CAAC,CAAC;AAC5B;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,WAAW;AACxC,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,UAAU,EAAE,WAAW;AACpC,IAAI,OAAO,oBAAoB,CAAC;AAChC,GAAG,CAAC,CAAC;AACL;AACA,EAAE,SAAS,YAAY,CAAC,IAAI,EAAE;AAC9B,IAAI,IAAI,KAAK,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;AACpC;AACA,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,MAAM,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,KAAK;AACL;AACA,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,MAAM,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,MAAM,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,KAAK;AACL;AACA,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,GAAG;AACH;AACA,EAAE,SAAS,aAAa,CAAC,KAAK,EAAE;AAChC,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC;AACxC,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC3B,IAAI,OAAO,MAAM,CAAC,GAAG,CAAC;AACtB,IAAI,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC;AAC9B,GAAG;AACH;AACA,EAAE,SAAS,OAAO,CAAC,WAAW,EAAE;AAChC;AACA;AACA;AACA,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;AAC3C,IAAI,WAAW,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACrB,GAAG;AACH;AACA,EAAE,OAAO,CAAC,IAAI,GAAG,SAAS,MAAM,EAAE;AAClC,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB,IAAI,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;AAC5B,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,KAAK;AACL,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;AACnB;AACA;AACA;AACA,IAAI,OAAO,SAAS,IAAI,GAAG;AAC3B,MAAM,OAAO,IAAI,CAAC,MAAM,EAAE;AAC1B,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC7B,QAAQ,IAAI,GAAG,IAAI,MAAM,EAAE;AAC3B,UAAU,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;AAC3B,UAAU,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAC5B,UAAU,OAAO,IAAI,CAAC;AACtB,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,CAAC;AACN,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,MAAM,CAAC,QAAQ,EAAE;AAC5B,IAAI,IAAI,QAAQ,EAAE;AAClB,MAAM,IAAI,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;AACpD,MAAM,IAAI,cAAc,EAAE;AAC1B,QAAQ,OAAO,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7C,OAAO;AACP;AACA,MAAM,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;AAC/C,QAAQ,OAAO,QAAQ,CAAC;AACxB,OAAO;AACP;AACA,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACnC,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,SAAS,IAAI,GAAG;AAC3C,UAAU,OAAO,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE;AACxC,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;AAC1C,cAAc,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvC,cAAc,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAChC,cAAc,OAAO,IAAI,CAAC;AAC1B,aAAa;AACb,WAAW;AACX;AACA,UAAU,IAAI,CAAC,KAAK,GAAGA,WAAS,CAAC;AACjC,UAAU,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAC3B;AACA,UAAU,OAAO,IAAI,CAAC;AACtB,SAAS,CAAC;AACV;AACA,QAAQ,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAChC,OAAO;AACP,KAAK;AACL;AACA;AACA,IAAI,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;AAChC,GAAG;AACH,EAAE,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;AACA,EAAE,SAAS,UAAU,GAAG;AACxB,IAAI,OAAO,EAAE,KAAK,EAAEA,WAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AAC5C,GAAG;AACH;AACA,EAAE,OAAO,CAAC,SAAS,GAAG;AACtB,IAAI,WAAW,EAAE,OAAO;AACxB;AACA,IAAI,KAAK,EAAE,SAAS,aAAa,EAAE;AACnC,MAAM,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB,MAAM,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB;AACA;AACA,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAGA,WAAS,CAAC;AACzC,MAAM,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AACxB,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC3B;AACA,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC3B,MAAM,IAAI,CAAC,GAAG,GAAGA,WAAS,CAAC;AAC3B;AACA,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AAC7C;AACA,MAAM,IAAI,CAAC,aAAa,EAAE;AAC1B,QAAQ,KAAK,IAAI,IAAI,IAAI,IAAI,EAAE;AAC/B;AACA,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;AACpC,cAAc,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AACrC,cAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AACtC,YAAY,IAAI,CAAC,IAAI,CAAC,GAAGA,WAAS,CAAC;AACnC,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,EAAE,WAAW;AACrB,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB;AACA,MAAM,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACzC,MAAM,IAAI,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;AAC5C,MAAM,IAAI,UAAU,CAAC,IAAI,KAAK,OAAO,EAAE;AACvC,QAAQ,MAAM,UAAU,CAAC,GAAG,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC;AACvB,KAAK;AACL;AACA,IAAI,iBAAiB,EAAE,SAAS,SAAS,EAAE;AAC3C,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE;AACrB,QAAQ,MAAM,SAAS,CAAC;AACxB,OAAO;AACP;AACA,MAAM,IAAI,OAAO,GAAG,IAAI,CAAC;AACzB,MAAM,SAAS,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE;AACnC,QAAQ,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;AAC9B,QAAQ,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC;AAC/B,QAAQ,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC;AAC3B;AACA,QAAQ,IAAI,MAAM,EAAE;AACpB;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAClC,UAAU,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAClC,SAAS;AACT;AACA,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC;AACzB,OAAO;AACP;AACA,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;AACtC;AACA,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;AACrC;AACA;AACA;AACA,UAAU,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/B,SAAS;AACT;AACA,QAAQ,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE;AACvC,UAAU,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AACxD,UAAU,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;AAC5D;AACA,UAAU,IAAI,QAAQ,IAAI,UAAU,EAAE;AACtC,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,EAAE;AAC5C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAClD,aAAa,MAAM,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AACrD,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC9C,aAAa;AACb;AACA,WAAW,MAAM,IAAI,QAAQ,EAAE;AAC/B,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,EAAE;AAC5C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAClD,aAAa;AACb;AACA,WAAW,MAAM,IAAI,UAAU,EAAE;AACjC,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AAC9C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC9C,aAAa;AACb;AACA,WAAW,MAAM;AACjB,YAAY,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACtE,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,MAAM,EAAE,SAAS,IAAI,EAAE,GAAG,EAAE;AAChC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI;AACrC,YAAY,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;AAC5C,YAAY,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AAC1C,UAAU,IAAI,YAAY,GAAG,KAAK,CAAC;AACnC,UAAU,MAAM;AAChB,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,YAAY;AACtB,WAAW,IAAI,KAAK,OAAO;AAC3B,WAAW,IAAI,KAAK,UAAU,CAAC;AAC/B,UAAU,YAAY,CAAC,MAAM,IAAI,GAAG;AACpC,UAAU,GAAG,IAAI,YAAY,CAAC,UAAU,EAAE;AAC1C;AACA;AACA,QAAQ,YAAY,GAAG,IAAI,CAAC;AAC5B,OAAO;AACP;AACA,MAAM,IAAI,MAAM,GAAG,YAAY,GAAG,YAAY,CAAC,UAAU,GAAG,EAAE,CAAC;AAC/D,MAAM,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;AACzB,MAAM,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;AACvB;AACA,MAAM,IAAI,YAAY,EAAE;AACxB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC7B,QAAQ,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC;AAC5C,QAAQ,OAAO,gBAAgB,CAAC;AAChC,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACnC,KAAK;AACL;AACA,IAAI,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE;AACzC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACnC,QAAQ,MAAM,MAAM,CAAC,GAAG,CAAC;AACzB,OAAO;AACP;AACA,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO;AACjC,UAAU,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;AACtC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;AAC/B,OAAO,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC3C,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AAC1C,QAAQ,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAC1B,OAAO,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,QAAQ,EAAE;AACvD,QAAQ,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,MAAM,EAAE,SAAS,UAAU,EAAE;AACjC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,UAAU,KAAK,UAAU,EAAE;AAC7C,UAAU,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC1D,UAAU,aAAa,CAAC,KAAK,CAAC,CAAC;AAC/B,UAAU,OAAO,gBAAgB,CAAC;AAClC,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,OAAO,EAAE,SAAS,MAAM,EAAE;AAC9B,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;AACrC,UAAU,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;AACxC,UAAU,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACvC,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;AACpC,YAAY,aAAa,CAAC,KAAK,CAAC,CAAC;AACjC,WAAW;AACX,UAAU,OAAO,MAAM,CAAC;AACxB,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,MAAM,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;AAC/C,KAAK;AACL;AACA,IAAI,aAAa,EAAE,SAAS,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE;AAC3D,MAAM,IAAI,CAAC,QAAQ,GAAG;AACtB,QAAQ,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC;AAClC,QAAQ,UAAU,EAAE,UAAU;AAC9B,QAAQ,OAAO,EAAE,OAAO;AACxB,OAAO,CAAC;AACR;AACA,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;AAClC;AACA;AACA,QAAQ,IAAI,CAAC,GAAG,GAAGA,WAAS,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL,GAAG,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,OAAO,CAAC;AACjB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,GAA+B,MAAM,CAAC,OAAO,CAAK;AAClD,CAAC,CAAC,CAAC;AACH;AACA,IAAI;AACJ,EAAE,kBAAkB,GAAG,OAAO,CAAC;AAC/B,CAAC,CAAC,OAAO,oBAAoB,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;AACtC,IAAI,UAAU,CAAC,kBAAkB,GAAG,OAAO,CAAC;AAC5C,GAAG,MAAM;AACT,IAAI,QAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC;AACrD,GAAG;AACH;;;AC/uBA,IAAI,CAACC,UAAU,CAACC,QAAhB,EAA0B;AACxB;AACAD,EAAAA,UAAU,CAACC,QAAX,gBAAsBC,OAAO,CAAC,WAAD,CAA7B;AACD;AAED;;;;;;;;;AAOA,SAAgBC,uBAAuBC,SAAiBC;AACtD,MAAI,CAACD,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC3C,WAAO,EAAP;AACD;;AACD,MAAI,CAACC,UAAU,CAACC,QAAX,CAAoB,GAApB,CAAL,EAA+B;AAC7BD,IAAAA,UAAU,GAAMA,UAAN,MAAV;AACD;;AACD,SAAOD,OAAO,CAACG,OAAR,CAAgB,SAAhB,EAA2BF,UAA3B,CAAP;AACD;AAED;;;;;;;;;AAQA,SAAsBG,YAAtB;AAAA;AAAA;AAsBA;;;;;iEAtBO,iBACLC,IADK,EAELC,eAFK,EAGLC,aAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCC,YAAAA,OALD,GAKW;AACd,gDAAgCF,eADlB;AAEd,kCAAoBC,aAAa,IAAI;AAFvB,aALX;AAUCE,YAAAA,QAVD,GAUY,IAAIZ,QAAJ,EAVZ;AAWLY,YAAAA,QAAQ,CAACC,MAAT,CAAgB,MAAhB,EAAwBL,IAAxB;AAXK;AAAA,mBAYaM,KAAK,CAAC,kCAAD,EAAqC;AAC1DC,cAAAA,MAAM,EAAE,MADkD;AAE1DC,cAAAA,IAAI,EAAEJ,QAFoD;AAG1DD,cAAAA,OAAO,EAAPA;AAH0D,aAArC,CAZlB;;AAAA;AAYCM,YAAAA,GAZD;AAAA;AAAA,mBAkBcA,GAAG,CAACC,IAAJ,EAlBd;;AAAA;AAkBCF,YAAAA,IAlBD;AAAA,6CAmBEA,IAAI,CAACG,OAnBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAyBP,SAAsBC,cAAtB;AAAA;AAAA;;;mEAAO,kBACLC,QADK,EAELZ,eAFK,EAGLC,aAHK;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKD,OAAOW,QAAP,KAAoB,QALnB;AAAA;AAAA;AAAA;;AAAA,8CAMIA,QANJ;;AAAA;AAAA;AAAA,mBASQd,YAAY,CACvBe,IAAI,CAACC,SAAL,CAAeF,QAAf,CADuB,EAEvBZ,eAFuB,EAGvBC,aAHuB,CATpB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;ACrCP;;;;AAGA,IAAac,mBAAmB,gBAAGC,QAAQ,CAAC,YAAD,CAApC;AAEP;;;;AAGA,IAAaC,oBAAoB,gBAAGD,QAAQ,CAAC,YAAD,CAArC;AAEP,IAAME,cAAc,GAAG,CACrB;AACEC,EAAAA,MAAM,EAAE,EADV;AAEEC,EAAAA,IAAI,EAAE,aAFR;AAGEC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEEF,IAAAA,IAAI,EAAE,EAFR;AAGEG,IAAAA,IAAI,EAAE;AAHR,GADO,CAHX;AAUEC,EAAAA,eAAe,EAAE,MAVnB;AAWED,EAAAA,IAAI,EAAE;AAXR,CADqB,CAAvB;AAgBA;;;;AAGA,SAAsBE,mBAAtB;AAAA;AAAA;AAkBA;;;;;wEAlBO,iBACLC,QADK,EAELC,OAFK,EAGLC,cAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCC,YAAAA,QALD,GAKY,IAAIC,QAAJ,CAAaH,OAAb,EAAsBT,cAAtB,EAAsCQ,QAAtC,CALZ;AAAA;AAAA,mBAMaG,QAAQ,CAACE,WAAT,EANb;;AAAA;AAMCC,YAAAA,GAND;AAOCrC,YAAAA,UAPD,GAOcF,sBAAsB,CAACuC,GAAD,EAAMJ,cAAN,CAPpC;AAAA;AAAA,mBAQcvB,KAAK,CAACV,UAAD,CARnB;;AAAA;AAQCsC,YAAAA,IARD;AAAA;AAAA,mBASkBA,IAAI,CAACxB,IAAL,EATlB;;AAAA;AASCG,YAAAA,QATD;AAUCsB,YAAAA,MAVD,gBAWAtB,QAXA;AAYHoB,cAAAA,GAAG,EAAHA,GAZG;AAaHG,cAAAA,KAAK,EAAE1C,sBAAsB,CAACmB,QAAQ,CAACuB,KAAV,EAAiBP,cAAjB;AAb1B;AAAA,6CAeEM,MAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAqBP,SAAsBE,UAAtB;AAAA;AAAA;;;+DAAO,kBACLV,QADK,EAELC,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAISD,QAAQ,CAACW,OAAT,CAAiBV,OAAjB,CAJT;;AAAA;AAAA;AAAA,+DAIwC,IAJxC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AC7CP;;;;AAGA,SAAsBW,mBAAtB;AAAA;AAAA;AA2BA;;;;;wEA3BO,iBACLC,gBADK,EAELC,KAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAKCA,KAAK,CAACC,WAAN,OAAwBC,WALzB;AAAA;AAAA;AAAA;;AAMKC,YAAAA,KANL,GAMaC,cAAc,CAACC,OAAf,CAAuBL,KAAvB,EAA8BD,gBAA9B,CANb;AAAA;AAAA,mBAOsCO,OAAO,CAACC,GAAR,CAAY,CACjDJ,KAAK,CAACvB,IAAN,EADiD,EAEjDuB,KAAK,CAACK,MAAN,EAFiD,EAGjDL,KAAK,CAACM,QAAN,EAHiD,CAAZ,CAPtC;;AAAA;AAAA;AAOM7B,YAAAA,IAPN;AAOY4B,YAAAA,MAPZ;AAOoBC,YAAAA,QAPpB;AAAA,6CAYM;AACL7B,cAAAA,IAAI,EAAJA,IADK;AAEL4B,cAAAA,MAAM,EAANA,MAFK;AAGLC,cAAAA,QAAQ,EAARA;AAHK,aAZN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAoBE;AACL7B,cAAAA,IAAI,EAAE,EADD;AAEL4B,cAAAA,MAAM,EAAE,EAFH;AAGLC,cAAAA,QAAQ,EAAE;AAHL,aApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA8BP,SAAsBC,gBAAtB;AAAA;AAAA;;;qEAAO,kBACLX,gBADK,EAELC,KAFK,EAGLW,KAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKkBb,mBAAmB,CAACC,gBAAD,EAAmBC,KAAnB,CALrC;;AAAA;AAKC5B,YAAAA,QALD;AAAA,2DAOAA,QAPA;AAQHwC,cAAAA,KAAK,EAAED,KAAK,CAACE,QAAN,EARJ;AASHC,cAAAA,YAAY,EAAEC,WAAW,CAACJ,KAAD,EAAQvC,QAAQ,CAACqC,QAAjB;AATtB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AC1DP;;;;AAIA,IAAaO,aAAb;AAAA;;AACE;AACA;WACE,kBAAM,WAAN;AACD;;AAJH;AAAA,iCAAmCC,KAAnC;;ACJA,IAAYC,OAAZ;;AAAA,WAAYA;AACVA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,8BAAA,WAAA;AACAA,EAAAA,8BAAA,UAAA;AACAA,EAAAA,4BAAA,QAAA;AACAA,EAAAA,8BAAA,SAAA;AACAA,EAAAA,iCAAA,YAAA;AACAA,EAAAA,oCAAA,cAAA;AACAA,EAAAA,kCAAA,WAAA;AACAA,EAAAA,wCAAA,YAAA;AACAA,EAAAA,oCAAA,cAAA;AACAA,EAAAA,mCAAA,YAAA;AACAA,EAAAA,gCAAA,WAAA;AACAA,EAAAA,wCAAA,kBAAA;AACAA,EAAAA,qCAAA,cAAA;AACAA,EAAAA,gDAAA,yBAAA;AACD,CAlBD,EAAYA,OAAO,KAAPA,OAAO,KAAA,CAAnB;;;ACcA;;;;;AAIA,IAAaC,YAAY,sCACtBD,OAAO,CAACE,OADc,IACJ;AACjBC,EAAAA,cAAc,EAAE,4CADC;AAEjBC,EAAAA,gBAAgB,EAAE,4CAFD;AAGjBC,EAAAA,OAAO,EACL,oEAJe;AAKjBC,EAAAA,IAAI,eAAEC,MAAM,CAACC,KAAP,CAAaC,UAAb,CAAwB,QAAxB;AALW,CADI,gBAQtBT,OAAO,CAACU,MARc,IAQL;AAChBP,EAAAA,cAAc,EAAE,4CADA;AAEhBC,EAAAA,gBAAgB,EAAE,4CAFF;AAGhBC,EAAAA,OAAO,EACL,oEAJc;AAKhBC,EAAAA,IAAI,eAAEC,MAAM,CAACC,KAAP,CAAaC,UAAb,CAAwB,QAAxB;AALU,CARK,gBAetBT,OAAO,CAACW,OAfc,IAeJ;AACjBR,EAAAA,cAAc,EAAE,4CADC;AAEjBC,EAAAA,gBAAgB,EAAE,4CAFD;AAGjBC,EAAAA,OAAO,EACL,oEAJe;AAKjBC,EAAAA,IAAI,eAAEC,MAAM,CAACC,KAAP,CAAaC,UAAb,CAAwB,KAAxB;AALW,CAfI,gBAsBtBT,OAAO,CAACY,OAtBc,IAsBJ;AACjBT,EAAAA,cAAc,EAAE,4CADC;AAEjBC,EAAAA,gBAAgB,EAAE,4CAFD;AAGjBC,EAAAA,OAAO,EACL,oEAJe;AAKjBC,EAAAA,IAAI,eAAEC,MAAM,CAACC,KAAP,CAAaC,UAAb,CAAwB,GAAxB;AALW,CAtBI,gBAAlB;;AChBP;;;;;AAIA,IAAYI,UAAZ;;AAAA,WAAYA;AACVA,EAAAA,sCAAA,aAAA;AACAA,EAAAA,wCAAA,eAAA;AACAA,EAAAA,oCAAA,WAAA;AACAA,EAAAA,iCAAA,QAAA;AACAA,EAAAA,yCAAA,gBAAA;AACAA,EAAAA,wCAAA,eAAA;AACAA,EAAAA,kCAAA,SAAA;AACAA,EAAAA,oCAAA,WAAA;AACAA,EAAAA,kCAAA,SAAA;AACAA,EAAAA,uCAAA,cAAA;AACAA,EAAAA,oCAAA,WAAA;AACD,CAZD,EAAYA,UAAU,KAAVA,UAAU,KAAA,CAAtB;AAaA;;;;;;;;AAOA,SAAgBC,wBACdC;AAEA,SAAOC,KAAK,CAACH,UAAD,CAAL,CAAkBI,iBAAlB,CACLF,UADK,oBACLA,UAAU,CAAEG,WAAZ,EADK,EAELvF,SAFK,CAAP;AAID;AAED;;;;;;;AAMA,SAAgBwF,wBACdC;AAEA,SAAOJ,KAAK,CAACH,UAAD,CAAL,CAAkBQ,eAAlB,CAAkCD,UAAlC,EAA8CzF,SAA9C,CAAP;AACD;;ACtCD,IAAM2F,WAAW,GAAG,CAClB;AACE7D,EAAAA,MAAM,EAAE,CACN;AACEG,IAAAA,YAAY,EAAE,SADhB;AAEEF,IAAAA,IAAI,EAAE,SAFR;AAGEG,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQEH,EAAAA,IAAI,EAAE,UARR;AASEC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEEF,IAAAA,IAAI,EAAE,EAFR;AAGEG,IAAAA,IAAI,EAAE;AAHR,GADO,CATX;AAgBEC,EAAAA,eAAe,EAAE,MAhBnB;AAiBED,EAAAA,IAAI,EAAE;AAjBR,CADkB,EAoBlB;AACEJ,EAAAA,MAAM,EAAE,CACN;AACEG,IAAAA,YAAY,EAAE,SADhB;AAEEF,IAAAA,IAAI,EAAE,EAFR;AAGEG,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQEH,EAAAA,IAAI,EAAE,KARR;AASEC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEEF,IAAAA,IAAI,EAAE,EAFR;AAGEG,IAAAA,IAAI,EAAE;AAHR,GADO,CATX;AAgBEC,EAAAA,eAAe,EAAE,MAhBnB;AAiBED,EAAAA,IAAI,EAAE;AAjBR,CApBkB,CAApB;AAoEA;;;;AAGA,SAAsB0D,0BAAtB;AAAA;AAAA;AAUA;;;;;+EAVO,iBACLvD,QADK,EAEL1B,eAFK,EAGLkF,OAHK,EAILtD,cAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCC,YAAAA,QAND,GAMY,IAAIC,QAAJ,CAAa9B,eAAb,EAA8BgF,WAA9B,EAA2CtD,QAA3C,CANZ;AAAA,6CAOEyD,gBAAgB,CAACtD,QAAD,EAAWqD,OAAX,EAAoBtD,cAApB,CAPlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAaP,SAAsBuD,gBAAtB;AAAA;AAAA;AAqBA;;;;;qEArBO,kBACLtD,QADK,EAELqD,OAFK,EAGLtD,cAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKawD,WAAW,CAACvD,QAAD,EAAWqD,OAAX,CALxB;;AAAA;AAKClD,YAAAA,GALD;;AAAA,gBAMAA,GANA;AAAA;AAAA;AAAA;;AAAA,kBAOG,IAAIwB,aAAJ,EAPH;;AAAA;AASC7D,YAAAA,UATD,GAScF,sBAAsB,CAACuC,GAAD,EAAMJ,cAAN,CATpC;AAAA;AAAA,mBAUcvB,KAAK,CAACV,UAAD,CAVnB;;AAAA;AAUCsC,YAAAA,IAVD;AAAA;AAAA,mBAWkBA,IAAI,CAACxB,IAAL,EAXlB;;AAAA;AAWCG,YAAAA,QAXD;AAYCsB,YAAAA,MAZD,gBAaAtB,QAbA;AAcHyE,cAAAA,EAAE,EAAEH,OAdD;AAeHlD,cAAAA,GAAG,EAAHA,GAfG;AAgBHG,cAAAA,KAAK,EAAE1C,sBAAsB,CAACmB,QAAQ,CAACuB,KAAV,EAAiBP,cAAjB;AAhB1B;AAAA,8CAkBEM,MAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsBkD,WAAtB;AAAA;AAAA;;;gEAAO,kBACLvD,QADK,EAELqD,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIDlD,YAAAA,GAJC,GAIK,EAJL;AAAA;AAAA;AAAA,mBAMSH,QAAQ,CAACyD,QAAT,CAAkBJ,OAAlB,CANT;;AAAA;AAMHlD,YAAAA,GANG;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,gBAUAA,GAVA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAYYH,QAA0B,CAACG,GAA3B,CAA+BkD,OAA/B,CAZZ;;AAAA;AAYDlD,YAAAA,GAZC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAgBEA,GAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;ACpEP;;;;;AAIA,IAAauD,QAAQ,GAAW;AAC9BC,EAAAA,KAAK,EAAE,OADuB;AAE9BC,EAAAA,MAAM,EAAE,QAFsB;AAG9BC,EAAAA,MAAM,EAAE,QAHsB;AAI9BC,EAAAA,QAAQ,EAAE,UAJoB;AAK9BC,EAAAA,MAAM,EAAE,QALsB;AAM9BC,EAAAA,MAAM,EAAE;AANsB,CAAzB;AASP;;;;;AAIA,IAAMC,KAAK,GAAyB;AAClCN,EAAAA,KAAK,EAAE,EAD2B;AAElCG,EAAAA,QAAQ,EAAE,eAFwB;AAGlCF,EAAAA,MAAM,EAAE,aAH0B;AAIlCC,EAAAA,MAAM,EAAE,aAJ0B;AAKlCE,EAAAA,MAAM,EAAE,aAL0B;AAMlCC,EAAAA,MAAM,EAAE;AAN0B,CAApC;AASA;;;;AAGA,SAAgBE,YAAYC;AAC1B,MAAIA,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAO/B,MAAM,CAACC,KAAP,CAAa+B,UAAb,CAAwB,CAAC,CAAD,CAAxB,EAA6B,EAA7B,CAAP;AACD;;AACD,SAAOhC,MAAM,CAACC,KAAP,CAAagC,SAAb,CAAuBjC,MAAM,CAACC,KAAP,CAAaiC,WAAb,CAAyBL,KAAK,CAACE,IAAD,CAA9B,CAAvB,CAAP;AACD;;AC/ED;;;;AAGA,SAASI,gBAAT,CAA0BC,OAA1B;AACE,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,MAAIA,OAAO,KAAK3C,OAAO,CAACE,OAAxB,EAAiC;AAC/B,WAAO,0CAAP;AACD;;AAED,SAAO,IAAP;AACD;AAED;;;;;;;AAKA,SAAsB0C,mBAAtB;AAAA;AAAA;;;wEAAO,iBACLD,OADK,EAELE,KAFK,EAGLC,WAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCC,YAAAA,aALD,GAKiBL,gBAAgB,CAACC,OAAD,CALjC;;AAAA,gBAMAI,aANA;AAAA;AAAA;AAAA;;AAAA,6CAOI,IAPJ;;AAAA;AAAA;AAAA;AAAA,mBAUuBpG,KAAK,CAACoG,aAAD,CAV5B;;AAAA;AAAA;AAAA,iCAU6ChG,IAV7C;;AAAA;AAUGV,YAAAA,IAVH;AAWG2G,YAAAA,GAXH,GAWS3G,IAAI,CAACwG,KAAD,CAXb;;AAAA,kBAYCG,GAAG,GAAG,CAZP;AAAA;AAAA;AAAA;;AAAA,6CAaMC,IAAI,CAACC,GAAL,CAASF,GAAT,EAAcF,WAAd,CAbN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBHK,YAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd;;AAhBG;AAAA,6CAkBE,IAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;ACpBA,IAAMC,iBAAiB,GAAG,4CAA1B;AACP,AAAO,IAAMC,kBAAkB,kDAI5BtD,OAAO,CAACY,OAJoB,IAIV;AACjB2C,EAAAA,QAAQ,EAAE;AADO,CAJU,sBAO5BvD,OAAO,CAACW,OAPoB,IAOV;AACjB4C,EAAAA,QAAQ,EAAE;AADO,CAPU,sBAU5BvD,OAAO,CAACE,OAVoB,IAUV;AACjBqD,EAAAA,QAAQ,EAAE;AADO,CAVU,sBAa5BvD,OAAO,CAACU,MAboB,IAaX;AAChB6C,EAAAA,QAAQ,EAAE;AADM,CAbW,sBAgB5BvD,OAAO,CAACwD,SAhBoB,IAgBR;AACnBD,EAAAA,QAAQ,EAAE;AADS,CAhBQ,sBAmB5BvD,OAAO,CAACyD,oBAnBoB,IAmBG;AAC9BF,EAAAA,QAAQ,EAAE;AADoB,CAnBH,sBAsB5BvD,OAAO,CAAC0D,MAtBoB,IAsBX;AAChBH,EAAAA,QAAQ,EAAE;AADM,CAtBW,sBAyB5BvD,OAAO,CAAC2D,aAzBoB,IAyBJ;AACvBJ,EAAAA,QAAQ,EAAE;AADa,CAzBI,sBAAxB;AA8BP,SAAgBK,4BACdjB;AAEA,SAAOW,kBAAkB,CAACX,OAAD,CAAlB,CAAkD,UAAlD,CAAP;AACD;;ACHD;;;;;;AAKA,SAAgBkB,UAAUC,WAAgBC;AACxC,MAAI,CAACD,SAAL,EAAgB;AACd,UAAM,IAAI/D,KAAJ,CAAUgE,OAAV,CAAN;AACD;AACF;;ACxCD;;;;AAGA,AAAO,IAAMC,cAAc,GAAG,CAC5B;AAAEtG,EAAAA,IAAI,EAAE,MAAR;AAAgBG,EAAAA,IAAI,EAAE;AAAtB,CAD4B,EAE5B;AAAEH,EAAAA,IAAI,EAAE,IAAR;AAAcG,EAAAA,IAAI,EAAE;AAApB,CAF4B,EAG5B;AAAEH,EAAAA,IAAI,EAAE,OAAR;AAAiBG,EAAAA,IAAI,EAAE;AAAvB,CAH4B,EAI5B;AAAEH,EAAAA,IAAI,EAAE,KAAR;AAAeG,EAAAA,IAAI,EAAE;AAArB,CAJ4B,EAK5B;AAAEH,EAAAA,IAAI,EAAE,OAAR;AAAiBG,EAAAA,IAAI,EAAE;AAAvB,CAL4B,EAM5B;AAAEH,EAAAA,IAAI,EAAE,MAAR;AAAgBG,EAAAA,IAAI,EAAE;AAAtB,CAN4B,CAAvB;AASP,IAAMoG,OAAO,GAA8B,EAA3C;AAEA,SAAsBC,oBAAtB;AAAA;AAAA;;;yEAAO,iBACLC,SADK,EAELlG,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAICA,OAAO,IAAIgG,OAJZ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKsBE,SAAS,CAACC,QAAV,CAAmBnG,OAAnB,CALtB;;AAAA;AAKHgG,YAAAA,OAAO,CAAChG,OAAD,CALJ;;AAAA;AAQCoG,YAAAA,KARD,GAQSJ,OAAO,CAAChG,OAAD,CARhB;AASLgG,YAAAA,OAAO,CAAChG,OAAD,CAAP,GAAmBqG,SAAS,CAACC,IAAV,CAAeN,OAAO,CAAChG,OAAD,CAAtB,EAAiCuG,GAAjC,CAAqC,CAArC,CAAnB;AATK,6CAUEH,KAVF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;ACEP;;;;;;AAKA,IAAaI,MAAb;AA2DE;;;AAGA,kBACE5F,gBADF,EAEEZ,OAFF,EAGEyG,OAHF,EAIEC,GAJF;SA1DgB1G;SAKGC;SAKAwG;SAEAC;SAKXC,oBAA6C;SAe7CC,UAAyB;SAgB1B1G;SAKA2G;AAWL,SAAK7G,OAAL,GAAeA,OAAf;AACA,SAAKyG,OAAL,GAAeA,OAAf;AACA,SAAKxG,cAAL,GAAsBwG,OAAO,CAACxG,cAA9B;AACA,SAAK6G,mBAAL,CAAyBlG,gBAAzB;AACA,SAAKV,QAAL,GAAgB,KAAK6G,eAAL,EAAhB;AACA,SAAKF,gBAAL,GAAwB,KAAKJ,OAAL,CAAaO,cAAb,GACnB,KAAK9G,QAAL,CAAcgB,OAAd,CACCoB,MAAM,CAAC2E,kBAAP,CAA0B,KAAKR,OAAL,CAAaO,cAAvC,CADD,CADmB,GAIpB,KAAK9G,QAJT;AAKA,SAAKwG,GAAL,GAAWA,GAAX;AACD;AAED;;;;;;AAjFF;;AAAA,SAqFeQ,MArFf;AAAA;AAAA;AAAA,8EAqFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACkB,KAAKC,WAAL,EADlB;;AAAA;AACCpH,cAAAA,QADD;AAEL,eAAUA,QAAV,2CAAA6F,SAAS,QAAW,yBAAX,CAAT,GAAAA,SAAS,OAAT;AAFK,+CAGEnF,UAAU,CAACV,QAAD,EAAW,KAAKC,OAAhB,CAHZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2FE;;;;AA3FF;;AAAA,SA+FeoH,WA/Ff;AAAA;AAAA;AAAA,mFA+FS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACW,KAAKF,MAAL,EADX;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sDACLtB,SADK,QAC0B,yBAD1B,IACLA,SADK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEC1F,cAAAA,QAFD,GAEY,KAAK6G,eAAL,EAFZ;AAGCnH,cAAAA,IAHD,GAGQ,KAAKyH,aAAL,EAHR;AAAA;AAAA,qBAMavH,mBAAmB,CACjC,KAAKwH,mBAAL,EADiC,EAEjCpH,QAAQ,CAACF,OAFwB,EAGjC,KAAKyG,OAAL,CAAaxG,cAHoB,CANhC;;AAAA;AAAA;AAAA,6BAWMC,QAAQ,CAACF,OAXf;AAAA,6BAYHJ,IAZG;AAAA;AAMHX,gBAAAA,QANG;AAWHe,gBAAAA,OAXG;AAYHJ,gBAAAA,IAZG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/FT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA+GE;;;;;AA/GF;;AAAA,SAoHe2H,WApHf;AAAA;AAAA;AAAA,mFAoHS,kBACLtI,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGW,KAAKiI,MAAL,EAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sDAGLtB,SAHK,QAG0B,yBAH1B,IAGLA,SAHK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIa5G,cAAc,CAACC,QAAD,CAJ3B;;AAAA;AAICoB,cAAAA,GAJD;AAAA;AAAA,qBAKC,KAAKmH,eAAL,CAAqB,gBAArB,EAAuC,CAACnH,GAAD,CAAvC,CALD;;AAAA;AAAA,gDAME,KAAK+G,WAAL,EANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6HE;;;AA7HF;;AAAA,SAgISN,mBAhIT,GAgIS,6BAAoBlG,gBAApB;AACL,SAAKA,gBAAL,GAAwBA,gBAAxB;;AACA,QAAI6G,MAAM,CAACC,QAAP,CAAgB9G,gBAAhB,CAAJ,EAAuC;AACrC,WAAK+G,MAAL,GAAc/G,gBAAd;AACD;;AACD,SAAKV,QAAL,GAAgB,KAAK6G,eAAL,EAAhB;AACA,SAAKF,gBAAL,GAAwB,KAAKJ,OAAL,CAAaO,cAAb,GACnB,KAAK9G,QAAL,CAAcgB,OAAd,CACCoB,MAAM,CAAC2E,kBAAP,CAA0B,KAAKR,OAAL,CAAaO,cAAvC,CADD,CADmB,GAIpB,KAAK9G,QAJT;AAKD;AAED;;;AA7IF;;AAAA,SAgJS0H,WAhJT,GAgJS;AACL,SAAKD,MAAL,GAAc,IAAd;AACD;AAED;;;AApJF;;AAAA,SAuJUL,mBAvJV,GAuJU;AACN,WAAO,KAAKK,MAAL,IAAe,KAAK/G,gBAA3B;AACD;AAED;;;AA3JF;;AAAA,SA8JYiH,SA9JZ,GA8JY;AACR,QAAIJ,MAAM,CAACC,QAAP,CAAgB,KAAKC,MAArB,CAAJ,EAAkC;AAChC,aAAO,KAAKA,MAAZ;AACD;;AACD,WAAO,IAAP;AACD;AAED;;;AArKF;;AAAA,SAwKYG,cAxKZ,GAwKY;AACR,WAAOL,MAAM,CAACC,QAAP,CAAgB,KAAKC,MAArB,CAAP;AACD;AAED;;;AA5KF;;AAAA,SA+KkBI,gBA/KlB;AAAA;AAAA;AAAA,wFA+KY;AAAA;AAAA;AAAA;AAAA;AAAA;AACFJ,cAAAA,MADE,GACO,KAAKE,SAAL,EADP;AAER,eAAUF,MAAV,2CAAA/B,SAAS,QAAS,gDAAT,CAAT,GAAAA,SAAS,OAAT;AAFQ;AAAA,qBAGK+B,MAAM,CAACK,UAAP,EAHL;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/KZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqLE;;;AArLF;;AAAA,SAwLkBb,WAxLlB;AAAA;AAAA;AAAA,mFAwLY;AAAA;AAAA;AAAA;AAAA;AAAA;AACFpH,cAAAA,QADE,GAC+B0H,MAAM,CAACC,QAAP,CACrC,KAAKJ,mBAAL,EADqC,IAGlC,KAAK1G,gBAAL,CAAiCb,QAHC,GAIlC,KAAKa,gBALF;AAAA,gDAMDb,QANC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxLZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiME;;;AAjMF;;AAAA,SAoMkBkI,UApMlB;AAAA;AAAA;AAAA,kFAoMY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACe,KAAKd,WAAL,EADf;;AAAA;AACFpH,cAAAA,QADE;AAER,eAAUA,QAAV,2CAAA6F,SAAS,QAAW,6BAAX,CAAT,GAAAA,SAAS,OAAT;AAFQ;AAAA,qBAGkB7F,QAAQ,CAACmI,UAAT,EAHlB;;AAAA;AAAA;AAGAxD,cAAAA,OAHA,yBAGAA,OAHA;AAAA,gDAIDA,OAJC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApMZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2ME;;;;AA3MF;;AAAA,SA+MYqC,eA/MZ,GA+MY;AACR,UAAM,IAAIjF,KAAJ,CAAU,uCAAV,CAAN;AACD;AAED;;;;AAnNF;;AAAA,SAuNYuF,aAvNZ,GAuNY;AACR,UAAM,IAAIvF,KAAJ,CAAU,qCAAV,CAAN;AACD;AAED;;;AA3NF;;AAAA,SA8NkBqG,gBA9NlB;AAAA;AAAA;AAAA,wFA8NY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACc,KAAKF,UAAL,EADd;;AAAA;AACFvD,cAAAA,OADE;AAEFE,cAAAA,KAFE,GAEM,KAAK6B,OAAL,CAAa2B,QAFnB;AAGFvD,cAAAA,WAHE,GAGY,KAAK4B,OAAL,CAAa4B,iBAHzB;AAAA;AAAA,qBAIoB1D,mBAAmB,CAC7CD,OAD6C,EAE7CE,KAF6C,EAG7CC,WAH6C,CAJvC;;AAAA;AAIFyD,cAAAA,aAJE;;AAAA,kBASHA,aATG;AAAA;AAAA;AAAA;;AAAA,gDAUC,EAVD;;AAAA;AAAA,gDAaD;AACLC,gBAAAA,QAAQ,EAAEjG,MAAM,CAACC,KAAP,CAAaiG,UAAb,CAAwBF,aAAa,CAAC5G,QAAd,EAAxB,EAAkD,MAAlD;AADL,eAbC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9NZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgPE;;;AAhPF;;AAAA,SAmPkB8F,eAnPlB;AAAA;AAAA;AAAA,uFAmPY,kBACRiB,EADQ,EAERC,IAFQ,EAGRC,aAHQ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKHA,aALG;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMgB,KAAKR,gBAAL,EANhB;;AAAA;AAMNQ,cAAAA,aANM;;AAAA;AAAA,mBAQJ,KAAKlC,OAAL,CAAamC,qBART;AAAA;AAAA;AAAA;;AAAA;AAAA,qBASO,KAAKC,sBAAL,CAA4BJ,EAA5B,EAAgCC,IAAhC,EAAsCC,aAAtC,CATP;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAWO,KAAKG,yBAAL,CAA+BL,EAA/B,EAAmCC,IAAnC,EAAyCC,aAAzC,CAXP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnPZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkQE;;;AAlQF;;AAAA,SAqQgBG,yBArQhB;AAAA;AAAA;AAAA,iGAqQU,kBACNL,EADM,EAENC,IAFM,EAGNC,aAHM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKAzI,cAAAA,QALA,GAKW,KAAKA,QALhB;AAAA;AAAA,qBAMW,uBAAAA,QAAQ,CAAC6I,SAAT,EAAmBN,EAAnB,6BAA0BC,IAA1B,SAAgCC,aAAhC,GANX;;AAAA;AAMAK,cAAAA,EANA;;AAAA,mBAOFA,EAAE,CAACC,IAPD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQSD,EAAE,CAACC,IAAH,EART;;AAAA;AAAA;;AAAA;AAAA,gDAUCD,EAVD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArQV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkRE;;;AAlRF;;AAAA,SAqRgBH,sBArRhB;AAAA;AAAA;AAAA,8FAqRU,mBACNJ,EADM,EAENC,IAFM,EAGNC,aAHM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKNzD,cAAAA,OAAO,CAACgE,GAAR,CAAY,eAAZ,EAA6BP,aAA7B;AACMhB,cAAAA,MANA,GAMS,KAAKE,SAAL,EANT;AAON,eACEF,MADF,2CAAA/B,SAAS,QAEP,yDAFO,CAAT,GAAAA,SAAS,OAAT;AAPM;AAAA,qBAWiB,KAAKuB,WAAL,EAXjB;;AAAA;AAWApH,cAAAA,QAXA;AAYN,eAAUA,QAAV,2CAAA6F,SAAS,QAAW,oCAAX,CAAT,GAAAA,SAAS,OAAT;AAZM;AAAA,qBAagB,KAAKqC,UAAL,EAbhB;;AAAA;AAaAvD,cAAAA,OAbA;AAcAxE,cAAAA,QAdA,GAcW,KAAKA,QAdhB;AAAA;AAAA,qBAea,KAAK6H,gBAAL,EAfb;;AAAA;AAeAzB,cAAAA,IAfA;AAgBA6C,cAAAA,EAhBA,GAgBK,KAAKnJ,OAhBV;AAiBAyB,cAAAA,KAjBA,GAiBQ,CAjBR;AAkBArD,cAAAA,IAlBA,GAkBO8B,QAAQ,aAAR,CAAmBkJ,kBAAnB,CAAsCX,EAAtC,EAA0CC,IAA1C,CAlBP;AAAA;AAAA,qBAmBa,yBAAAxI,QAAQ,CAACmJ,WAAT,EAAqBZ,EAArB,+BAA4BC,IAA5B,CAnBb;;AAAA;AAmBA3D,cAAAA,GAnBA,mBAmBgDuE,GAnBhD,CAmBoD,CAnBpD;AAoBAC,cAAAA,gBApBA,GAoBmB,KAAK9C,OAAL,CAAa+C,kCApBhC;AAqBAtD,cAAAA,SArBA,GAqBYuD,kBAAkB,CAACvI,OAAnB,CAChBqI,gBADgB,EAEhB,KAAKjC,mBAAL,EAFgB,CArBZ;AAAA;AAAA,qBAyBcrB,oBAAoB,CAACC,SAAD,EAAYI,IAAZ,CAzBlC;;AAAA;AAyBAF,cAAAA,KAzBA;AA2BAsD,cAAAA,MA3BA,GA2BS;AACbjK,gBAAAA,IAAI,EAAE,iBADO;AAEbkK,gBAAAA,OAAO,EAAE,OAFI;AAGbjF,gBAAAA,OAAO,EAAPA,OAHa;AAIbkF,gBAAAA,iBAAiB,EAAEL;AAJN,eA3BT;AAkCAM,cAAAA,KAlCA,GAkCQ;AACZ9D,gBAAAA,cAAc,EAAdA;AADY,eAlCR;AAsCAD,cAAAA,OAtCA,GAsCU;AACdQ,gBAAAA,IAAI,EAAJA,IADc;AAEd6C,gBAAAA,EAAE,EAAFA,EAFc;AAGd1H,gBAAAA,KAAK,EAAE4E,SAAS,CAACC,IAAV,CAAe7E,KAAf,EAAsBC,QAAtB,EAHO;AAIdqD,gBAAAA,GAAG,EAAEsB,SAAS,CAACC,IAAV,CAAevB,GAAf,EAAoBrD,QAApB,EAJS;AAKd0E,gBAAAA,KAAK,EAAEC,SAAS,CAACC,IAAV,CAAeF,KAAf,EAAsB1E,QAAtB,EALO;AAMdtD,gBAAAA,IAAI,EAAJA;AANc,eAtCV;AAAA;AAAA,qBA+CmBuJ,MAAwB,CAACmC,cAAzB,CACvBJ,MADuB,EAEvBG,KAFuB,EAGvB/D,OAHuB,CA/CnB;;AAAA;AA+CAiE,cAAAA,SA/CA;AAAA;AAAA,qBAsDe,KAAKtD,OAAL,CAAauD,8BAAb,CACnBlE,OADmB,EAEnBiE,SAFmB,CAtDf;;AAAA;AAsDAE,cAAAA,MAtDA;AAAA;AAAA,qBA2DOlK,QAAQ,CAACmK,kBAAT,CAA4BD,MAA5B,CA3DP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArRV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmVYE,cAnVZ,GAmVY,wBAAeC,SAAf,EAAkCC,IAAlC;AACR,QAAI,CAACA,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AACD,QAAMnK,QAAQ,GAAG,KAAKA,QAAtB;;AACA,yDAAkBmK,IAAlB,wCAAwB;AAAA,UAAbnB,GAAa;;AACtB,UAAI;AACF,YAAMoB,KAAK,GAAGpK,QAAQ,aAAR,CAAmBqK,cAAnB,CACZH,SADY,EAEZlB,GAAG,CAAC9K,IAFQ,EAGZ8K,GAAG,CAACsB,MAHQ,CAAd;AAKA,eAAOF,KAAP,CANE;AAQH,OARD,CAQE,OAAOG,CAAP,EAAU;AACb;;AACD,WAAO,IAAP;AACD,GApWH;;AAAA;AAAA;AAAA;AACE;;;;AAIA;;;;;AAKA;;;;;AAQA;;;;AAIA;;;AAGA;AACE,aAAO,KAAK9C,MAAL,IAAe,KAAKhB,iBAApB,IAAyC,KAAKW,mBAAL,EAAhD;AACD,KA3BH;AAAA,SA6BE,aAA6B7F,KAA7B;AACE,WAAKkF,iBAAL,GAAyBlF,KAAzB;AACD;AAED;;;;AAjCF;AAAA;AAAA;AAqCE;;;AAGA;AACE,aAAO,KAAKmF,OAAZ;AACD,KA1CH;AAAA,SA4CE,aAAmBnF,KAAnB;AACE,WAAKmF,OAAL,GAAenF,KAAf;AACD;AAED;;;;;AAhDF;;AAAA;AAAA;AAuWA;;;;;;AAKA,IAAaiJ,eAAb;AAAA;;AAAA;;AAGE;;;;AAHF,UAOYC,cAPZ,GAOY;AACR,UAAM,IAAI7I,KAAJ,CAAU,oDAAV,CAAN;AACD;AAED;;;AAXF;;AAkBE;AACA,2BACElB,gBADF,EAEEZ,OAFF,EAGEyG,OAHF,EAIEC,GAJF;WAME,mBAAM9F,gBAAN,EAAwBZ,OAAxB,EAAiCyG,OAAjC,EAA0CC,GAA1C;AACD;AAED;;;;;;;;;;;;;;;;AA5BF,UA0CekE,cA1Cf;AAAA;AAAA;AAAA,sFA0CS,mBAAqBvG,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,eACE,KAAKwG,KAAL,CAAWC,QAAX,CAAoBzG,IAApB,CADF,2CAAAuB,SAAS,gDAE8BvB,IAF9B,aAAT,GAAAuB,SAAS,OAAT;AAIM1F,cAAAA,QALD,GAKY,KAAKA,QALjB;AAMC6K,cAAAA,QAND,GAMY3G,WAAW,CAACC,IAAD,CANvB;AAAA;AAAA,qBAOgBnE,QAAQ,CAAC8K,kBAAT,CAA4BD,QAA5B,CAPhB;;AAAA;AAOCE,cAAAA,KAPD,mBAOuDC,QAPvD;AAAA;AAAA,qBAQQ/J,OAAO,CAACC,GAAR,CACX+J,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACF,KAAD,CAAL,CAAaG,IAAb,EAAX,EAAgCC,GAAhC,CAAoC,UAACC,CAAD;AAAA,uBAClCpL,QAAQ,CAACqL,aAAT,CAAuBR,QAAvB,EAAiCO,CAAjC,CADkC;AAAA,eAApC,CADW,CARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyDE;;;;;;;;;AAzDF;;AAAA,UAkEeE,iBAlEf;AAAA;AAAA;AAAA,yFAkES;AAAA;;AAAA;AAAA;AAAA;AAAA;AACL,eAAU,KAAKX,KAAL,CAAWY,MAArB,2CAAA7F,SAAS,QAAoB,sCAApB,CAAT,GAAAA,SAAS,OAAT;AACMiF,cAAAA,KAFD,GAE0C,EAF1C;AAAA,2DAGc,KAAKA,KAHnB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGMxG,cAAAA,IAHN;AAAA;AAAA,qBAIiB,KAAKuG,cAAL,CAAoBvG,IAApB,CAJjB;;AAAA;AAIHwG,cAAAA,KAAK,CAACxG,IAAD,CAJF;;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAMEwG,KANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlET;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2EE;;;;;;;;;;;;;;AA3EF;;AAAA,UAyFea,SAzFf;AAAA;AAAA;AAAA,iFAyFS,mBACLrH,IADK,EAELrE,OAFK;AAAA;AAAA;AAAA;AAAA;AAIL,eACE,KAAK6K,KAAL,CAAWC,QAAX,CAAoBzG,IAApB,CADF,2CAAAuB,SAAS,gDAE8BvB,IAF9B,aAAT,GAAAuB,SAAS,OAAT;AAJK;AAAA,qBAQQ,KAAK4B,eAAL,CAAqB,WAArB,EAAkC,CAC7CpD,WAAW,CAACC,IAAD,CADkC,EAE7CrE,OAF6C,CAAlC,CARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuGE;;;;;;;;;;;;;;;;;;AAvGF;;AAAA,UAyHe2L,UAzHf;AAAA;AAAA;AAAA,kFAyHS,mBACLtH,IADK,EAELrE,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIL,eACE,KAAK6K,KAAL,CAAWC,QAAX,CAAoBzG,IAApB,CADF,2CAAAuB,SAAS,gDAE8BvB,IAF9B,aAAT,GAAAuB,SAAS,OAAT;AAJK;AAAA,qBAQuB,KAAKmC,gBAAL,EARvB;;AAAA;AAQCzJ,cAAAA,aARD;;AAAA,oBASDA,aAAa,CAACwC,WAAd,OAAgCd,OAAO,CAACc,WAAR,EAT/B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAUU,KAAK0G,eAAL,CAAqB,cAArB,EAAqC,CAChDpD,WAAW,CAACC,IAAD,CADqC,EAEhDrE,OAFgD,CAArC,CAVV;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAeU,KAAKwH,eAAL,CAAqB,YAArB,EAAmC,CAC9CpD,WAAW,CAACC,IAAD,CADmC,EAE9CrE,OAF8C,CAAnC,CAfV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,SAcE;AACE,aAAO,KAAK2K,cAAL,EAAP;AACD;AAhBH;;AAAA;AAAA,EAEUnE,MAFV;;AC9XA;;;;AAIA,IAAqBoF,oBAAoB;AAAA,OAKvCnM,IALuC,GAKhC,EALgC;AAAA,OAWvCoM,WAXuC,GAWhBnO,SAXgB;AAAA,OAiBvC8C,KAjBuC,GAiBtB9C,SAjBsB;AAAA,OAuBvCoO,YAvBuC,GAuBfpO,SAvBe;AAAA,CAAzC;;AAKEqO,YADCC,YAAY,CAAC,MAAD,EAASC,MAAT,mDACb;;AAMAF,YADCC,YAAY,CAAC,aAAD,EAAgBC,MAAhB,EAAwBC,sBAAsB,CAACC,eAA/C,0DACb;;AAMAJ,YADCC,YAAY,CAAC,OAAD,EAAUC,MAAV,EAAkBC,sBAAsB,CAACC,eAAzC,oDACb;;AAMAJ,YADCC,YAAY,CAAC,eAAD,EAAkBC,MAAlB,EAA0BC,sBAAsB,CAACC,eAAjD,2DACb;;AAvBmBP,oBAAoB,yCADxCQ,UAAU,CAAC,sBAAD,IACUR,qBAAA;6BAAAA;;ACFrB,IAAqBS,oBAAoB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAcvCC,oBAduC,GAchB,CAdgB;AAAA,UAqBvCC,YArBuC,GAqBf7O,SArBe;AAAA;AAAA;;AAAA;AAAA,EAASkO,sBAAT,CAAzC;;AAcEG,YALCC,YAAY,CACX,yBADW,EAEXQ,MAFW,EAGXN,sBAAsB,CAACC,eAHZ,mEAKb;;AAOAJ,YADCC,YAAY,CAAC,eAAD,EAAkBC,MAAlB,EAA0BC,sBAAsB,CAACC,eAAjD,2DACb;;AArBmBE,oBAAoB,yCADxCD,UAAU,CAAC,0BAAD,IACUC,qBAAA;6BAAAA;;ACJrB,IAAqBI,sBAAsB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAKzCpL,MALyC,GAKhC,EALgC;AAAA;AAAA;;AAAA;AAAA,EAASuK,sBAAT,CAA3C;;AAKEG,YADCC,YAAY,CAAC,QAAD,EAAWC,MAAX,uDACb;;AALmBQ,sBAAsB,yCAD1CL,UAAU,CAAC,wBAAD,IACUK,uBAAA;+BAAAA;;ACArB,IAAqBC,uBAAuB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAASd,sBAAT,CAA5C;;AAAqBc,uBAAuB,yCAD3CN,UAAU,CAAC,yBAAD,IACUM,wBAAA;gCAAAA;;ACIrB,IAAqBC,kBAAkB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAcrCL,oBAdqC,GAcd,CAdc;AAAA,UAkCrCM,yBAlCqC,GAkCR,CAlCQ;AAAA,UAyCrCL,YAzCqC,GAyCb7O,SAzCa;AAAA,UA+CrC2D,MA/CqC;AAAA,UAqDrCwL,SArDqC,GAqDzB,CArDyB;AAAA,UA4ErCC,2BA5EqC,GA4EP,EA5EO;AAAA,UA0FrCC,YA1FqC,GA0FtB,EA1FsB;AAAA;AAAA;;AAAA;AAAA,EAASnB,sBAAT,CAAvC;;AAcEG,YALCC,YAAY,CACX,yBADW,EAEXQ,MAFW,EAGXN,sBAAsB,CAACC,eAHZ,iEAKb;;AAoBAJ,YALCC,YAAY,CACX,+BADW,EAEXQ,MAFW,EAGXN,sBAAsB,CAACC,eAHZ,sEAKb;;AAOAJ,YADCC,YAAY,CAAC,eAAD,EAAkBC,MAAlB,EAA0BC,sBAAsB,CAACC,eAAjD,yDACb;;AAMAJ,YADCC,YAAY,CAAC,QAAD,EAAWC,MAAX,EAAmBC,sBAAsB,CAACC,eAA1C,mDACb;;AAMAJ,YADCC,YAAY,CAAC,YAAD,EAAeQ,MAAf,EAAuBN,sBAAsB,CAACC,eAA9C,sDACb;;AAuBAJ,YALCC,YAAY,CACX,gCADW,EAEXC,MAFW,EAGXC,sBAAsB,CAACC,eAHZ,wEAKb;;AAcAJ,YALCC,YAAY,CACX,gBADW,EAEXC,MAFW,EAGXC,sBAAsB,CAACC,eAHZ,yDAKb;;AA1FmBQ,kBAAkB,yCADtCP,UAAU,CAAC,oBAAD,IACUO,mBAAA;2BAAAA;;ACArB,IAAqBK,oBAAoB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAgBvCC,oBAhBuC,GAgBhB,CAhBgB;AAAA;AAAA;;AAAA;AAAA,EAASrB,sBAAT,CAAzC;;AAgBEG,YALCC,YAAY,CACX,yBADW,EAEXQ,MAFW,EAGXN,sBAAsB,CAACC,eAHZ,mEAKb;;AAhBmBa,oBAAoB,yCADxCZ,UAAU,CAAC,sBAAD,IACUY,qBAAA;6BAAAA;;ACArB,IAAqBE,iBAAiB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAcpCZ,oBAdoC,GAcb,CAda;AAAA,UAqBpCC,YArBoC,GAqBZ7O,SArBY;AAAA,UA2BpC2D,MA3BoC;AAAA;AAAA;;AAAA;AAAA,EAASuK,sBAAT,CAAtC;;AAcEG,YALCC,YAAY,CACX,yBADW,EAEXQ,MAFW,EAGXN,sBAAsB,CAACC,eAHZ,gEAKb;;AAOAJ,YADCC,YAAY,CAAC,eAAD,EAAkBC,MAAlB,EAA0BC,sBAAsB,CAACC,eAAjD,wDACb;;AAMAJ,YADCC,YAAY,CAAC,QAAD,EAAWC,MAAX,EAAmBC,sBAAsB,CAACC,eAA1C,kDACb;;AA3BmBe,iBAAiB,yCADrCd,UAAU,CAAC,mBAAD,IACUc,kBAAA;0BAAAA;;ACArB,IAAqBC,kBAAkB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAcrCb,oBAdqC,GAcd,CAdc;AAAA,UAqBrCC,YArBqC,GAqBb7O,SArBa;AAAA;AAAA;;AAAA;AAAA,EAASkO,sBAAT,CAAvC;;AAcEG,YALCC,YAAY,CACX,yBADW,EAEXQ,MAFW,EAGXN,sBAAsB,CAACC,eAHZ,iEAKb;;AAOAJ,YADCC,YAAY,CAAC,eAAD,EAAkBC,MAAlB,EAA0BC,sBAAsB,CAACC,eAAjD,yDACb;;AArBmBgB,kBAAkB,yCADtCf,UAAU,CAAC,oBAAD,IACUe,mBAAA;2BAAAA;;ACHrB,IAAqBC,oBAAoB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACvCC,eADuC,GACA,EADA;AAAA;AAAA;;AAAA;AAAA,EAASzB,sBAAT,CAAzC;;AAAqBwB,oBAAoB,yCADxChB,UAAU,CAAC,sBAAD,IACUgB,qBAAA;6BAAAA;;ACkBrB;;;;;;AAKA,IAAaE,cAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAUE;;;;AAVF,SAcY3C,cAdZ,GAcY;AACR,WAAO2C,cAAc,CAACzC,KAAtB;AACD;AAED;;;AAlBF;;AAAA,SAqBY9D,eArBZ,GAqBY;AACR,WAAOwG,aAAa,CAACrM,OAAd,CAAsB,KAAKlB,OAA3B,EAAoC,KAAKY,gBAAzC,CAAP;AACD;AAED;;;AAzBF;;AAAA,SA4BYyG,aA5BZ,GA4BY;AACR,WAAOiG,cAAc,CAACnK,UAAtB;AACD,GA9BH;;AAAA,SAgCeqK,GAhCf;AAAA,2EAgCS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ7M,mBAAmB,CAAC,KAAKC,gBAAN,EAAwB,KAAKZ,OAA7B,CAD3B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoCeyN,QApCf;AAAA,gFAoCS,kBAAehM,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQF,gBAAgB,CAC3B,KAAKX,gBADsB,EAE3B,KAAKZ,OAFsB,EAG3BqG,SAAS,CAACC,IAAV,CAAe7E,KAAf,CAH2B,CADxB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4CeiM,WA5Cf;AAAA,mFA4CS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAK7G,gBAAL,CAAsB6G,WAAtB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgDeC,OAhDf;AAAA,+EAgDS;AAAA;AAAA;AAAA;AAAA;AAAA,6BACQ,IADR;AAAA;AAAA,qBAC6B,KAAK5F,gBAAL,EAD7B;;AAAA;AAAA;AAAA;AAAA,kCACa6F,SADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoDeA,SApDf;AAAA,iFAoDS,kBAAgB5N,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,6BACQ,IADR;AAAA;AAAA,qBAC4B,KAAK6G,gBAAL,CAAsB+G,SAAtB,CAAgC5N,OAAhC,CAD5B;;AAAA;AAAA;AAAA;AAAA,kCACayN,QADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwDeI,SAxDf;AAAA,iFAwDS,kBAAgBC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,6BACQ,IADR;AAAA;AAAA,qBAC+B,KAAK/F,gBAAL,EAD/B;;AAAA;AAAA;AAAA,6BACwD+F,OADxD;AAAA;AAAA,kCACaC,WADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4DeA,WA5Df;AAAA,mFA4DS,kBAAkBC,KAAlB,EAAiCF,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKjH,gBAAL,CAAsBgH,SAAtB,CAAgCG,KAAhC,EAAuCF,OAAvC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5DT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAgEe9J,QAhEf;AAAA;AAAA;AAAA,gFAgES,kBACLmF,EADK,EAEL8E,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIQ,KAAKzG,eAAL,CAAqB,UAArB,EAAiC,CAAC2B,EAAD,EAAK8E,MAAL,CAAjC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuEeC,YAvEf;AAAA,oFAuES,kBACLJ,OADK,EAELG,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIQ,KAAKzG,eAAL,CAAqB,SAArB,EAAgC,CAACsG,OAAD,EAAUG,MAAV,CAAhC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvET;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SA+EeE,IA/Ef;AAAA;AAAA;AAAA,4EA+ES,mBAAWF,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA,8BACC,IADD;AAAA;AAAA,qBACmB,KAAKlG,gBAAL,EADnB;;AAAA;AAAA;AAAA,8BAC4CkG,MAD5C;AAAA;AAAA,mCACMG,MADN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/ET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmFeA,MAnFf;AAAA,8EAmFS,mBAAajF,EAAb,EAAyB8E,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAKzG,eAAL,CAAqB,MAArB,EAA6B,CAAC2B,EAAD,EAAK8E,MAAL,CAA7B,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuFeI,WAvFf;AAAA,mFAuFS,mBAAkB3F,IAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACC4F,cAAAA,OADD,GACW,EADX;;AAEL,+DAAkB5F,IAAlB,iCAAwB;AAAb6F,gBAAAA,GAAa;AACtBD,gBAAAA,OAAO,CAACE,IAAR,CACE,KAAKtO,QAAL,cAAwBkJ,kBAAxB,CAA2C,MAA3C,EAAmD,CACjDmF,GAAG,CAACvO,OAD6C,EAEjDuO,GAAG,CAACN,MAF6C,CAAnD,CADF;AAMD;;AATI;AAAA,qBAUC,KAAKzG,eAAL,CAAqB,WAArB,EAAkC,CAAC8G,OAAD,CAAlC,CAVD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoGeG,IApGf;AAAA,4EAoGS,mBAAWR,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKzG,eAAL,CAAqB,MAArB,EAA6B,CAACyG,MAAD,CAA7B,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwGeS,QAxGf;AAAA,gFAwGS,mBACLpI,IADK,EAEL2H,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIQ,KAAKzG,eAAL,CAAqB,UAArB,EAAiC,CAAClB,IAAD,EAAO2H,MAAP,CAAjC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+GeU,YA/Gf;AAAA,oFA+GS,mBACLrI,IADK,EAEL6C,EAFK,EAGL8E,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKQ,KAAKzG,eAAL,CAAqB,cAArB,EAAqC,CAAClB,IAAD,EAAO6C,EAAP,EAAW8E,MAAX,CAArC,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/GT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuHeW,iBAvHf;AAAA,yFAuHS,mBACL3P,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGaD,cAAc,CAACC,QAAD,CAH3B;;AAAA;AAGCoB,cAAAA,GAHD;AAAA;AAAA,qBAIQ,KAAKmH,eAAL,CAAqB,gBAArB,EAAuC,CAACnH,GAAD,CAAvC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8HewO,qBA9Hf;AAAA,6FA8HS,mBACLC,UADK;AAAA;AAAA;AAAA;AAAA;AAAA,kBACLA,UADK;AACLA,gBAAAA,UADK,GACQ,KADR;AAAA;;AAAA;AAAA,qBAGQ,KAAKtH,eAAL,CAAqB,uBAArB,EAA8C,CAACsH,UAAD,CAA9C,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9HT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoIeC,aApIf;AAAA,qFAoIS,mBAAoBrG,IAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACC4F,cAAAA,OADD,GACW5F,IAAI,CAAC2C,GAAL,CAAS,UAACkD,GAAD;AAAA,uBACvB,KAAI,CAACrO,QAAL,cAAwBkJ,kBAAxB,CAA2C,UAA3C,EAAuD,CACrDmF,GAAG,CAACvO,OADiD,EAErDuO,GAAG,CAACN,MAFiD,CAAvD,CADuB;AAAA,eAAT,CADX;AAAA;AAAA,qBAOC,KAAKzG,eAAL,CAAqB,WAArB,EAAkC,CAAC8G,OAAD,CAAlC,CAPD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8IeU,iBA9If;AAAA,yFA8IS,mBAAwBtG,IAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACC4F,cAAAA,OADD,GACW5F,IAAI,CAAC2C,GAAL,CAAS,UAACkD,GAAD;AAAA,uBACvB,MAAI,CAACrO,QAAL,cAAwBkJ,kBAAxB,CAA2C,cAA3C,EAA2D,CACzDmF,GAAG,CAACU,WADqD,EAEzDV,GAAG,CAACvO,OAFqD,EAGzDuO,GAAG,CAACN,MAHqD,CAA3D,CADuB;AAAA,eAAT,CADX;AAAA;AAAA,qBAQC,KAAKzG,eAAL,CAAqB,WAArB,EAAkC,CAAC8G,OAAD,CAAlC,CARD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9IT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAoC5D,eAApC;AAAa4C,eACGnK,aAAyBP,UAAU,CAACsM;AADvC5B,eAGGzC,QAAQ,CACpBjH,QAAQ,CAACC,KADW,EAEpBD,QAAQ,CAACE,MAFW,EAGpBF,QAAQ,CAACG,MAHW,EAIpBH,QAAQ,CAACI,QAJW;;ACWxB;;;;;AAIA,IAAamL,SAAb;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAIUC,WAJV,GAIwB,IAAIC,WAAJ,EAJxB;AAAA,UAsBUlM,UAtBV,GAsBmC,CAAC,CAtBpC;AAAA;AAAA;;AAAA;;AAQE;;;;AARF,SAYYwH,cAZZ,GAYY;AACR,WAAO2C,cAAc,CAACzC,KAAtB;AACD;AAED;;;;;;AAhBF;;AAwBE;;;AAxBF,SA2BY9D,eA3BZ,GA2BY;AACR,WAAOuI,wBAAwB,CAACpO,OAAzB,CACL,KAAKlB,OADA,EAEL,KAAKY,gBAFA,CAAP;AAID;AAED;;;AAlCF;;AAAA,SAqCYyG,aArCZ,GAqCY;AACR,WAAO,KAAKlE,UAAZ;AACD;AAED;;;;AAzCF;;AAAA,SA6CgBoM,gBA7ChB;AAAA;AAAA;AAAA,wFA6CU,iBAAuBpM,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACO,KAAK0D,gBAAL,CAAsB2I,mBAAtB,CAA0CrM,UAA1C,CADP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7CV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiDgBsM,aAjDhB;AAAA,qFAiDU;AAAA;AAAA;AAAA;AAAA;AAAA,gDACC,KAAKF,gBAAL,CAAsB3M,UAAU,CAAC8M,GAAjC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjDV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqDgBC,gBArDhB;AAAA,wFAqDU;AAAA;AAAA;AAAA;AAAA;AAAA,gDACC,KAAKJ,gBAAL,CAAsB3M,UAAU,CAACgN,MAAjC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArDV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyDgBC,cAzDhB;AAAA,sFAyDU;AAAA;AAAA;AAAA;AAAA;AAAA,gDACC,KAAKN,gBAAL,CAAsB3M,UAAU,CAACkN,IAAjC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzDV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6DgBC,kBA7DhB;AAAA,0FA6DU;AAAA;AAAA;AAAA;AAAA;AAAA,gDACC,KAAKR,gBAAL,CAAsB3M,UAAU,CAACsM,QAAjC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7DV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiEgBc,gBAjEhB;AAAA,wFAiEU;AAAA;AAAA;AAAA;AAAA;AAAA,gDACC,KAAKT,gBAAL,CAAsB3M,UAAU,CAACqN,MAAjC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjEV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqEgBC,cArEhB;AAAA,sFAqEU;AAAA;AAAA;AAAA;AAAA;AAAA,gDACC,KAAKX,gBAAL,CAAsB3M,UAAU,CAACuN,IAAjC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArEV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyEgBC,mBAzEhB;AAAA,2FAyEU;AAAA;AAAA;AAAA;AAAA;AAAA,gDACC,KAAKb,gBAAL,CAAsB3M,UAAU,CAACyN,SAAjC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzEV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6EeC,kBA7Ef;AAAA,0FA6ES,kBAAyBtQ,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAK6G,gBAAL,CAAsByJ,kBAAtB,CACXtQ,OAAO,IAAIe,WADA,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7ET;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmFE;;;;AAnFF;;AAAA,SAuFewP,sBAvFf;AAAA;AAAA;AAAA,8FAuFS,mBACLC,SADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGmBrP,OAAO,CAACC,GAAR,CACtBoP,SAAS,CAACnF,GAAV,CAAc,UAACrL,OAAD;AAAA,uBACZF,mBAAmB,CACjB,MAAI,CAACc,gBADY,EAEjBZ,OAFiB,EAGjB,MAAI,CAACC,cAHY,CADP;AAAA,eAAd,CADsB,CAHnB;;AAAA;AAGCwQ,cAAAA,SAHD;AAAA,iDAYED,SAAS,CACbE,MADI,CACG,UAACC,CAAD;AAAA,uBAAOA,CAAP;AAAA,eADH,EAEJtF,GAFI,CAEA,UAACrL,OAAD,EAAUsL,CAAV;AACH,uBAAO;AACLtL,kBAAAA,OAAO,EAAPA,OADK;AAELf,kBAAAA,QAAQ,EAAEwR,SAAS,CAACnF,CAAD;AAFd,iBAAP;AAID,eAPI,CAZF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6GE;;;;;AA7GF;;AAAA,SAkHesF,cAlHf;AAAA;AAAA;AAAA,sFAkHS;AAAA;AAAA;AAAA;AAAA;AAAA,8BACS,IADT;AAAA;AAAA,qBAC2C,KAAKf,cAAL,EAD3C;;AAAA;AAAA;AAAA;AAAA,mCACcU,sBADd;;AAAA;AAAA,iEACmElF,GADnE,CAEH,UAACwF,CAAD;AAAA,oCACKA,CADL;AAEEjR,kBAAAA,IAAI,EAAEgD,UAAU,CAACkN;AAFnB;AAAA,eAFG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2HE;;;;;AA3HF;;AAAA,SAgIegB,aAhIf;AAAA;AAAA;AAAA,qFAgIS;AAAA;AAAA;AAAA;AAAA;AAAA,8BACS,IADT;AAAA;AAAA,qBAC2C,KAAKrB,aAAL,EAD3C;;AAAA;AAAA;AAAA;AAAA,mCACcc,sBADd;;AAAA;AAAA,iEACkElF,GADlE,CAEH,UAACwF,CAAD;AAAA,oCACKA,CADL;AAEEjR,kBAAAA,IAAI,EAAEgD,UAAU,CAAC8M;AAFnB;AAAA,eAFG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyIE;;;;;AAzIF;;AAAA,SA8IeqB,oBA9If;AAAA;AAAA;AAAA,4FA8IS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKC,gBAAL,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9IT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkJeA,gBAlJf;AAAA,wFAkJS;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEG,IAFH;AAAA;AAAA,qBAEqC,KAAKrB,gBAAL,EAFrC;;AAAA;AAAA;AAAA;AAAA,mCAEQY,sBAFR;;AAAA;AAAA,iEAGHlF,GAHG,CAGC,UAACwF,CAAD;AAAA,oCACDA,CADC;AAEJjR,kBAAAA,IAAI,EAAEgD,UAAU,CAACgN;AAFb;AAAA,eAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2JE;;;;;AA3JF;;AAAA,SAgKeqB,kBAhKf;AAAA;AAAA;AAAA,0FAgKS;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEG,IAFH;AAAA;AAAA,qBAEqC,KAAKlB,kBAAL,EAFrC;;AAAA;AAAA;AAAA;AAAA,mCAEQQ,sBAFR;;AAAA;AAAA,iEAGHlF,GAHG,CAGC,UAACwF,CAAD;AAAA,oCACDA,CADC;AAEJjR,kBAAAA,IAAI,EAAEgD,UAAU,CAACsM;AAFb;AAAA,eAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyKE;;;;;;AAzKF;;AAAA,SA+KegC,mBA/Kf;AAAA;AAAA;AAAA,2FA+KS;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEG,IAFH;AAAA;AAAA,qBAEqC,KAAKd,mBAAL,EAFrC;;AAAA;AAAA;AAAA;AAAA,mCAEQG,sBAFR;;AAAA;AAAA,iEAGHlF,GAHG,CAGC,UAACwF,CAAD;AAAA,oCACDA,CADC;AAEJjR,kBAAAA,IAAI,EAAEgD,UAAU,CAACyN;AAFb;AAAA,eAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/KT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwLE;;;;;AAxLF;;AAAA,SA6Lec,gBA7Lf;AAAA;AAAA;AAAA,wFA6LS;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEG,IAFH;AAAA;AAAA,qBAEqC,KAAKnB,gBAAL,EAFrC;;AAAA;AAAA;AAAA;AAAA,mCAEQO,sBAFR;;AAAA;AAAA,iEAGHlF,GAHG,CAGC,UAACwF,CAAD;AAAA,oCACDA,CADC;AAEJjR,kBAAAA,IAAI,EAAEgD,UAAU,CAACqN;AAFb;AAAA,eAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7LT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsME;;;;;AAtMF;;AAAA,SA2MemB,cA3Mf;AAAA;AAAA;AAAA,sFA2MS;AAAA;AAAA;AAAA;AAAA;AAAA,8BACS,IADT;AAAA;AAAA,qBAC2C,KAAKlB,cAAL,EAD3C;;AAAA;AAAA;AAAA;AAAA,mCACcK,sBADd;;AAAA;AAAA,iEACmElF,GADnE,CAEH,UAACwF,CAAD;AAAA,oCACKA,CADL;AAEEjR,kBAAAA,IAAI,EAAEgD,UAAU,CAACuN;AAFnB;AAAA,eAFG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3MT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoNE;;;;;;AApNF;;AAAA,SA0NekB,oBA1Nf;AAAA;AAAA;AAAA,4FA0NS,mBACLC,kBADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCC,cAAAA,gBAHD,GAGoBD,kBAAkB,IAAI,CAC7C1O,UAAU,CAAC8M,GADkC,EAE7C9M,UAAU,CAACgN,MAFkC,EAG7ChN,UAAU,CAACkN,IAHkC,EAI7ClN,UAAU,CAACsM,QAJkC,EAK7CtM,UAAU,CAACqN,MALkC,EAM7CrN,UAAU,CAACuN,IANkC,EAO7CvN,UAAU,CAACyN,SAPkC,CAH1C;AAAA;AAAA,qBAaGlP,OAAO,CAACC,GAAR,CACJmQ,gBAAgB,CAAClG,GAAjB;AAAA,0EAAqB,mBAAOlI,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACW,MAAI,CAACoM,gBAAL,CAAsBpM,UAAtB,CADX;;AAAA;AACbqO,0BAAAA,eADa;AAAA;AAAA,iCAEL,MAAI,CAACjB,sBAAL,CAA4BiB,eAA5B,CAFK;;AAAA;AAAA,6EAEyCnG,GAFzC,CAGjB,UAACwF,CAAD;AAAA,gDACKA,CADL;AAEEjR,8BAAAA,IAAI,EAAEuD;AAFR;AAAA,2BAHiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAArB;;AAAA;AAAA;AAAA;AAAA,kBADI,CAbH;;AAAA;AAAA,iEAwBHsO,MAxBG,CAwBI,UAACC,GAAD,EAAMC,IAAN;AAAA,uBAAeD,GAAG,CAACE,MAAJ,CAAWD,IAAX,CAAf;AAAA,eAxBJ,EAwBqC,EAxBrC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1NT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAsPE;;;AAtPF;;AAAA,SAyPe/C,iBAzPf;AAAA;AAAA;AAAA,yFAyPS,mBACL3P,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGaD,cAAc,CAACC,QAAD,CAH3B;;AAAA;AAGCoB,cAAAA,GAHD;AAAA;AAAA,qBAIQ,KAAKmH,eAAL,CAAqB,gBAArB,EAAuC,CAACnH,GAAD,CAAvC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzPT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgQewR,kBAhQf;AAAA,0FAgQS,mBACLC,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGQ,KAAKtK,eAAL,CAAqB,oBAArB,EAA2C,CAACsK,QAAD,CAA3C,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhQT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsQeC,wBAtQf;AAAA,gGAsQS,mBACLC,aADK,EAELF,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIQ,KAAKtK,eAAL,CAAqB,0BAArB,EAAiD,CAC5DwK,aAD4D,EAE5DF,QAF4D,CAAjD,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtQT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgReG,aAhRf;AAAA,qFAgRS,mBACL9I,EADK,EAEL+I,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIQ,KAAK1K,eAAL,CAAqB,eAArB,EAAsC,CAAC2B,EAAD,EAAK+I,QAAL,CAAtC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhRT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuRE;;;;;;;;;;AAvRF;;AAAA,SAiSgBC,aAjShB;AAAA;AAAA;AAAA,qFAiSU,mBACNhP,UADM,EAENuF,IAFM,EAGN0J,OAHM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKiB,KAAK1L,GAAL,CAAS2L,WAAT,EALjB;;AAAA;AAKA9J,cAAAA,QALA;AAMA+J,cAAAA,MANA,GAMS/J,QAAQ,GACnB;AAAEA,gBAAAA,QAAQ,EAAEjG,MAAM,CAACC,KAAP,CAAaiG,UAAb,CAAwBD,QAAQ,CAAC7G,QAAT,EAAxB,EAA6C,MAA7C;AAAZ,eADmB,GAEnB,EARE;AAAA;AAAA,qBAUW,6BAAIY,MAAM,CAACiQ,eAAX,CAA2BH,OAAO,CAACI,GAAnC,EAAwCJ,OAAO,CAACK,QAAhD,EACdvR,OADc,CACN,KAAKyG,MADC,GAEd+K,MAFc,8BAEJhK,IAFI,SAEE4J,MAFF,GAVX;;AAAA;AAUAtJ,cAAAA,EAVA;AAAA;AAAA,qBAcAA,EAAE,CAAC2J,QAAH,EAdA;;AAAA;AAeAtU,cAAAA,eAfA,GAekB2K,EAAE,CAAChJ,OAfrB;AAAA;AAAA,qBAiBoB,KAAKE,QAAL,CAAc0S,SAAd,CACxBvU,eADwB,EAExB8E,UAFwB,EAGxBmP,MAHwB,CAjBpB;;AAAA;AAiBAO,cAAAA,WAjBA;AAAA;AAAA,qBAsBAA,WAAW,CAAC5J,IAAZ,EAtBA;;AAAA;AAAA,iDAuBC5K,eAvBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjSV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2TE;;;;;;AA3TF;;AAAA,SAiUeyU,kBAjUf;AAAA;AAAA;AAAA,0FAiUS,mBACL7T,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGC8T,cAAAA,kBAHD,GAGsB,KAAK3D,WAAL,CAAiB4D,eAAjB,CACzB/T,QADyB,EAEzBoN,sBAFyB,CAHtB;AAAA,8BAQqBrN,cARrB;AAAA,8BASH+T,kBATG;AAAA,8BAUH,KAAK/S,OAVF;AAAA;AAAA,qBAWG,KAAK+H,gBAAL,EAXH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAQCkL,cAAAA,WARD;AAAA,8BAciB,IAdjB;AAAA,8BAeHrQ,UAAU,CAACsQ,UAfR;AAAA,8BAiBD,KAAKlT,OAjBJ;AAAA;AAAA,qBAkBK,KAAK0G,GAAL,CAASyM,mBAAT,EAlBL;;AAAA;AAAA;AAAA,8BAmBDF,WAnBC;AAAA,8BAoBD5M,SAAS,CAACC,IAAV,CACErH,QAAQ,CAACqN,oBAAT,GAAgCrN,QAAQ,CAACqN,oBAAzC,GAAgE,CADlE,CApBC;AAAA;AAAA,+BAwBH8G,sBAxBG;AAAA;AAAA,mCAcsBjB,aAdtB;;AAAA;AAcCnS,cAAAA,OAdD;AAAA,iDA2BE,KAAK0G,GAAL,CAAS2M,mBAAT,CAA6BrT,OAA7B,CA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjUT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA+VE;;;;;;AA/VF;;AAAA,SAqWesT,kBArWf;AAAA;AAAA;AAAA,0FAqWS,mBACLrU,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGC8T,cAAAA,kBAHD,GAGsB,KAAK3D,WAAL,CAAiB4D,eAAjB,CACzB/T,QADyB,EAEzBmO,sBAFyB,CAHtB;AAAA,8BAQqBpO,cARrB;AAAA,8BASH+T,kBATG;AAAA,8BAUH,KAAK/S,OAVF;AAAA;AAAA,qBAWG,KAAK+H,gBAAL,EAXH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAQCkL,cAAAA,WARD;AAAA,8BAciB,IAdjB;AAAA,8BAeHrQ,UAAU,CAAC2Q,MAfR;AAAA,8BAiBD,KAAKvT,OAjBJ;AAAA;AAAA,qBAkBK,KAAK0G,GAAL,CAASyM,mBAAT,EAlBL;;AAAA;AAAA;AAAA,8BAmBDF,WAnBC;AAAA,8BAoBDhU,QAAQ,CAACoO,eAAT,CAAyBhC,GAAzB,CAA6B,UAACmI,CAAD;AAAA,uBAAOA,CAAC,CAACxT,OAAT;AAAA,eAA7B,CApBC;AAAA,+BAqBDf,QAAQ,CAACoO,eAAT,CAAyBhC,GAAzB,CAA6B,UAACmI,CAAD;AAAA,uBAAOA,CAAC,CAACC,MAAT;AAAA,eAA7B,CArBC;AAAA;AAAA,+BAuBHC,gBAvBG;AAAA;AAAA,mCAcsBvB,aAdtB;;AAAA;AAcCnS,cAAAA,OAdD;AAAA,iDA0BE,KAAK0G,GAAL,CAASiN,eAAT,CAAyB3T,OAAzB,CA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArWT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkYE;;;;;;AAlYF;;AAAA,SAwYe4T,eAxYf;AAAA;AAAA;AAAA,uFAwYS,mBACL3U,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGC8T,cAAAA,kBAHD,GAGsB,KAAK3D,WAAL,CAAiB4D,eAAjB,CACzB/T,QADyB,EAEzBiO,mBAFyB,CAHtB;AAAA,8BAQqBlO,cARrB;AAAA,8BASH+T,kBATG;AAAA,8BAUH,KAAK/S,OAVF;AAAA;AAAA,qBAWG,KAAK+H,gBAAL,EAXH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAQCkL,cAAAA,WARD;AAAA,8BAciB,IAdjB;AAAA,8BAeHrQ,UAAU,CAAC8M,GAfR;AAAA,8BAiBD,KAAK1P,OAjBJ;AAAA,8BAkBDf,QAAQ,CAACQ,IAlBR;AAAA,8BAmBDR,QAAQ,CAACoC,MAAT,GAAkBpC,QAAQ,CAACoC,MAA3B,GAAoC,EAnBnC;AAAA;AAAA,qBAoBK,KAAKqF,GAAL,CAASyM,mBAAT,EApBL;;AAAA;AAAA;AAAA,+BAqBDF,WArBC;AAAA,+BAsBDhU,QAAQ,CAACqN,oBAtBR;AAAA;AAAA,+BAwBHuH,YAxBG;AAAA;AAAA,mCAcsB1B,aAdtB;;AAAA;AAcCnS,cAAAA,OAdD;AAAA,iDA2BE,KAAK0G,GAAL,CAASoN,YAAT,CAAsB9T,OAAtB,CA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxYT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsaE;;;;;;AAtaF;;AAAA,SA4ae+T,oBA5af;AAAA;AAAA;AAAA,4FA4aS,mBACL9U,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGC8T,cAAAA,kBAHD,GAGsB,KAAK3D,WAAL,CAAiB4D,eAAjB,CACzB/T,QADyB,EAEzBwN,wBAFyB,CAHtB;AAAA,8BAQqBzN,cARrB;AAAA,8BASH+T,kBATG;AAAA,8BAUH,KAAK/S,OAVF;AAAA;AAAA,qBAWG,KAAK+H,gBAAL,EAXH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAQCkL,cAAAA,WARD;AAAA,8BAciB,IAdjB;AAAA,8BAeHrQ,UAAU,CAACsM,QAfR;AAAA,8BAiBD,KAAKlP,OAjBJ;AAAA,8BAkBDf,QAAQ,CAACQ,IAlBR;AAAA,8BAmBDR,QAAQ,CAACoC,MAAT,GAAkBpC,QAAQ,CAACoC,MAA3B,GAAoC,EAnBnC;AAAA;AAAA,qBAoBK,KAAKqF,GAAL,CAASyM,mBAAT,EApBL;;AAAA;AAAA;AAAA,+BAqBDF,WArBC;AAAA;AAAA,+BAuBH1F,aAvBG;AAAA;AAAA,mCAcsB4E,aAdtB;;AAAA;AAcCnS,cAAAA,OAdD;AAAA,iDA0BE,KAAK0G,GAAL,CAASsN,iBAAT,CAA2BhU,OAA3B,CA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5aT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAycE;;;;;;AAzcF;;AAAA,SA+ceiU,kBA/cf;AAAA;AAAA;AAAA,0FA+cS,mBACLhV,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGC8T,cAAAA,kBAHD,GAGsB,KAAK3D,WAAL,CAAiB4D,eAAjB,CACzB/T,QADyB,EAEzB+N,sBAFyB,CAHtB;AAAA,8BAQqBhO,cARrB;AAAA,8BASH+T,kBATG;AAAA,8BAUH,KAAK/S,OAVF;AAAA;AAAA,qBAWG,KAAK+H,gBAAL,EAXH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAQCkL,cAAAA,WARD;AAAA,8BAciB,IAdjB;AAAA,8BAeHrQ,UAAU,CAACqN,MAfR;AAAA,8BAiBD,KAAKjQ,OAjBJ;AAAA;AAAA,qBAkBK,KAAK0G,GAAL,CAASyM,mBAAT,EAlBL;;AAAA;AAAA;AAAA,8BAmBDF,WAnBC;AAAA,8BAoBDhU,QAAQ,CAACgO,oBAAT,GAAgChO,QAAQ,CAACgO,oBAAzC,GAAgE,CApB/D;AAAA;AAAA,+BAsBHiH,eAtBG;AAAA;AAAA,mCAcsB/B,aAdtB;;AAAA;AAcCnS,cAAAA,OAdD;AAAA,iDAyBE,KAAK0G,GAAL,CAASyN,eAAT,CAAyBnU,OAAzB,CAzBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/cT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2eE;;;;;;AA3eF;;AAAA,SAifeoU,gBAjff;AAAA;AAAA;AAAA,wFAifS,mBACLnV,QADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGC8T,cAAAA,kBAHD,GAGsB,KAAK3D,WAAL,CAAiB4D,eAAjB,CACzB/T,QADyB,EAEzBkO,oBAFyB,CAHtB;AAAA,8BAQqBnO,cARrB;AAAA,8BASH+T,kBATG;AAAA,8BAUH,KAAK/S,OAVF;AAAA;AAAA,qBAWG,KAAK+H,gBAAL,EAXH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAQCkL,cAAAA,WARD;AAAA;AAAA,qBAciB,KAAKhL,UAAL,EAdjB;;AAAA;AAcCvD,cAAAA,OAdD;AAAA,sCAgBH1C,YAAY,CAAC0C,OAAD,CAhBT,EAeGxC,cAfH,yBAeGA,cAfH,EAemBC,gBAfnB,yBAemBA,gBAfnB,EAeqCC,OAfrC,yBAeqCA,OAfrC,EAe8CC,IAf9C,yBAe8CA,IAf9C;AAAA,8BAkBiB,IAlBjB;AAAA,8BAmBHO,UAAU,CAACkN,IAnBR;AAAA,8BAqBD,KAAK9P,OArBJ;AAAA,8BAsBDiT,WAtBC;AAAA,8BAuBD/Q,cAvBC;AAAA,8BAwBDC,gBAxBC;AAAA,+BAyBDC,OAzBC;AAAA,+BA0BDC,IA1BC;AAAA;AAAA,qBA2BK,KAAKqE,GAAL,CAASyM,mBAAT,EA3BL;;AAAA;AAAA;AAAA,+BA4BDlU,QAAQ,CAACqN,oBAAT,GAAgCrN,QAAQ,CAACqN,oBAAzC,GAAgE,CA5B/D;AAAA;AAAA,+BA8BH+H,aA9BG;AAAA;AAAA,mCAkBsBlC,aAlBtB;;AAAA;AAkBCnS,cAAAA,OAlBD;AAAA,iDAiCE,KAAK0G,GAAL,CAAS4N,aAAT,CAAuBtU,OAAvB,CAjCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjfT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqhBE;;;;;;AArhBF;;AAAA,SA2hBeuU,gBA3hBf;AAAA;AAAA;AAAA,wFA2hBS,mBACLtV,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,gBAAUA,QAAQ,CAAC4N,SAAT,KAAuBnP,SAAjC,4CAAAkI,SAAS,QAAmC,8BAAnC,CAAT,GAAAA,SAAS,OAAT;AACA,gBACE3G,QAAQ,CAAC6N,2BAAT,KAAyC,EAAzC,IACE0H,SAAS,CAACvV,QAAQ,CAAC6N,2BAAV,CAFb,4CAAAlH,SAAS,QAGP,8EAHO,CAAT,GAAAA,SAAS,OAAT;AAMMmN,cAAAA,kBAVD,GAUsB,KAAK3D,WAAL,CAAiB4D,eAAjB,CACzB/T,QADyB,EAEzB0N,oBAFyB,CAVtB;AAAA,8BAeqB3N,cAfrB;AAAA,8BAgBH+T,kBAhBG;AAAA,8BAiBH,KAAK/S,OAjBF;AAAA;AAAA,qBAkBG,KAAK+H,gBAAL,EAlBH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAeCkL,cAAAA,WAfD;AAAA,8BAqBiB,IArBjB;AAAA,8BAsBHrQ,UAAU,CAACuN,IAtBR;AAAA,8BAwBD,KAAKnQ,OAxBJ;AAAA,8BAyBDf,QAAQ,CAACQ,IAzBR;AAAA,8BA0BDR,QAAQ,CAACoC,MAAT,GAAkBpC,QAAQ,CAACoC,MAA3B,GAAoC,EA1BnC;AAAA;AAAA,qBA2BK,KAAKqF,GAAL,CAASyM,mBAAT,EA3BL;;AAAA;AAAA;AAAA,+BA4BDF,WA5BC;AAAA,+BA6BDhU,QAAQ,CAAC8N,YAAT,GAAwB9N,QAAQ,CAAC8N,YAAjC,GAAgD,EA7B/C;AAAA,+BA8BD9N,QAAQ,CAAC4N,SA9BR;AAAA,+BA+BD5N,QAAQ,CAACqN,oBAAT,GAAgCrN,QAAQ,CAACqN,oBAAzC,GAAgE,CA/B/D;AAAA,+BAgCDrN,QAAQ,CAAC2N,yBAAT,GACI3N,QAAQ,CAAC2N,yBADb,GAEI,CAlCH;AAAA,+BAmCD3N,QAAQ,CAAC6N,2BAnCR;AAAA;AAAA,+BAqCH2H,gBArCG;AAAA;AAAA,mCAqBsBtC,aArBtB;;AAAA;AAqBCnS,cAAAA,OArBD;AAAA,iDAwCE,KAAK0G,GAAL,CAASgO,aAAT,CAAuB1U,OAAvB,CAxCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3hBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAskBE;;;;;;AAtkBF;;AAAA,SA4kBe2U,qBA5kBf;AAAA;AAAA;AAAA,6FA4kBS,mBACL1V,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGC8T,cAAAA,kBAHD,GAGsB,KAAK3D,WAAL,CAAiB4D,eAAjB,CACzB/T,QADyB,EAEzByN,yBAFyB,CAHtB;AAAA,8BAQqB1N,cARrB;AAAA,8BASH+T,kBATG;AAAA,8BAUH,KAAK/S,OAVF;AAAA;AAAA,qBAWG,KAAK+H,gBAAL,EAXH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAQCkL,cAAAA,WARD;AAAA,8BAciB,IAdjB;AAAA,8BAeHrQ,UAAU,CAACyN,SAfR;AAAA,8BAgBF,KAAKrQ,OAhBH;AAAA;AAAA,qBAgBkB,KAAK0G,GAAL,CAASyM,mBAAT,EAhBlB;;AAAA;AAAA;AAAA,8BAgBkDF,WAhBlD;AAAA;AAAA,+BAiBH2B,kBAjBG;AAAA;AAAA,mCAcsBzC,aAdtB;;AAAA;AAcCnS,cAAAA,OAdD;AAAA,iDAoBE,KAAK0G,GAAL,CAASmO,kBAAT,CAA4B7U,OAA5B,CApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5kBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EACU0K,eADV;AAAayE,UAMGtE,QAAQ,CAACjH,QAAQ,CAACC,KAAV;;ACMxB;;;;;AAIA,IAAaiR,YAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAUE;;;;AAVF,SAcYnK,cAdZ,GAcY;AACR,WAAOmK,YAAY,CAACjK,KAApB;AACD;AAED;;;AAlBF;;AAAA,SAqBY9D,eArBZ,GAqBY;AACR,WAAOqM,sBAAsB,CAAClS,OAAvB,CAA+B,KAAKlB,OAApC,EAA6C,KAAKY,gBAAlD,CAAP;AACD;AAED;;;AAzBF;;AAAA,SA4BYyG,aA5BZ,GA4BY;AACR,WAAOyN,YAAY,CAAC3R,UAApB;AACD;AAED;;;;;;AAhCF;;AAAA,SAsCeqK,GAtCf;AAAA;AAAA;AAAA,2EAsCS,iBAAUjK,OAAV,EAA2BvD,OAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BACqDmB,OADrD;AAAA,4BAEHqC,gBAAgB,CAAC,KAAKqD,gBAAN,EAAwBtD,OAAxB,EAAiC,KAAKtD,cAAtC,CAFb;AAAA,4BAGH,KAAK4G,gBAAL,CAAsBkO,OAAtB,CAA8BxR,OAA9B,CAHG;AAAA,4BAIH,KAAKsD,gBAAL,CACG6G,WADH,CACenK,OADf,WAES;AAAA,uBAAM8C,WAAS,CAACC,IAAV,CAAe,GAAf,CAAN;AAAA,eAFT,CAJG;;AAAA,mBAOHtG,OAPG;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAOc,KAAK4N,SAAL,CAAe5N,OAAf,EAAwBuD,OAAxB,CAPd;;AAAA;AAAA,0CAOgD2H,QAPhD;AAAA;AAAA;;AAAA;AAAA,4BAO6D,CAP7D;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAC6D9J,GAD7D;;AAAA;AAAA;AACEnC,cAAAA,QADF;AACY8V,cAAAA,OADZ;AACqBC,cAAAA,MADrB;AAC6BC,cAAAA,cAD7B;AAAA,+CASE;AACLF,gBAAAA,OAAO,EAAPA,OADK;AAELC,gBAAAA,MAAM,EAANA,MAFK;AAGL/V,gBAAAA,QAAQ,EAARA,QAHK;AAILgW,gBAAAA,cAAc,EAAdA;AAJK,eATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuDE;;;;AAvDF;;AAAA,SA2DeC,MA3Df;AAAA;AAAA;AAAA,8EA2DS,kBAAalV,OAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgB,KAAK6G,gBAAL,CAAsBsO,WAAtB,EADhB;;AAAA;AACCC,cAAAA,KADD,kBACqDlK,QADrD;AAAA;AAAA,qBAEQ/J,OAAO,CAACC,GAAR,CACX+J,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACiK,KAAD,CAAL,CAAahK,IAAb,EAAX,EAAgCC,GAAhC,CAAoC,UAACC,CAAD;AAAA,uBAClC,KAAI,CAACkC,GAAL,CAASlC,CAAC,CAAC5J,QAAF,EAAT,EAAuB1B,OAAvB,CADkC;AAAA,eAApC,CADW,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3DT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoEe4N,SApEf;AAAA,iFAoES,kBAAgB5N,OAAhB,EAAiCuD,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKsD,gBAAL,CAAsB+G,SAAtB,CAAgC5N,OAAhC,EAAyCuD,OAAzC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwEeoK,OAxEf;AAAA,+EAwES,kBAAcpK,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA,6BACQ,KAAKsD,gBADb;AAAA;AAAA,qBAEG,KAAKkB,gBAAL,EAFH;;AAAA;AAAA;AAAA,6BAGHxE,OAHG;AAAA;AAAA,kCAC8BqK,SAD9B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+EeyH,UA/Ef;AAAA,kFA+ES,kBACLrV,OADK,EAELsV,QAFK,EAGLC,aAHK,EAILC,OAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMAD,aANA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAOU,KAAK1O,gBAAL,CAAsB4O,gBAAtB,CAAuCzV,OAAvC,EAAgDsV,QAAhD,CAPV;;AAAA;AAAA;;AAAA;AAAA,kBASAE,OATA;AAAA;AAAA;AAAA;;AAAA,oBAUG,IAAI1T,KAAJ,CAAU,qBAAV,CAVH;;AAAA;AAYC5B,cAAAA,QAZD,GAYYwV,eAAe,CAACxU,OAAhB,CACfqU,aADe,EAEf,KAAK3U,gBAFU,CAZZ;AAAA,6BAgBkBV,QAhBlB;AAAA;AAAA,qBAiBG,KAAK6H,gBAAL,EAjBH;;AAAA;AAAA;AAAA,6BAkBH,KAAK/H,OAlBF;AAAA;AAAA,kCAgB2ByV,gBAhB3B;;AAAA;AAgBCE,cAAAA,QAhBD;AAAA;AAAA,qBAqBIzV,QAAQ,CAAC0V,WAAT,CAAqBJ,OAArB,CArBJ;;AAAA;AAAA,4CAqBmC1U,WArBnC;AAAA,6BAsBH,KAAKd,OAAL,CAAac,WAAb,EAtBG;AAoBC+U,cAAAA,eApBD;AAAA,gDAuBEF,QAAQ,IAAIE,eAvBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/ET;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SA0GeC,WA1Gf;AAAA;AAAA;AAAA,mFA0GS,kBACLR,QADK,EAELK,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA,kBAELA,QAFK;AAELA,gBAAAA,QAFK,GAEM,IAFN;AAAA;;AAAA;AAAA,qBAIQ,KAAKnO,eAAL,CAAqB,mBAArB,EAA0C,CACrD8N,QADqD,EAErDK,QAFqD,CAA1C,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1GT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoHe3R,QApHf;AAAA,gFAoHS,kBACLmF,EADK,EAEL5F,OAFK,EAGL0K,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA,6BAKQ,IALR;AAAA;AAAA,qBAMG,KAAKlG,gBAAL,EANH;;AAAA;AAAA;AAAA,6BAOHoB,EAPG;AAAA,6BAQH;AAAE5F,gBAAAA,OAAO,EAAPA,OAAF;AAAW0K,gBAAAA,MAAM,EAANA;AAAX,eARG;AAAA,6BASH,CAAC,CAAD,CATG;AAAA;AAAA,kCAKaU,YALb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAkIeoH,MAlIf;AAAA;AAAA;AAAA,8EAkIS,kBAAa9W,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACS,KAAK+W,WAAL,CAAiB,CAAC/W,QAAD,CAAjB,CADT;;AAAA;AAAA,+DACuC,CADvC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsIe+W,WAtIf;AAAA,mFAsIS,kBACLvF,SADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCwF,cAAAA,kBAHD,GAGsBxF,SAAS,CAACpF,GAAV,CAAc,UAACwF,CAAD;AAAA,uBAAQ;AAC/C5R,kBAAAA,QAAQ,EAAE4R,CADqC;AAE/CmE,kBAAAA,MAAM,EAAE;AAFuC,iBAAR;AAAA,eAAd,CAHtB;AAAA,gDAOE,KAAKkB,kBAAL,CAAwBD,kBAAxB,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgJeE,aAhJf;AAAA,qFAgJS,mBACLF,kBADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGS,KAAKC,kBAAL,CAAwB,CAACD,kBAAD,CAAxB,CAHT;;AAAA;AAAA,iEAGwD,CAHxD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsJeC,kBAtJf;AAAA,0FAsJS,mBACLD,kBADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGc9U,OAAO,CAACC,GAAR,CACjB6U,kBAAkB,CAAC5K,GAAnB,CAAuB,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAACnX,QAAT;AAAA,eAAvB,EAA0CoM,GAA1C,CAA8C,UAAC+K,CAAD;AAAA,uBAAOpX,cAAc,CAACoX,CAAD,CAArB;AAAA,eAA9C,CADiB,CAHd;;AAAA;AAGCC,cAAAA,IAHD;AAMCC,cAAAA,QAND,GAMYL,kBAAkB,CAAC5K,GAAnB,CAAuB,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAACpB,MAAT;AAAA,eAAvB,CANZ;AAAA;AAAA,qBAOY,KAAKjN,gBAAL,EAPZ;;AAAA;AAOCoB,cAAAA,EAPD;AAAA;AAAA,qBAQiB,KAAK3B,eAAL,CAAqB,oBAArB,EAA2C,CAC/D2B,EAD+D,EAE/DkN,IAF+D,EAG/DC,QAH+D,EAI/D,CAAC,CAAD,CAJ+D,CAA3C,CARjB;;AAAA;AAQCC,cAAAA,OARD;AAcCjM,cAAAA,KAdD,GAcS,KAAKH,cAAL,CAAoB,cAApB,EAAoCoM,OAApC,oBAAoCA,OAAO,CAAElM,IAA7C,CAdT;AAeCmM,cAAAA,QAfD,GAeYlM,KAfZ,oBAeYA,KAAK,CAAEkM,QAfnB;AAAA;AAAA,qBAgBQrV,OAAO,CAACC,GAAR,CACXoV,QAAQ,CAACnL,GAAT,CAAa,UAAC9H,OAAD;AAAA,uBAAwB,MAAI,CAACiK,GAAL,CAASjK,OAAO,CAAC7B,QAAR,EAAT,CAAxB;AAAA,eAAb,CADW,CAhBR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA2Ke+U,eA3Kf;AAAA,uFA2KS,mBACLC,aADK,EAELC,WAFK,EAGLjO,IAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKa1J,cAAc,CAAC0J,IAAI,CAACzJ,QAAN,CAL3B;;AAAA;AAKCoB,cAAAA,GALD;AAAA;AAAA,qBAMC,KAAKmH,eAAL,CAAqB,WAArB,EAAkC,CACtCkP,aADsC,EAEtCC,WAFsC,EAGtCjO,IAAI,CAACsM,MAHiC,EAItC3U,GAJsC,CAAlC,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3KT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwLeuW,eAxLf;AAAA,qFAwLS,mBACLF,aADK,EAELC,WAFK,EAGLjO,IAHK;AAAA;AAAA;AAAA;AAAA;AAAA,iDAKE,KAAK+N,eAAL,CAAqBC,aAArB,EAAoCC,WAApC,EAAiDjO,IAAjD,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxLT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgMemO,aAhMf;AAAA,qFAgMS,mBACLH,aADK,EAELnT,OAFK,EAGLtE,QAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKaD,cAAc,CAACC,QAAD,CAL3B;;AAAA;AAKCoB,cAAAA,GALD;AAAA;AAAA,qBAMC,KAAKmH,eAAL,CAAqB,YAArB,EAAmC,CAACkP,aAAD,EAAgBnT,OAAhB,EAAyBlD,GAAzB,CAAnC,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhMT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwMeyW,gBAxMf;AAAA,qFAwMS,mBACLJ,aADK,EAELnT,OAFK,EAGLtE,QAHK;AAAA;AAAA;AAAA;AAAA;AAAA,iDAKE,KAAK4X,aAAL,CAAmBH,aAAnB,EAAkCnT,OAAlC,EAA2CtE,QAA3C,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxMT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgNekP,IAhNf;AAAA,4EAgNS,mBAAWzF,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,8BACC,IADD;AAAA;AAAA,qBACmB,KAAKX,gBAAL,EADnB;;AAAA;AAAA;AAAA,8BAC4CW,IAD5C;AAAA;AAAA,mCACM0F,MADN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhNT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoNeA,MApNf;AAAA,8EAoNS,mBACLjF,EADK,EAELT,IAFK,EAGLtK,IAHK;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGLA,IAHK;AAGLA,gBAAAA,IAHK,GAGa,CAAC,CAAD,CAHb;AAAA;;AAAA;AAAA,qBAKC,KAAKoJ,eAAL,CAAqB,MAArB,EAA6B,CAAC2B,EAAD,EAAKT,IAAI,CAACnF,OAAV,EAAmBmF,IAAI,CAACuF,MAAxB,EAAgC7P,IAAhC,CAA7B,CALD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApNT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4Ne2Y,SA5Nf;AAAA,iFA4NS,mBAAgBrO,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,8BACC,IADD;AAAA;AAAA,qBACwB,KAAKX,gBAAL,EADxB;;AAAA;AAAA;AAAA,8BACiDW,IADjD;AAAA;AAAA,mCACM2F,WADN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5NT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgOeA,WAhOf;AAAA,mFAgOS,mBACLlF,EADK,EAELT,IAFK,EAGLtK,IAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGLA,IAHK;AAGLA,gBAAAA,IAHK,GAGa,CAAC,CAAD,CAHb;AAAA;;AAKC4Y,cAAAA,GALD,GAKOtO,IAAI,CAAC2C,GAAL,CAAS,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAAC7S,OAAT;AAAA,eAAT,CALP;AAMC0T,cAAAA,OAND,GAMWvO,IAAI,CAAC2C,GAAL,CAAS,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAACnI,MAAT;AAAA,eAAT,CANX;AAAA;AAAA,qBAOC,KAAKzG,eAAL,CAAqB,WAArB,EAAkC,CAAC2B,EAAD,EAAK6N,GAAL,EAAUC,OAAV,EAAmB7Y,IAAnB,CAAlC,CAPD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhOT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0OeqQ,IA1Of;AAAA,4EA0OS,mBAAW/F,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,8BACQ,IADR;AAAA;AAAA,qBAC4B,KAAKX,gBAAL,EAD5B;;AAAA;AAAA;AAAA,8BACqDW,IADrD;AAAA;AAAA,mCACagG,QADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1OT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8OewI,SA9Of;AAAA,iFA8OS,mBACLxO,IADK;AAAA;AAAA;AAAA;AAAA;AAAA,8BAGQ,IAHR;AAAA;AAAA,qBAGiC,KAAKX,gBAAL,EAHjC;;AAAA;AAAA;AAAA,8BAG0DW,IAH1D;AAAA;AAAA,mCAGayO,aAHb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9OT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoPezI,QApPf;AAAA,gFAoPS,mBACL0I,OADK,EAEL1O,IAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIQ,KAAKlB,eAAL,CAAqB,MAArB,EAA6B,CACxC4P,OADwC,EAExC1O,IAAI,CAACnF,OAFmC,EAGxCmF,IAAI,CAACuF,MAHmC,CAA7B,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApPT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+PekJ,aA/Pf;AAAA,qFA+PS,mBACLC,OADK,EAEL1O,IAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICsO,cAAAA,GAJD,GAIOtO,IAAI,CAAC2C,GAAL,CAAS,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAAC7S,OAAT;AAAA,eAAT,CAJP;AAKC0T,cAAAA,OALD,GAKWvO,IAAI,CAAC2C,GAAL,CAAS,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAACnI,MAAT;AAAA,eAAT,CALX;AAAA;AAAA,qBAMQ,KAAKzG,eAAL,CAAqB,WAArB,EAAkC,CAAC4P,OAAD,EAAUJ,GAAV,EAAeC,OAAf,CAAlC,CANR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/PT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwQetI,YAxQf;AAAA,oFAwQS,mBACLrI,IADK,EAEL6C,EAFK,EAGLT,IAHK,EAILtK,IAJK;AAAA;AAAA;AAAA;AAAA;AAAA,kBAILA,IAJK;AAILA,gBAAAA,IAJK,GAIa,CAAC,CAAD,CAJb;AAAA;;AAAA;AAAA,qBAMQ,KAAKoJ,eAAL,CAAqB,kBAArB,EAAyC,CACpDlB,IADoD,EAEpD6C,EAFoD,EAGpDT,IAAI,CAACnF,OAH+C,EAIpDmF,IAAI,CAACuF,MAJ+C,EAKpD7P,IALoD,CAAzC,CANR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxQT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuReiZ,iBAvRf;AAAA,yFAuRS,mBACL/Q,IADK,EAEL6C,EAFK,EAGLT,IAHK,EAILtK,IAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAILA,IAJK;AAILA,gBAAAA,IAJK,GAIa,CAAC,CAAD,CAJb;AAAA;;AAMC4Y,cAAAA,GAND,GAMOtO,IAAI,CAAC2C,GAAL,CAAS,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAAC7S,OAAT;AAAA,eAAT,CANP;AAOC0T,cAAAA,OAPD,GAOWvO,IAAI,CAAC2C,GAAL,CAAS,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAACnI,MAAT;AAAA,eAAT,CAPX;AAAA;AAAA,qBAQQ,KAAKzG,eAAL,CAAqB,uBAArB,EAA8C,CACzDlB,IADyD,EAEzD6C,EAFyD,EAGzD6N,GAHyD,EAIzDC,OAJyD,EAKzD7Y,IALyD,CAA9C,CARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvRT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwSekZ,aAxSf;AAAA,qFAwSS,mBAAoBrJ,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKzG,eAAL,CAAqB,eAArB,EAAsC,CAACyG,MAAD,CAAtC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxST;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4SeW,iBA5Sf;AAAA,yFA4SS,mBACL3P,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGaD,cAAc,CAACC,QAAD,CAH3B;;AAAA;AAGCoB,cAAAA,GAHD;AAAA;AAAA,qBAIQ,KAAKmH,eAAL,CAAqB,gBAArB,EAAuC,CAACnH,GAAD,CAAvC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5ST;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmTewO,qBAnTf;AAAA,6FAmTS,mBACLC,UADK;AAAA;AAAA;AAAA;AAAA;AAAA,kBACLA,UADK;AACLA,gBAAAA,UADK,GACQ,KADR;AAAA;;AAAA;AAAA,qBAGQ,KAAKtH,eAAL,CAAqB,uBAArB,EAA8C,CAACsH,UAAD,CAA9C,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnTT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyTE;;;;;;;AAzTF;;AAAA,SAgUeyI,QAhUf;AAAA;AAAA;AAAA,gFAgUS,mBAAeC,QAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACWA,QADX;AAAA;AAAA;AAAA;;AAAA,8BACsBA,QADtB;AAAA;AAAA;;AAAA;AAAA;AAAA,qBACuC,KAAKzP,gBAAL,EADvC;;AAAA;AAAA;;AAAA;AACC/H,cAAAA,OADD;AAAA;AAAA,qBAEe,KAAK6G,gBAAL,CAAsBsO,WAAtB,EAFf;;AAAA;AAECC,cAAAA,KAFD;AAAA;AAAA,qBAGkB,KAAKvO,gBAAL,CAAsB4Q,cAAtB,CACrBtM,KAAK,CAACiK,KAAK,CAAClK,QAAN,EAAD,CAAL,CAAwBwM,IAAxB,CAA6B1X,OAA7B,CADqB,EAErBmL,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACiK,KAAK,CAAClK,QAAN,EAAD,CAAL,CAAwBE,IAAxB,EAAX,CAFqB,CAHlB;;AAAA;AAGCuM,cAAAA,QAHD;AAQCC,cAAAA,aARD,GAQiBD,QAAQ,CAC3BtM,GADmB,CACf,UAACwM,CAAD,EAAIvM,CAAJ;AACH,uBAAO;AACL/H,kBAAAA,OAAO,EAAE+H,CADJ;AAELqC,kBAAAA,OAAO,EAAEkK;AAFJ,iBAAP;AAID,eANmB,EAOnBnH,MAPmB,CAOZ,UAACmH,CAAD;AAAA,uBAAOA,CAAC,CAAClK,OAAF,CAAUmK,EAAV,CAAa,CAAb,CAAP;AAAA,eAPY,CARjB;AAAA;AAAA,qBAgBQ3W,OAAO,CAACC,GAAR,CACXwW,aAAa,CAACvM,GAAd;AAAA,0EAAkB,mBAAOwM,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAmB,MAAI,CAACrK,GAAL,CAASqK,CAAC,CAACtU,OAAF,CAAU7B,QAAV,EAAT,CAAnB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAlB;;AAAA;AAAA;AAAA;AAAA,kBADW,CAhBR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhUT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAkCgJ,eAAlC;AAAaoK,aACG3R,aAAyBP,UAAU,CAACgN;AADvCkF,aAGGjK,QAAQ,CACpBjH,QAAQ,CAACC,KADW,EAEpBD,QAAQ,CAACE,MAFW,EAGpBF,QAAQ,CAACG,MAHW,EAIpBH,QAAQ,CAACI,QAJW;;AC1DxB;;;;;AAIA,IAAa+T,eAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAKE;;;;AALF,SASYpN,cATZ,GASY;AACR,WAAOoN,eAAe,CAAClN,KAAvB;AACD;AAED;;;AAbF;;AAAA,SAgBY9D,eAhBZ,GAgBY;AACR,WAAO6N,kBAAkB,CAAC1T,OAAnB,CAA2B,KAAKlB,OAAhC,EAAyC,KAAKY,gBAA9C,CAAP;AACD;AAED;;;AApBF;;AAAA,SAuBYyG,aAvBZ,GAuBY;AACR,WAAO0Q,eAAe,CAAC5U,UAAvB;AACD,GAzBH;;AAAA,SA2Be6U,OA3Bf;AAAA,+EA2BS,iBAAcC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACC7V,cAAAA,OADD,GACWmC,SAAS,CAAC0T,GAAG,CAACvW,QAAJ,EAAD,CADpB;AAAA;AAAA,qBAEQ,KAAKmF,gBAAL,CAAsBmR,OAAtB,CAA8B5V,OAA9B,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAiCe8V,OAjCf;AAAA;AAAA;AAAA,+EAiCS,kBACLD,GADK,EAELxW,KAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICW,cAAAA,OAJD,GAIWmC,SAAS,CAAC0T,GAAG,CAACvW,QAAJ,EAAD,CAJpB;AAAA;AAAA,qBAKQ,KAAK8F,eAAL,CAAqB,SAArB,EAAgC,CAACpF,OAAD,EAAUX,KAAV,CAAhC,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAqCiJ,eAArC;AAAaqN,gBACG5U,aAAyBP,UAAU,CAACyN;AADvC0H,gBAGGlN,QAAQ,CAACjH,QAAQ,CAACC,KAAV,EAAiBD,QAAQ,CAACK,MAA1B;;AC2BxB;;;;;AAIA,IAAakU,UAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAUE;;;;AAVF,SAcYxN,cAdZ,GAcY;AACR,WAAOwN,UAAU,CAACtN,KAAlB;AACD;AAED;;;AAlBF;;AAAA,SAqBY9D,eArBZ,GAqBY;AACR,WAAOqR,gBAAa,CAAClX,OAAd,CAAsB,KAAKlB,OAA3B,EAAoC,KAAKY,gBAAzC,CAAP;AACD;AAED;;;AAzBF;;AAAA,SA4BYyG,aA5BZ,GA4BY;AACR,WAAO8Q,UAAU,CAAChV,UAAlB;AACD,GA9BH;;AAAA,SAgCgBK,gBAhChB;AAAA,yFAgCU,iBAAuBD,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACOC,gBAAgB,CAC3B,KAAKqD,gBADsB,EAE3BtD,OAF2B,EAG3B,KAAKtD,cAHsB,CADvB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhCV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwCeuN,GAxCf;AAAA,2EAwCS,kBAAUjK,OAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC2BpC,OAAO,CAACC,GAAR,CAAY,CAC1C,KAAKiX,OAAL,CAAa9U,OAAb,WAA4B;AAAA,uBAAMxC,WAAN;AAAA,eAA5B,CAD0C,EAE1C,KAAKyC,gBAAL,CAAsBD,OAAtB,CAF0C,CAAZ,CAD3B;;AAAA;AAAA;AACEyK,cAAAA,KADF;AACS/O,cAAAA,QADT;AAAA,gDAME;AAAE+O,gBAAAA,KAAK,EAALA,KAAF;AAAS/O,gBAAAA,QAAQ,EAARA;AAAT,eANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiDeiW,MAjDf;AAAA,8EAiDS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgB,KAAKrO,gBAAL,CAAsBsO,WAAtB,EADhB;;AAAA;AACCC,cAAAA,KADD,kBACqDlK,QADrD;AAAA;AAAA,qBAEQ/J,OAAO,CAACC,GAAR,CACX+J,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACiK,KAAD,CAAL,CAAahK,IAAb,EAAX,EAAgCC,GAAhC,CAAoC,UAACC,CAAD;AAAA,uBAAO,KAAI,CAACkC,GAAL,CAASlC,CAAC,CAAC5J,QAAF,EAAT,CAAP;AAAA,eAApC,CADW,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwDe4W,eAxDf;AAAA,uFAwDS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACe,KAAKzR,gBAAL,CAAsBsO,WAAtB,EADf;;AAAA;AACCC,cAAAA,KADD;AAAA;AAAA,qBAEoB,KAAKvO,gBAAL,CAAsB0R,eAAtB,EAFpB;;AAAA;AAECC,cAAAA,UAFD;AAAA;AAAA,qBAGQrX,OAAO,CAACC,GAAR,CACX+J,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACiK,KAAK,CAACqD,GAAN,CAAUD,UAAV,EAAsBtN,QAAtB,EAAD,CAAL,CAAwCE,IAAxC,EAAX,EAA2DC,GAA3D,CAA+D,UAACC,CAAD;AAAA,uBAC7D,MAAI,CAACkC,GAAL,CAASgL,UAAU,CAACjS,GAAX,CAAe+E,CAAf,EAAkB5J,QAAlB,EAAT,CAD6D;AAAA,eAA/D,CADW,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkEegX,aAlEf;AAAA,qFAkES;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgB,KAAK7R,gBAAL,CAAsB0R,eAAtB,EADhB;;AAAA;AACCnD,cAAAA,KADD,kBACyDlK,QADzD;AAAA;AAAA,qBAEQ/J,OAAO,CAACC,GAAR,CACX+J,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACiK,KAAD,CAAL,CAAahK,IAAb,EAAX,EAAgCC,GAAhC,CAAoC,UAACC,CAAD;AAAA,uBAAO,MAAI,CAACkC,GAAL,CAASlC,CAAC,CAAC5J,QAAF,EAAT,CAAP;AAAA,eAApC,CADW,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyEe2W,OAzEf;AAAA,+EAyES,kBAAc9U,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKsD,gBAAL,CAAsBwR,OAAtB,CAA8B9U,OAA9B,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6EegU,QA7Ef;AAAA,gFA6ES,kBAAeC,QAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACWA,QADX;AAAA;AAAA;AAAA;;AAAA,6BACsBA,QADtB;AAAA;AAAA;;AAAA;AAAA;AAAA,qBACuC,KAAKzP,gBAAL,EADvC;;AAAA;AAAA;;AAAA;AACC/H,cAAAA,OADD;AAAA;AAAA,qBAEiB,KAAK6G,gBAAL,CAAsB+G,SAAtB,CAAgC5N,OAAhC,CAFjB;;AAAA;AAEC2N,cAAAA,OAFD;AAGCgL,cAAAA,OAHD,GAGWxN,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACwC,OAAO,CAACzC,QAAR,EAAD,CAAL,CAA0BE,IAA1B,EAAX,CAHX;AAAA;AAAA,qBAIkBjK,OAAO,CAACC,GAAR,CACrBuX,OAAO,CAACtN,GAAR,CAAY,UAACC,CAAD;AAAA,uBAAO,MAAI,CAACzE,gBAAL,CAAsB+R,mBAAtB,CAA0C5Y,OAA1C,EAAmDsL,CAAnD,CAAP;AAAA,eAAZ,CADqB,CAJlB;;AAAA;AAICkL,cAAAA,QAJD;AAAA;AAAA,qBAOQrV,OAAO,CAACC,GAAR,CACXoV,QAAQ,CAACnL,GAAT,CAAa,UAAC9H,OAAD;AAAA,uBAAa,MAAI,CAACiK,GAAL,CAASjK,OAAO,CAAC7B,QAAR,EAAT,CAAb;AAAA,eAAb,CADW,CAPR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7ET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyFemX,sBAzFf;AAAA,8FAyFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEG,KAAKhS,gBAAL,CAAsBiS,gCAAtB,EAFH;;AAAA;AACCC,cAAAA,KADD;AAAA;AAAA,qBAGQ,KAAKlS,gBAAL,CAAsBmS,cAAtB,CAAqCD,KAArC,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+FeE,oBA/Ff;AAAA,4FA+FS;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,UADD,GACc,EADd;AAEI5N,cAAAA,CAFJ,GAEQ,CAFR;;AAAA;AAAA;AAAA,6BAID4N,UAJC;AAAA;AAAA,qBAIqB,KAAKrS,gBAAL,CAAsBmS,cAAtB,CAAqC1N,CAArC,CAJrB;;AAAA;AAAA;;AAAA,2BAIUkD,IAJV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEalD,cAAAA,CAAC,EAFd;AAAA;AAAA;;AAAA;AAAA,gDASE4N,UATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/FT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA2GexL,WA3Gf;AAAA,mFA2GS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAK7G,gBAAL,CAAsBsO,WAAtB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3GT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+GegE,cA/Gf;AAAA,sFA+GS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKtS,gBAAL,CAAsBsS,cAAtB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/GT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmHeC,oBAnHf;AAAA,4FAmHS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACS,KAAKvS,gBAAL,CAAsBsO,WAAtB,EADT;;AAAA;AAAA;AAAA;AAAA,qBAEG,KAAKkE,kBAAL,EAFH;;AAAA;AAAA;AAAA,+DAC8CZ,GAD9C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyHeY,kBAzHf;AAAA,0FAyHS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKxS,gBAAL,CAAsB0R,eAAtB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6He3K,SA7Hf;AAAA,iFA6HS,mBAAgB5N,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAK6G,gBAAL,CAAsB+G,SAAtB,CAAgC5N,OAAhC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7HT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiIe2N,OAjIf;AAAA,+EAiIS;AAAA;AAAA;AAAA;AAAA;AAAA,8BACQ,IADR;AAAA;AAAA,qBAC6B,KAAK5F,gBAAL,EAD7B;;AAAA;AAAA;AAAA;AAAA,mCACa6F,SADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoIeyH,UApIf;AAAA,kFAoIS,mBAAiBrV,OAAjB,EAAkCsV,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKzO,gBAAL,CAAsB4O,gBAAtB,CAAuCzV,OAAvC,EAAgDsV,QAAhD,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAyIeQ,WAzIf;AAAA;AAAA;AAAA,mFAyIS,mBACLR,QADK,EAELK,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA,kBAELA,QAFK;AAELA,gBAAAA,QAFK,GAEM,IAFN;AAAA;;AAAA;AAAA,qBAIQ,KAAKnO,eAAL,CAAqB,mBAArB,EAA0C,CACrD8N,QADqD,EAErDK,QAFqD,CAA1C,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmJe3R,QAnJf;AAAA,gFAmJS,mBACLmF,EADK,EAEL5F,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIc,KAAKwE,gBAAL,EAJd;;AAAA;AAICzB,cAAAA,IAJD;AAAA;AAAA,qBAKQ,KAAKkB,eAAL,CACX,2CADW,EAEX,CAAClB,IAAD,EAAO6C,EAAP,EAAW5F,OAAX,CAFW,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SA+Je+V,QA/Jf;AAAA;AAAA;AAAA,gFA+JS,mBAAera,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAKsa,aAAL,CAAmB,CAACta,QAAD,CAAnB,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/JT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmKesa,aAnKf;AAAA,qFAmKS,mBAAoB9I,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACctP,OAAO,CAACC,GAAR,CAAYqP,SAAS,CAACpF,GAAV,CAAc,UAACwF,CAAD;AAAA,uBAAO7R,cAAc,CAAC6R,CAAD,CAArB;AAAA,eAAd,CAAZ,CADd;;AAAA;AACCwF,cAAAA,IADD;AAAA;AAAA,qBAEC,KAAK7O,eAAL,CAAqB,eAArB,EAAsC,CAAC6O,IAAD,CAAtC,CAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwKemD,cAxKf;AAAA,sFAwKS,mBAAqBvL,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAKzG,eAAL,CAAqB,gBAArB,EAAuC,CAACyG,MAAD,CAAvC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4KewL,uBA5Kf;AAAA,+FA4KS,mBACLP,UADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGCQ,cAAAA,WAHD,GAGeR,UAAU,CAAC7N,GAAX,CAAe,UAACsO,CAAD;AAAA,uBAAQ;AACzCC,kBAAAA,cAAc,EAAED,CAAC,CAACE,uBAAF,IAA6B,CADJ;AAEzCC,kBAAAA,aAAa,EAAEH,CAAC,CAACG,aAFwB;AAGzCC,kBAAAA,iBAAiB,EAAE,CAHsB;AAIzCC,kBAAAA,2BAA2B,EACzBL,CAAC,CAACK,2BAAF,IAAiCL,CAAC,CAACG,aALI;AAMzCG,kBAAAA,kCAAkC,EAChCN,CAAC,CAACM,kCAAF,IAAwC,CAPD;AAQzCC,kBAAAA,aAAa,EAAEP,CAAC,CAACO,aAAF,IAAmB,CARO;AASzChI,kBAAAA,QAAQ,EAAEyH,CAAC,CAACzH,QAAF,IAAcnR,WATiB;AAUzCoZ,kBAAAA,UAAU,EAAER,CAAC,CAACQ,UAAF,IAAgB7V,UAAU,CAAC,CAAC,CAAD,CAAD,EAAM,EAAN;AAVG,iBAAR;AAAA,eAAf,CAHf;AAAA;AAAA,qBAeC,KAAKkD,eAAL,CAAqB,yBAArB,EAAgD,CAACkS,WAAD,CAAhD,CAfD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5KT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8LeU,KA9Lf;AAAA,6EA8LS,mBAAYC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,MADD,GACU,CAAChW,UAAU,CAAC,CAAC,CAAD,CAAD,EAAM,EAAN,CAAX,CADV;AAAA;AAAA,qBAEuB,KAAKuU,sBAAL,EAFvB;;AAAA;AAEC0B,cAAAA,aAFD;AAAA;AAAA,qBAGoB,KAAKpS,gBAAL,EAHpB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,8BAGgD,EAHhD;;AAAA;AAGCqS,cAAAA,SAHD;;AAIL,kBACED,aAAa,CAACrI,QAAd,KAA2BnR,WAA3B,IACAwZ,aAAa,CAACL,aAAd,GAA8B,CAFhC,EAGE;AACAM,gBAAAA,SAAS,CAAC,OAAD,CAAT,GAAqBnU,SAAS,CAACC,IAAV,CAAeiU,aAAa,CAACL,aAA7B,EAA4C5Q,GAA5C,CACnB+Q,QADmB,CAArB;AAGD;;AAXI;AAAA,qBAYC,KAAK7S,eAAL,CAAqB,OAArB,EAA8B,CAAC6S,QAAD,EAAWC,MAAX,CAA9B,EAAkDE,SAAlD,CAZD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9LT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6Me/L,IA7Mf;AAAA,4EA6MS,mBAAWlL,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKiE,eAAL,CAAqB,MAArB,EAA6B,CAACjE,OAAD,CAA7B,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7MT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiNeoL,YAjNf;AAAA,oFAiNS,mBACLrI,IADK,EAEL6C,EAFK,EAGL5F,OAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKQ,KAAKiE,eAAL,CAAqB,cAArB,EAAqC,CAAClB,IAAD,EAAO6C,EAAP,EAAW5F,OAAX,CAArC,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjNT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SA0NeqL,iBA1Nf;AAAA;AAAA;AAAA,yFA0NS,mBACL3P,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGaD,cAAc,CAACC,QAAD,CAH3B;;AAAA;AAGCoB,cAAAA,GAHD;AAAA;AAAA,qBAIQ,KAAKmH,eAAL,CAAqB,gBAArB,EAAuC,CAACnH,GAAD,CAAvC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1NT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiOeiX,aAjOf;AAAA,qFAiOS,mBAAoBrJ,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKzG,eAAL,CAAqB,eAArB,EAAsC,CAACyG,MAAD,CAAtC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjOT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqOewM,eArOf;AAAA,uFAqOS,mBAAsBpa,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKmH,eAAL,CAAqB,iBAArB,EAAwC,CAACnH,GAAD,CAAxC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArOT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyOeqa,iBAzOf;AAAA,yFAyOS,mBACLzM,MADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGQ,KAAKzG,eAAL,CAAqB,mBAArB,EAA0C,CAACyG,MAAD,CAA1C,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzOT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+OeY,qBA/Of;AAAA,6FA+OS,mBACLC,UADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGQ,KAAKtH,eAAL,CAAqB,uBAArB,EAA8C,CAACsH,UAAD,CAA9C,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/OT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAgCpE,eAAhC;AAAayN,WACGhV,aAAyBP,UAAU,CAACuN;AADvCgI,WAGGtN,QAAQ,CACpBjH,QAAQ,CAACC,KADW,EAEpBD,QAAQ,CAACE,MAFW,EAGpBF,QAAQ,CAACG,MAHW,EAIpBH,QAAQ,CAACI,QAJW;;ACDxB;;;;;AAIA,IAAa2W,YAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AASE;;;;AATF,SAaYhQ,cAbZ,GAaY;AACR,WAAOgQ,YAAY,CAAC9P,KAApB;AACD;AAED;;;AAjBF;;AAAA,SAoBY9D,eApBZ,GAoBY;AACR,WAAOmN,eAAe,CAAChT,OAAhB,CAAwB,KAAKlB,OAA7B,EAAsC,KAAKY,gBAA3C,CAAP;AACD;AAED;;;AAxBF;;AAAA,SA2BYyG,aA3BZ,GA2BY;AACR,WAAOsT,YAAY,CAACxX,UAApB;AACD,GA7BH;;AAAA,SA+BgByX,wBA/BhB;AAAA,gGA+BU,iBACNC,OADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAGF3I,cAAAA,QAHE,GAG+B,IAH/B;AAAA;AAAA;AAAA,qBAMa3Q,gBAAgB,CAC/B,KAAKX,gBAD0B,EAE/Bia,OAAO,CAAC3I,QAFuB,EAG/B2I,OAAO,CAACX,aAHuB,CAN7B;;AAAA;AAMJhI,cAAAA,QANI;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAcFjT,cAAAA,QAdE,GAckCvB,SAdlC;AAAA;AAAA;AAAA,qBAgBa4F,0BAA0B,CACzC,KAAK1C,gBADoC,EAEzCia,OAAO,CAACtF,aAFiC,EAGzCsF,OAAO,CAACtX,OAAR,CAAgB7B,QAAhB,EAHyC,EAIzC,KAAKzB,cAJoC,CAhBvC;;AAAA;AAgBJhB,cAAAA,QAhBI;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAyBC;AACLyE,gBAAAA,EAAE,EAAEmX,OAAO,CAACC,SAAR,CAAkBpZ,QAAlB,EADC;AAELqZ,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MAFX;AAGLxX,gBAAAA,OAAO,EAAEsX,OAAO,CAACtX,OAAR,CAAgB7B,QAAhB,EAHJ;AAILgV,gBAAAA,aAAa,EAAEmE,OAAO,CAACtF,aAJlB;AAKLyF,gBAAAA,aAAa,EAAE/b,QALV;AAMLob,gBAAAA,QAAQ,EAAEQ,OAAO,CAACR,QANb;AAOL7Y,gBAAAA,KAAK,EAAEqZ,OAAO,CAACX,aAPV;AAQLe,gBAAAA,gBAAgB,EAAEJ,OAAO,CAAC3I,QARrB;AASLgJ,gBAAAA,gBAAgB,EAAEhJ,QATb;AAULiJ,gBAAAA,SAAS,EAAEN,OAAO,CAACM,SAAR,CAAkBrD,EAAlB,CAAqB,CAArB,IACP,IAAIsD,IAAJ,CAASP,OAAO,CAACM,SAAR,CAAkBjQ,QAAlB,KAA+B,IAAxC,CADO,GAEP,IAZC;AAaLmQ,gBAAAA,OAAO,EACLR,OAAO,CAACQ,OAAR,CAAgBvD,EAAhB,CAAmB,CAAnB,KACA+C,OAAO,CAACQ,OAAR,CAAgBC,GAAhB,CAAoB9O,MAAM,CAAC+O,gBAAP,GAA0B,CAA9C,CADA,GAEI,IAAIH,IAAJ,CAASP,OAAO,CAACQ,OAAR,CAAgBnQ,QAAhB,KAA6B,IAAtC,CAFJ,GAGI;AAjBD,eAzBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/BV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6EE;;;AA7EF;;AAAA,SAgFesQ,UAhFf;AAAA;AAAA;AAAA,kFAgFS,kBAAiBV,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKtN,GAAL,CAASsN,SAAT,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoFE;;;AApFF;;AAAA,SAuFeW,cAvFf;AAAA;AAAA;AAAA,sFAuFS,kBACL/K,MADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGQ,KAAKwE,MAAL,CAAYxE,MAAZ,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6FelD,GA7Ff;AAAA,2EA6FS,kBAAUsN,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACiB,KAAKjU,gBAAL,CAAsB6U,QAAtB,CAA+BZ,SAA/B,CADjB;;AAAA;AACCD,cAAAA,OADD;AAAA;AAAA,qBAEQ,KAAKD,wBAAL,CAA8BC,OAA9B,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7FT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkGe3F,MAlGf;AAAA,8EAkGS,kBAAaxE,MAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACDgL,cAAAA,QADC,GACiB,EADjB;;AAAA,kBAGAhL,MAHA;AAAA;AAAA;AAAA;;AAAA,6BAIQgL,QAJR;AAAA;AAAA,qBAI8B,KAAK7U,gBAAL,CAAsB4U,cAAtB,EAJ9B;;AAAA;AAAA;AAIHC,cAAAA,QAJG,gBAIiB9J,MAJjB;AAAA;AAAA;;AAAA;AAAA,oBAMClB,MAAM,CAACgG,aAAP,IAAwBhG,MAAM,CAACnN,OANhC;AAAA;AAAA;AAAA;;AAAA,6BAOUmY,QAPV;AAAA;AAAA,qBAQO,KAAK7U,gBAAL,CAAsB8U,kBAAtB,CACJjL,MAAM,CAACgG,aADH,EAEJhG,MAAM,CAACnN,OAFH,CARP;;AAAA;AAAA;AAODmY,cAAAA,QAPC,gBAOmB9J,MAPnB;AAAA;AAAA;;AAAA;AAAA,mBAaQlB,MAAM,CAACqK,MAbf;AAAA;AAAA;AAAA;;AAAA,6BAcUW,QAdV;AAAA;AAAA,qBAeO,KAAK7U,gBAAL,CAAsB+U,mBAAtB,CAA0ClL,MAAM,CAACqK,MAAjD,CAfP;;AAAA;AAAA;AAcDW,cAAAA,QAdC,gBAcmB9J,MAdnB;AAAA;AAAA;;AAAA;AAAA,mBAiBQlB,MAAM,CAACgG,aAjBf;AAAA;AAAA;AAAA;;AAAA,6BAkBUgF,QAlBV;AAAA;AAAA,qBAmBO,KAAK7U,gBAAL,CAAsBgV,0BAAtB,CACJnL,MAAM,CAACgG,aADH,CAnBP;;AAAA;AAAA;AAkBDgF,cAAAA,QAlBC,gBAkBmB9J,MAlBnB;AAAA;AAAA;;AAAA;AAAA,6BAwBU8J,QAxBV;AAAA;AAAA,qBAyBO,KAAK7U,gBAAL,CAAsB4U,cAAtB,EAzBP;;AAAA;AAAA;AAwBDC,cAAAA,QAxBC,gBAwBmB9J,MAxBnB;;AAAA;AA8BL8J,cAAAA,QAAQ,GAAGA,QAAQ,CAChBhL,MADQ,CACD,UAACoL,CAAD;AACN,oBAAIA,CAAC,CAACzB,QAAF,CAAW0B,EAAX,CAAc,CAAd,CAAJ,EAAsB;AACpB,yBAAO,KAAP;AACD;;AACD,oBAAIrL,MAAJ,EAAY;AACV,sBAAMsL,YAAY,GAAG,CAAAtL,MAAM,QAAN,YAAAA,MAAM,CAAEqK,MAAR,KAAkB,EAAvC;AACA,sBAAMkB,mBAAmB,GAAG,CAAAvL,MAAM,QAAN,YAAAA,MAAM,CAAEgG,aAAR,KAAyB,EAArD;AACA,sBAAMwF,aAAa,GAAG,CAAAxL,MAAM,QAAN,YAAAA,MAAM,CAAEnN,OAAR,KAAmB,EAAzC;;AAEA,sBACEyY,YAAY,IACZA,YAAY,CAAClb,WAAb,OAA+Bgb,CAAC,CAACf,MAAF,CAASja,WAAT,EAFjC,EAGE;AACA,2BAAO,KAAP;AACD;;AACD,sBACEmb,mBAAmB,IACnBA,mBAAmB,CAACnb,WAApB,OAAsCgb,CAAC,CAACvG,aAAF,CAAgBzU,WAAhB,EAFxC,EAGE;AACA,2BAAO,KAAP;AACD;;AACD,sBACEob,aAAa,IACbA,aAAa,CAACpb,WAAd,OAAgCgb,CAAC,CAACvY,OAAF,CAAU7B,QAAV,GAAqBZ,WAArB,EAFlC,EAGE;AACA,2BAAO,KAAP;AACD;AACF;;AACD,uBAAO,IAAP;AACD,eA9BQ,EA+BRuK,GA/BQ,CA+BJ,UAACyQ,CAAD;AAAA,uBAAO,KAAI,CAAClB,wBAAL,CAA8BkB,CAA9B,CAAP;AAAA,eA/BI,CAAX;AA9BK;AAAA,qBA8DQ3a,OAAO,CAACC,GAAR,CAAYsa,QAAZ,CA9DR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmKeS,eAnKf;AAAA,uFAmKS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKtV,gBAAL,CAAsBuV,YAAtB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAwKeC,IAxKf;AAAA;AAAA;AAAA,4EAwKS,kBACL9G,aADK,EAELhS,OAFK,EAGL0X,gBAHK,EAILzZ,KAJK,EAKL6Y,QALK,EAMLiC,cANK,EAOLC,iBAPK,EAQLC,eARK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMLF,cANK;AAMLA,gBAAAA,cANK,GAM0B,CAN1B;AAAA;;AAAA,kBAOLC,iBAPK;AAOLA,gBAAAA,iBAPK,GAO6B,CAP7B;AAAA;;AAAA,kBAQLC,eARK;AAQLA,gBAAAA,eARK,GAQ2B,CAR3B;AAAA;;AAAA;AAAA,qBAUc,KAAKzU,gBAAL,EAVd;;AAAA;AAUCzB,cAAAA,IAVD;AAWCmW,cAAAA,MAXD,GAWUC,eAAe,CAACxb,OAAhB,CACbqU,aADa,EAEb,KAAK3U,gBAFQ,CAXV;;AAAA;AAAA,qBAiBkB6b,MAAM,CAACE,iBAAP,CAAyBvd,mBAAzB,CAjBlB;;AAAA;AAiBCwd,cAAAA,QAjBD;;AAAA,mBAkBDA,QAlBC;AAAA;AAAA;AAAA;;AAmBG/b,cAAAA,KAnBH,GAmBW6U,eAAe,CAACxU,OAAhB,CACZqU,aADY,EAEZ,KAAK3U,gBAFO,CAnBX;AAAA;AAAA,qBAwBoBC,KAAK,CAAC4U,gBAAN,CAAuBnP,IAAvB,EAA6B,KAAKtG,OAAlC,CAxBpB;;AAAA;AAwBG2V,cAAAA,QAxBH;;AAAA,kBAyBEA,QAzBF;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA2BQ9U,KAAK,CAAC+U,WAAN,CAAkBrS,OAAlB,CA3BR;;AAAA;AAAA,4CA2BoCzC,WA3BpC;AAAA,6BA4BC,KAAKd,OAAL,CAAac,WAAb,EA5BD;AA0BK+U,cAAAA,eA1BL;;AAAA,kBA8BIA,eA9BJ;AAAA;AAAA;AAAA;;AAAA,6BAgCkBhV,KAhClB;AAAA,6BAiCG,KAAKb,OAjCR;AAAA;AAAA,qBAmCS,KAAKmI,gBAAL,EAnCT;;AAAA;AAAA;AAAA;AAAA,kCAgCwB0U,iBAhCxB,kCAkCG,IAlCH;;AAAA;AAgCO7T,cAAAA,EAhCP;AAAA;AAAA,qBAqCOA,EAAE,CAACC,IAAH,EArCP;;AAAA;AAAA;AAAA;;AAAA;AAyCGpI,cAAAA,MAzCH,GAyCWic,gBAAgB,CAAC5b,OAAjB,CACZqU,aADY,EAEZ,KAAK3U,gBAFO,CAzCX;AAAA;AAAA,qBA8CoBC,MAAK,CAAC4U,gBAAN,CAAuBnP,IAAvB,EAA6B,KAAKtG,OAAlC,CA9CpB;;AAAA;AA8CG2V,cAAAA,SA9CH;;AAAA,kBA+CEA,SA/CF;AAAA;AAAA;AAAA;;AAAA,6BAiDgB9U,MAjDhB;AAAA,6BAkDC,KAAKb,OAlDN;AAAA;AAAA,qBAoDO,KAAKmI,gBAAL,EApDP;;AAAA;AAAA;AAAA;AAAA,kCAiDsB0U,iBAjDtB,kCAmDC,IAnDD;;AAAA;AAiDK7T,cAAAA,GAjDL;AAAA;AAAA,qBAsDKA,GAAE,CAACC,IAAH,EAtDL;;AAAA;AAAA;AAAA,qBA0DiB,KAAKzB,eAAL,CAAqB,MAArB,EAA6B,CACjD+N,aADiD,EAEjDhS,OAFiD,EAGjD0X,gBAHiD,EAIjDzZ,KAJiD,EAKjD6Y,QALiD,EAMjDiC,cANiD,EAOjDC,iBAPiD,EAQjDC,eARiD,CAA7B,CA1DjB;;AAAA;AA0DCjG,cAAAA,OA1DD;AAoECjM,cAAAA,KApED,GAoES,KAAKH,cAAL,CAAoB,YAApB,EAAkCoM,OAAlC,oBAAkCA,OAAO,CAAElM,IAA3C,CApET;AAqECwQ,cAAAA,OArED,GAqEWvQ,KArEX,oBAqEWA,KAAK,CAAEuQ,OArElB;AAAA;AAAA,qBAsEQ,KAAKD,wBAAL,CAA8BC,OAA9B,CAtER;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiPekC,SAjPf;AAAA,iFAiPS,kBAAgBjC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACsB,KAAKtN,GAAL,CAASsN,SAAT,CADtB;;AAAA;AACCkC,cAAAA,WADD,kBAC2C3C,QAD3C;AAAA;AAAA,qBAEC,KAAK4C,MAAL,CAAYnC,SAAZ,EAAuBkC,WAAvB,CAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjPT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsPeC,MAtPf;AAAA,8EAsPS,kBAAanC,SAAb,EAAgCT,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAK7S,eAAL,CAAqB,QAArB,EAA+B,CAACsT,SAAD,EAAYT,QAAZ,CAA/B,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtPT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0Pe6C,GA1Pf;AAAA,2EA0PS,mBACLpC,SADK,EAELT,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIiB,KAAK7M,GAAL,CAASsN,SAAT,CAJjB;;AAAA;AAICD,cAAAA,OAJD;AAAA;AAAA,qBAKe,KAAK9S,gBAAL,EALf;;AAAA;AAKCiG,cAAAA,KALD;AAMCF,cAAAA,OAND,GAMW,KAAK9N,OANhB;AAOCmd,cAAAA,UAPD,GAOctC,OAAO,CAACrZ,KAAR,CAAc8H,GAAd,CAAkBjD,SAAS,CAACC,IAAV,CAAe+T,QAAf,CAAlB,CAPd;;AAAA,oBAQDQ,OAAO,CAACI,gBAAR,IAA4BJ,OAAO,CAACI,gBAAR,KAA6Bla,WARxD;AAAA;AAAA;AAAA;;AASGC,cAAAA,KATH,GASWC,cAAc,CAACC,OAAf,CACZ2Z,OAAO,CAACI,gBADI,EAEZ,KAAKra,gBAFO,CATX;AAAA;AAAA,qBAaqBI,KAAK,CAAC6M,SAAN,CAAgBG,KAAhB,EAAuBF,OAAvB,CAbrB;;AAAA;AAaGD,cAAAA,SAbH;;AAAA,mBAcCA,SAAS,CAACuP,EAAV,CAAaD,UAAb,CAdD;AAAA;AAAA;AAAA;;AAAA,8BAgBgBnc,KAhBhB;AAAA,8BAiBC8M,OAjBD;AAAA,8BAkBCqP,UAlBD;AAAA;AAAA,qBAmBO,KAAKhV,gBAAL,EAnBP;;AAAA;AAAA;AAAA;AAAA,mCAgBsBkV,iBAhBtB;;AAAA;AAgBKrU,cAAAA,EAhBL;AAAA;AAAA,qBAqBKA,EAAE,CAACC,IAAH,EArBL;;AAAA;AAAA;AAAA,qBAyBiB,KAAKzB,eAAL,CAAqB,KAArB,EAA4B,CAACsT,SAAD,EAAYT,QAAZ,CAA5B,CAzBjB;;AAAA;AAyBC9D,cAAAA,OAzBD;AA0BCjM,cAAAA,KA1BD,GA0BS,KAAKH,cAAL,CAAoB,SAApB,EAA+BoM,OAA/B,oBAA+BA,OAAO,CAAElM,IAAxC,CA1BT;AAAA;AAAA,qBA2BQ,KAAKuQ,wBAAL,CAA8BtQ,KAA9B,oBAA8BA,KAAK,CAAEuQ,OAArC,CA3BR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1PT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAyRejM,iBAzRf;AAAA;AAAA;AAAA,yFAyRS,mBACL3P,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGaD,cAAc,CAACC,QAAD,CAH3B;;AAAA;AAGCoB,cAAAA,GAHD;AAAA;AAAA,qBAIQ,KAAKmH,eAAL,CAAqB,gBAArB,EAAuC,CAACnH,GAAD,CAAvC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzRT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgSeid,eAhSf;AAAA,uFAgSS,mBAAsBC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAK/V,eAAL,CAAqB,iBAArB,EAAwC,CAAC+V,GAAD,CAAxC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhST;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAkC7S,eAAlC;AAAaiQ,aACGxX,aAAyBP,UAAU,CAACqN;AADvC0K,aAGG9P,QAAQ,CACpBjH,QAAQ,CAACC,KADW,EAEpBD,QAAQ,CAACM,MAFW,EAGpBN,QAAQ,CAACG,MAHW;;AC3CxB;;;;;AAIA,IAAayZ,SAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SAUY7S,cAVZ,GAUY;AACR,WAAO6S,SAAS,CAAC3S,KAAjB;AACD;AAED;;;AAdF;;AAAA,SAiBY9D,eAjBZ,GAiBY;AACR,WAAO8M,YAAY,CAAC3S,OAAb,CAAqB,KAAKlB,OAA1B,EAAmC,KAAKY,gBAAxC,CAAP;AACD;AAED;;;AArBF;;AAAA,SAwBYyG,aAxBZ,GAwBY;AACR,WAAOmW,SAAS,CAACra,UAAjB;AACD,GA1BH;;AAAA,SA4BeqK,GA5Bf;AAAA,2EA4BS,iBAAUjK,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQC,gBAAgB,CAC3B,KAAKqD,gBADsB,EAE3BtD,OAF2B,EAG3B,KAAKtD,cAHsB,CADxB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoCeiV,MApCf;AAAA,8EAoCS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgB,KAAKrO,gBAAL,CAAsBsO,WAAtB,EADhB;;AAAA;AACCC,cAAAA,KADD,kBACqDlK,QADrD;AAAA;AAAA,qBAEQ/J,OAAO,CAACC,GAAR,CACX+J,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACiK,KAAD,CAAL,CAAahK,IAAb,EAAX,EAAgCC,GAAhC,CAAoC,UAACC,CAAD;AAAA,uBAAO,KAAI,CAACkC,GAAL,CAASlC,CAAC,CAAC5J,QAAF,EAAT,CAAP;AAAA,eAApC,CADW,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA2Ce+b,YA3Cf;AAAA,oFA2CS,kBAAmBla,OAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC2BpC,OAAO,CAACC,GAAR,CAAY,CAC1C,KAAKiX,OAAL,CAAa9U,OAAb,CAD0C,EAE1C,KAAKiK,GAAL,CAASjK,OAAT,CAF0C,CAAZ,CAD3B;;AAAA;AAAA;AACEyK,cAAAA,KADF;AACS/O,cAAAA,QADT;AAAA,gDAME;AAAE+O,gBAAAA,KAAK,EAALA,KAAF;AAAS/O,gBAAAA,QAAQ,EAARA;AAAT,eANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoDeye,eApDf;AAAA,uFAoDS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgB,KAAK7W,gBAAL,CAAsBsO,WAAtB,EADhB;;AAAA;AACCC,cAAAA,KADD,kBACqDlK,QADrD;AAAA;AAAA,qBAEQ/J,OAAO,CAACC,GAAR,CACX+J,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACiK,KAAD,CAAL,CAAahK,IAAb,EAAX,EAAgCC,GAAhC,CAAoC,UAACC,CAAD;AAAA,uBAClC,MAAI,CAACmS,YAAL,CAAkBnS,CAAC,CAAC5J,QAAF,EAAlB,CADkC;AAAA,eAApC,CADW,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6DE;;;;;;;AA7DF;;AAAA,SAoEe2W,OApEf;AAAA;AAAA;AAAA,+EAoES,kBAAc9U,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEU,KAAKsD,gBAAL,CAAsBwR,OAAtB,CAA8B9U,OAA9B,CAFV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gDAIIxC,WAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4EewW,QA5Ef;AAAA,gFA4ES,kBAAeC,QAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACWA,QADX;AAAA;AAAA;AAAA;;AAAA,6BACsBA,QADtB;AAAA;AAAA;;AAAA;AAAA;AAAA,qBACuC,KAAKzP,gBAAL,EADvC;;AAAA;AAAA;;AAAA;AACC/H,cAAAA,OADD;AAAA;AAAA,qBAEiB,KAAK6G,gBAAL,CAAsB+G,SAAtB,CAAgC5N,OAAhC,CAFjB;;AAAA;AAEC2N,cAAAA,OAFD;AAGCgL,cAAAA,OAHD,GAGWxN,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACwC,OAAO,CAACzC,QAAR,EAAD,CAAL,CAA0BE,IAA1B,EAAX,CAHX;AAAA;AAAA,qBAIkBjK,OAAO,CAACC,GAAR,CACrBuX,OAAO,CAACtN,GAAR,CAAY,UAACC,CAAD;AAAA,uBAAO,MAAI,CAACzE,gBAAL,CAAsB+R,mBAAtB,CAA0C5Y,OAA1C,EAAmDsL,CAAnD,CAAP;AAAA,eAAZ,CADqB,CAJlB;;AAAA;AAICkL,cAAAA,QAJD;AAAA;AAAA,qBAOQrV,OAAO,CAACC,GAAR,CACXoV,QAAQ,CAACnL,GAAT,CAAa,UAAC9H,OAAD;AAAA,uBAAa,MAAI,CAACiK,GAAL,CAASjK,OAAO,CAAC7B,QAAR,EAAT,CAAb;AAAA,eAAb,CADW,CAPR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5ET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwFegM,WAxFf;AAAA,mFAwFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAK7G,gBAAL,CAAsB6G,WAAtB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4FeE,SA5Ff;AAAA,iFA4FS,kBAAgB5N,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAK6G,gBAAL,CAAsB+G,SAAtB,CAAgC5N,OAAhC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5FT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgGe2N,OAhGf;AAAA,+EAgGS;AAAA;AAAA;AAAA;AAAA;AAAA,6BACQ,IADR;AAAA;AAAA,qBAC6B,KAAK5F,gBAAL,EAD7B;;AAAA;AAAA;AAAA;AAAA,kCACa6F,SADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoGeyH,UApGf;AAAA,kFAoGS,mBAAiBrV,OAAjB,EAAkCsV,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKzO,gBAAL,CAAsB4O,gBAAtB,CAAuCzV,OAAvC,EAAgDsV,QAAhD,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAwGeQ,WAxGf;AAAA;AAAA;AAAA,mFAwGS,mBACLR,QADK,EAELK,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA,kBAELA,QAFK;AAELA,gBAAAA,QAFK,GAEM,IAFN;AAAA;;AAAA;AAAA,qBAIQ,KAAKnO,eAAL,CAAqB,mBAArB,EAA0C,CACrD8N,QADqD,EAErDK,QAFqD,CAA1C,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkHe3R,QAlHf;AAAA,gFAkHS,mBACLmF,EADK,EAEL5F,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIc,KAAKwE,gBAAL,EAJd;;AAAA;AAICzB,cAAAA,IAJD;AAAA;AAAA,qBAKQ,KAAKkB,eAAL,CACX,2CADW,EAEX,CAAClB,IAAD,EAAO6C,EAAP,EAAW5F,OAAX,CAFW,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SA8He4K,IA9Hf;AAAA;AAAA;AAAA,4EA8HS,mBAAWlP,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA,8BACQ,IADR;AAAA;AAAA,qBAC0B,KAAK8I,gBAAL,EAD1B;;AAAA;AAAA;AAAA,8BACmD9I,QADnD;AAAA;AAAA,mCACamP,MADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9HT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkIeA,MAlIf;AAAA,8EAkIS,mBACLjF,EADK,EAELlK,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIaD,cAAc,CAACC,QAAD,CAJ3B;;AAAA;AAICoB,cAAAA,GAJD;AAAA;AAAA,qBAKiB,KAAKmH,eAAL,CAAqB,SAArB,EAAgC,CAAC2B,EAAD,EAAK9I,GAAL,CAAhC,CALjB;;AAAA;AAKCkW,cAAAA,OALD;AAMCjM,cAAAA,KAND,GAMS,KAAKH,cAAL,CAAoB,QAApB,EAA8BoM,OAA9B,oBAA8BA,OAAO,CAAElM,IAAvC,CANT;AAOC9G,cAAAA,OAPD,GAOW+G,KAPX,oBAOWA,KAAK,CAAE/G,OAPlB;AAAA;AAAA,qBAQQ,KAAKiK,GAAL,CAASjK,OAAO,CAAC7B,QAAR,EAAT,CARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6IeqV,SA7If;AAAA,iFA6IS,mBACLtG,SADK;AAAA;AAAA;AAAA;AAAA;AAAA,8BAGQ,IAHR;AAAA;AAAA,qBAG+B,KAAK1I,gBAAL,EAH/B;;AAAA;AAAA;AAAA,8BAGwD0I,SAHxD;AAAA;AAAA,mCAGapC,WAHb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7IT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmJeA,WAnJf;AAAA,mFAmJS,mBACLlF,EADK,EAELsH,SAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIctP,OAAO,CAACC,GAAR,CAAYqP,SAAS,CAACpF,GAAV,CAAc,UAACwF,CAAD;AAAA,uBAAO7R,cAAc,CAAC6R,CAAD,CAArB;AAAA,eAAd,CAAZ,CAJd;;AAAA;AAICwF,cAAAA,IAJD;AAAA;AAAA,qBAKiB,KAAK7O,eAAL,CAAqB,cAArB,EAAqC,CAAC2B,EAAD,EAAKkN,IAAL,CAArC,CALjB;;AAAA;AAKCE,cAAAA,OALD;AAMCjM,cAAAA,KAND,GAMS,KAAKH,cAAL,CAAoB,aAApB,EAAmCoM,OAAnC,oBAAmCA,OAAO,CAAElM,IAA5C,CANT;AAOCmM,cAAAA,QAPD,GAOYlM,KAAK,CAACkM,QAPlB;AAAA;AAAA,qBAQQrV,OAAO,CAACC,GAAR,CACXoV,QAAQ,CAACnL,GAAT,CAAa,UAAC9H,OAAD;AAAA,uBAAwB,MAAI,CAACiK,GAAL,CAASjK,OAAO,CAAC7B,QAAR,EAAT,CAAxB;AAAA,eAAb,CADW,CARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgKe+M,IAhKf;AAAA,4EAgKS,mBAAWlL,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKiE,eAAL,CAAqB,MAArB,EAA6B,CAACjE,OAAD,CAA7B,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoKeoL,YApKf;AAAA,oFAoKS,mBACLrI,IADK,EAEL6C,EAFK,EAGL5F,OAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKQ,KAAKiE,eAAL,CAAqB,cAArB,EAAqC,CAAClB,IAAD,EAAO6C,EAAP,EAAW5F,OAAX,CAArC,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SA6KesL,qBA7Kf;AAAA;AAAA;AAAA,6FA6KS,mBACLC,UADK;AAAA;AAAA;AAAA;AAAA;AAAA,kBACLA,UADK;AACLA,gBAAAA,UADK,GACQ,KADR;AAAA;;AAAA;AAAA,qBAGQ,KAAKtH,eAAL,CAAqB,uBAArB,EAA8C,CAACsH,UAAD,CAA9C,CAHR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7KT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmLewI,aAnLf;AAAA,qFAmLS,mBAAoBrJ,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKzG,eAAL,CAAqB,eAArB,EAAsC,CAACyG,MAAD,CAAtC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnLT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuLeW,iBAvLf;AAAA,yFAuLS,mBACL3P,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGaD,cAAc,CAACC,QAAD,CAH3B;;AAAA;AAGCoB,cAAAA,GAHD;AAAA;AAAA,qBAIQ,KAAKmH,eAAL,CAAqB,gBAArB,EAAuC,CAACnH,GAAD,CAAvC,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvLT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA+BqK,eAA/B;AAAa8S,UACGra,aAAyBP,UAAU,CAAC8M;AADvC8N,UAGG3S,QAAQ,CACpBjH,QAAQ,CAACC,KADW,EAEpBD,QAAQ,CAACE,MAFW,EAGpBF,QAAQ,CAACG,MAHW,EAIpBH,QAAQ,CAACI,QAJW;;AC4CxB;;;;;AAIA,IAAa2Z,UAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAUE;;;;AAVF,SAcYhT,cAdZ,GAcY;AACR,WAAOgT,UAAU,CAAC9S,KAAlB;AACD;AAED;;;AAlBF;;AAAA,SAqBY9D,eArBZ,GAqBY;AACR,WAAOsN,aAAa,CAACnT,OAAd,CAAsB,KAAKlB,OAA3B,EAAoC,KAAKY,gBAAzC,CAAP;AACD;AAED;;;AAzBF;;AAAA,SA4BYyG,aA5BZ,GA4BY;AACR,WAAOsW,UAAU,CAACxa,UAAlB;AACD,GA9BH;;AAAA,SAgCeya,IAhCf;AAAA,4EAgCS,iBAAWC,MAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACiB,KAAKrW,eAAL,CAAqB,UAArB,EAAiC,CAACqW,MAAD,CAAjC,CADjB;;AAAA;AACCtH,cAAAA,OADD;AAECjM,cAAAA,KAFD,GAES,KAAKH,cAAL,CAAoB,iBAApB,EAAuCoM,OAAvC,oBAAuCA,OAAO,CAAElM,IAAhD,CAFT;AAGCyT,cAAAA,SAHD,GAGaxT,KAAK,CAACwT,SAHnB;AAICC,cAAAA,MAJD,GAIUzT,KAAK,CAACyT,MAJhB;AAAA;AAAA,qBAM2B,IAAI5c,OAAJ,CAAY,UAAC6c,OAAD;AAC1C,gBAAA,KAAI,CAACnX,gBAAL,CAAsBoX,IAAtB;AAEE,gBAAA,KAAI,CAACpX,gBAAL,CAAsBqX,OAAtB,CAA8BC,iBAA9B,CAAgD,IAAhD,EAAsDJ,MAAtD,CAFF,EAGE,UAACK,OAAD,EAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,cAA/B,EAA+CC,SAA/C;AACE,sBAAIV,SAAS,KAAKQ,UAAlB,EAA8B;AAC5BN,oBAAAA,OAAO,CAAC;AACNH,sBAAAA,MAAM,EAAEO,OADF;AAENL,sBAAAA,MAAM,EAAEM,OAFF;AAGNP,sBAAAA,SAAS,EAATA,SAHM;AAINS,sBAAAA,cAAc,EAAdA,cAJM;AAKNC,sBAAAA,SAAS,EAATA;AALM,qBAAD,CAAP;AAOD;AACF,iBAbH;AAeD,eAhB+B,CAN3B;;AAAA;AAMCC,cAAAA,YAND;AAuBGD,cAAAA,SAvBH,GAuBiBC,YAvBjB,CAuBGD,SAvBH;AAAA;AAAA,qBAwBQrd,OAAO,CAACC,GAAR,CACXod,SAAS,CAACnT,GAAV,CAAc,UAACqT,QAAD;AAAA,uBACZpb,0BAA0B,CACxB,KAAI,CAAC1C,gBADmB,EAExB,KAAI,CAACZ,OAFmB,EAGxB0e,QAAQ,CAAChd,QAAT,EAHwB,EAIxB,KAAI,CAACzB,cAJmB,CADd;AAAA,eAAd,CADW,CAxBR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoEeuN,GApEf;AAAA,2EAoES,kBAAUqQ,MAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC+B1c,OAAO,CAACC,GAAR,CAAY,CAC9CkC,0BAA0B,CACxB,KAAK1C,gBADmB,EAExB,KAAKZ,OAFmB,EAGxB6d,MAHwB,EAIxB,KAAK5d,cAJmB,CADoB,EAO9C,KAAK4G,gBAAL,CAAsB8X,OAAtB,CAA8Bd,MAA9B,CAP8C,EAQ9C,KAAKhX,gBAAL,CACG6G,WADH,CACemQ,MADf,WAES;AAAA,uBAAMxX,SAAS,CAACC,IAAV,CAAe,GAAf,CAAN;AAAA,eAFT,CAR8C,CAAZ,CAD/B;;AAAA;AAAA;AACEhG,cAAAA,IADF;AACQse,cAAAA,KADR;AACe5J,cAAAA,MADf;AAaCzU,cAAAA,MAbD,GAawB;AAC3BmD,gBAAAA,EAAE,EAAEma,MADuB;AAE3B5e,gBAAAA,QAAQ,EAAEqB,IAFiB;AAG3ByU,gBAAAA,OAAO,EAAE6J,KAAK,CAAC7J,OAHY;AAI3B8J,gBAAAA,aAAa,EAAE7J,MAJY;AAK3B8J,gBAAAA,SAAS,EAAEF,KAAK,CAACE,SAAN,CAAgBhH,EAAhB,CAAmB,CAAnB,IACP,IAAIsD,IAAJ,CAASwD,KAAK,CAACE,SAAN,CAAgB5T,QAAhB,KAA6B,IAAtC,CADO,GAEP;AAPuB,eAbxB;AAAA,gDAsBE3K,MAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6Fe2U,MA7Ff;AAAA,8EA6FS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgB,KAAKrO,gBAAL,CAAsBsO,WAAtB,EADhB;;AAAA;AACCC,cAAAA,KADD,kBACqDlK,QADrD;AAAA;AAAA,qBAEQ/J,OAAO,CAACC,GAAR,CACX+J,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAACiK,KAAD,CAAL,CAAahK,IAAb,EAAX,EAAgCC,GAAhC,CAAoC,UAACC,CAAD;AAAA,uBAAO,MAAI,CAACkC,GAAL,CAASlC,CAAC,CAAC5J,QAAF,EAAT,CAAP;AAAA,eAApC,CADW,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7FT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoGeqd,OApGf;AAAA,+EAoGS,kBAAclB,MAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACoB,KAAKhX,gBAAL,CAAsBmY,kBAAtB,CAAyCnB,MAAzC,CADpB;;AAAA;AACCoB,cAAAA,UADD;;AAAA,kBAEAA,UAAU,CAACC,MAFX;AAAA;AAAA;AAAA;;AAAA,oBAGG,IAAIrd,aAAJ,EAHH;;AAAA;AAAA;AAAA,qBAKiBV,OAAO,CAACC,GAAR,CACpB6d,UAAU,CAACzI,QAAX,CAAoBnL,GAApB,CAAwB,UAAC9H,OAAD;AAAA,uBACtBD,0BAA0B,CACxB,MAAI,CAAC1C,gBADmB,EAExBqe,UAAU,CAACC,MAFa,EAGxB3b,OAAO,CAAC7B,QAAR,EAHwB,EAIxB,MAAI,CAACzB,cAJmB,CADJ;AAAA,eAAxB,CADoB,CALjB;;AAAA;AAKCkf,cAAAA,OALD;AAAA,gDAeEA,OAAO,CAAC9T,GAAR,CAAY,UAAC+T,MAAD,EAAS9T,CAAT;AAAA,uBAAgB;AACjC0J,kBAAAA,MAAM,EAAEiK,UAAU,CAACI,aAAX,CAAyB/T,CAAzB,CADyB;AAEjCrM,kBAAAA,QAAQ,EAAEmgB;AAFuB,iBAAhB;AAAA,eAAZ,CAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SA0HexR,SA1Hf;AAAA;AAAA;AAAA,iFA0HS,kBAAgB5N,OAAhB,EAAiCuD,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKsD,gBAAL,CAAsB+G,SAAtB,CAAgC5N,OAAhC,EAAyCuD,OAAzC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1HT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8HeoK,OA9Hf;AAAA,+EA8HS,kBAAcpK,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA,6BACQ,IADR;AAAA;AAAA,qBAC6B,KAAKwE,gBAAL,EAD7B;;AAAA;AAAA;AAAA,6BACsDxE,OADtD;AAAA;AAAA,kCACaqK,SADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9HT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkIeyH,UAlIf;AAAA,kFAkIS,kBAAiBrV,OAAjB,EAAkCsV,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKzO,gBAAL,CAAsB4O,gBAAtB,CAAuCzV,OAAvC,EAAgDsV,QAAhD,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsIeQ,WAtIf;AAAA,mFAsIS,kBAAkBR,QAAlB,EAAoCK,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoCA,QAApC;AAAoCA,gBAAAA,QAApC,GAA+C,IAA/C;AAAA;;AAAA;AAAA,qBACC,KAAKnO,eAAL,CAAqB,mBAArB,EAA0C,CAAC8N,QAAD,EAAWK,QAAX,CAA1C,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0Ie3R,QA1If;AAAA,gFA0IS,kBAAemF,EAAf,EAA2B5F,OAA3B,EAA4C0K,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,6BACC,IADD;AAAA;AAAA,qBAEG,KAAKlG,gBAAL,EAFH;;AAAA;AAAA;AAAA,6BAGHoB,EAHG;AAAA,6BAIH5F,OAJG;AAAA,6BAKH0K,MALG;AAAA,6BAMH,CAAC,CAAD,CANG;AAAA;AAAA;AAAA,kCACMzG,eADN,oBACsB,kBADtB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1IT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAqJeuO,MArJf;AAAA;AAAA;AAAA,8EAqJS,mBAAarN,IAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACC7H,cAAAA,KADD,GACSic,gBAAgB,CAAC5b,OAAjB,CACZwH,IAAI,CAAC6M,aADO,EAEZ,KAAK3U,gBAFO,CADT;AAAA;AAAA,qBAMc,KAAKmH,gBAAL,EANd;;AAAA;AAMCzB,cAAAA,IAND;AAOC0Q,cAAAA,GAPD,GAOOtO,IAAI,CAAC4W,MAAL,CAAYjU,GAAZ,CAAgB,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAAC7S,OAAT;AAAA,eAAhB,CAPP;AAQC0T,cAAAA,OARD,GAQWvO,IAAI,CAAC4W,MAAL,CAAYjU,GAAZ,CAAgB,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAACnI,MAAT;AAAA,eAAhB,CARX;AAAA;AAAA,qBASajP,cAAc,CAAC0J,IAAI,CAACzJ,QAAN,CAT3B;;AAAA;AASCoB,cAAAA,GATD;AAWCkf,cAAAA,UAXD,GAWcjd,MAAM,CAACC,KAAP,CAAaid,eAAb,CAA6BC,MAA7B,CACjB,CAAC,QAAD,EAAW,SAAX,EAAsB,SAAtB,CADiB,EAEjB,CAACpf,GAAD,EAAMqI,IAAI,CAACgX,qBAAL,IAA8B,CAApC,EAAuChX,IAAI,CAACiX,cAAL,IAAuB,CAA9D,CAFiB,CAXd;;AAAA,8BAiBY9e,KAjBZ;AAAA,8BAkBHyF,IAlBG;AAAA,8BAmBH,KAAKtG,OAnBF;AAAA,8BAoBHgX,GApBG;AAAA,8BAqBHC,OArBG;AAAA,8BAsBHsI,UAtBG;AAAA;AAAA,qBAuBG,KAAKpX,gBAAL,EAvBH;;AAAA;AAAA;AAAA;AAAA,mCAiBkByX,qBAjBlB;;AAAA;AAiBC5W,cAAAA,EAjBD;AAAA;AAAA,qBAyBiBA,EAAE,CAACC,IAAH,EAzBjB;;AAAA;AAyBCsN,cAAAA,OAzBD;AA0BCjM,cAAAA,KA1BD,GA0BSiM,OA1BT,uCA0BSA,OAAO,CAAEsJ,MA1BlB,qBA0BS,gBAAiBC,IAAjB,CAAsB,UAACrV,CAAD;AAAA,uBAAOA,CAAC,CAACH,KAAF,KAAY,aAAnB;AAAA,eAAtB,CA1BT;AA2BCuT,cAAAA,MA3BD,GA2BUvT,KA3BV,mCA2BUA,KAAK,CAAE5B,IA3BjB,qBA2BU,YAAamV,MA3BvB;AAAA;AAAA,qBA4BQ,KAAKrQ,GAAL,CAASqQ,MAAT,CA5BR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoLelP,YApLf;AAAA,oFAoLS,mBACLrI,IADK,EAEL6C,EAFK,EAGLT,IAHK,EAILtK,IAJK;AAAA;AAAA;AAAA;AAAA;AAAA,kBAILA,IAJK;AAILA,gBAAAA,IAJK,GAIa,CAAC,CAAD,CAJb;AAAA;;AAAA;AAAA,qBAMC,KAAKoJ,eAAL,CAAqB,kBAArB,EAAyC,CAC7ClB,IAD6C,EAE7C6C,EAF6C,EAG7CT,IAAI,CAACnF,OAHwC,EAI7CmF,IAAI,CAACuF,MAJwC,EAK7C7P,IAL6C,CAAzC,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApLT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmMeiZ,iBAnMf;AAAA,yFAmMS,mBACL/Q,IADK,EAEL6C,EAFK,EAGLT,IAHK,EAILtK,IAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAILA,IAJK;AAILA,gBAAAA,IAJK,GAIa,CAAC,CAAD,CAJb;AAAA;;AAMC4Y,cAAAA,GAND,GAMOtO,IAAI,CAAC2C,GAAL,CAAS,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAAC7S,OAAT;AAAA,eAAT,CANP;AAOC0T,cAAAA,OAPD,GAOWvO,IAAI,CAAC2C,GAAL,CAAS,UAAC+K,CAAD;AAAA,uBAAOA,CAAC,CAACnI,MAAT;AAAA,eAAT,CAPX;AAAA;AAAA,qBAQC,KAAKzG,eAAL,CAAqB,uBAArB,EAA8C,CAClDlB,IADkD,EAElD6C,EAFkD,EAGlD6N,GAHkD,EAIlDC,OAJkD,EAKlD7Y,IALkD,CAA9C,CARD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnMT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAqNe2hB,cArNf;AAAA;AAAA;AAAA,sFAqNS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACiB,KAAK9X,UAAL,EADjB;;AAAA;AACCvD,cAAAA,OADD;AAECsb,cAAAA,SAFD,GAEahe,YAAY,CAAC0C,OAAD,CAFzB;AAGC1D,cAAAA,KAHD,GAGSC,cAAc,CAACC,OAAf,CACZ8e,SAAS,CAAC7d,gBADE,EAEZ,KAAKvB,gBAFO,CAHT;AAAA,8BAOQW,gBAPR;AAAA,8BAQH,KAAKX,gBARF;AAAA,8BASHof,SAAS,CAAC7d,gBATP;AAAA;AAAA,qBAUGnB,KAAK,CAAC4M,SAAN,CAAgB,KAAK5N,OAArB,CAVH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArNT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmOeigB,WAnOf;AAAA,mFAmOS,mBAAkBhS,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACiB,KAAKhG,UAAL,EADjB;;AAAA;AACCvD,cAAAA,OADD;AAECsb,cAAAA,SAFD,GAEahe,YAAY,CAAC0C,OAAD,CAFzB;AAGC1D,cAAAA,KAHD,GAGSC,cAAc,CAACC,OAAf,CACZ8e,SAAS,CAAC7d,gBADE,EAEZ,KAAKvB,gBAFO,CAHT;;AAAA,8BAQYI,KARZ;AAAA,8BASH,KAAKhB,OATF;AAAA,8BAUHiO,MAVG;AAAA;AAAA,qBAWG,KAAK9F,gBAAL,EAXH;;AAAA;AAAA;AAAA;AAAA,mCAQkBnE,QARlB;;AAAA;AAQCgF,cAAAA,EARD;AAAA;AAAA,qBAaCA,EAAE,CAACC,IAAH,EAbD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnOT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmPeiX,YAnPf;AAAA,oFAmPS,mBAAmB/W,EAAnB,EAA+B8E,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAKzG,eAAL,CAAqB,cAArB,EAAqC,CAAC2B,EAAD,EAAK8E,MAAL,CAArC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnPT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuPeqJ,aAvPf;AAAA,qFAuPS,mBAAoBrJ,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAKzG,eAAL,CAAqB,eAArB,EAAsC,CAACyG,MAAD,CAAtC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvPT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA2PeW,iBA3Pf;AAAA,yFA2PS,mBAAwB3P,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACaD,cAAc,CAACC,QAAD,CAD3B;;AAAA;AACCoB,cAAAA,GADD;AAAA;AAAA,qBAEC,KAAKmH,eAAL,CAAqB,gBAArB,EAAuC,CAACnH,GAAD,CAAvC,CAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3PT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgQewO,qBAhQf;AAAA,6FAgQS,mBAA4BC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA4BA,UAA5B;AAA4BA,gBAAAA,UAA5B,GAAyC,KAAzC;AAAA;;AAAA;AAAA,qBACC,KAAKtH,eAAL,CAAqB,uBAArB,EAA8C,CAACsH,UAAD,CAA9C,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhQT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAgCpE,eAAhC;AAAaiT,WACGxa,aAAyBP,UAAU,CAACkN;AADvC6N,WAGG9S,QAAQ,CACpBjH,QAAQ,CAACC,KADW,EAEpBD,QAAQ,CAACE,MAFW,EAGpBF,QAAQ,CAACG,MAHW,EAIpBH,QAAQ,CAACI,QAJW;;ACYxB;;;;;;AAKA,IAAamc,YAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAGE;;;AAHF,SAMYpZ,eANZ,GAMY;AACR,WAAO2M,gBAAgB,CAACxS,OAAjB,CAAyB,KAAKlB,OAA9B,EAAuC,KAAKY,gBAA5C,CAAP;AACD;AAED;;;AAVF;;AAAA,SAaYyG,aAbZ,GAaY;AACR,WAAO8Y,YAAY,CAAChd,UAApB;AACD,GAfH;;AAAA,SAiBeqK,GAjBf;AAAA,2EAiBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ7M,mBAAmB,CAAC,KAAKC,gBAAN,EAAwB,KAAKZ,OAA7B,CAD3B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqBeogB,gBArBf;AAAA,wFAqBS;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,UADD,GACgC,EADhC;AAGDtH,cAAAA,KAHC,GAGO1S,SAAS,CAACC,IAAV,CAAe,CAAf,CAHP;;AAAA;AAAA;AAAA;AAAA;AAAA,qBAO8B,KAAKO,gBAAL,CAAsByZ,KAAtB,CAA4BvH,KAA5B,CAP9B;;AAAA;AAOKwH,cAAAA,gBAPL;AAAA,6BAQDF,UARC;AAAA;AAAA,qBASO,KAAKG,2BAAL,CAAiCD,gBAAjC,CATP;;AAAA;AAAA;;AAAA,2BAQU/R,IARV;;AAWDuK,cAAAA,KAAK,GAAGA,KAAK,CAACxS,GAAN,CAAU,CAAV,CAAR;AAXC;AAAA;;AAAA;AAAA;AAAA;;AAAA,oBAgBC,4BACC,aAAI,QAAJ,EAAyBzF,WAAzB,GAAuCgK,QAAvC,CAAgD,gBAAhD,CAjBF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,gDA0BEuV,UA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkDeG,2BAlDf;AAAA,mGAkDS,kBACLxgB,OADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGsCmB,OAAO,CAACC,GAAR,CAAY,CACrD,KAAKyF,gBAAL,CAAsB4Z,WAAtB,EADqD,EAErD,KAAK5Z,gBAAL,CAAsB4M,MAAtB,CAA6BzT,OAA7B,CAFqD,CAAZ,CAHtC;;AAAA;AAAA;AAGEygB,cAAAA,WAHF;AAGeC,cAAAA,aAHf;AAAA,gDASE;AACL1gB,gBAAAA,OAAO,EAAPA,OADK;AAEL2gB,gBAAAA,eAAe,EACbD,aAAa,CAACpX,GAAd,CAAkBjD,SAAS,CAACC,IAAV,CAAe,GAAf,CAAlB,EAAuCsa,GAAvC,CAA2CH,WAA3C,EAAwDvV,QAAxD,KACA;AAJG,eATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmEe0C,SAnEf;AAAA,iFAmES,kBAAgB5N,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACuB,KAAK6G,gBAAL,CAAsB9G,QAAtB,CAA+B8gB,UAA/B,CAC1B,KAAK7gB,OADqB,CADvB;;AAAA;AACC8gB,cAAAA,aADD;AAAA;AAAA,qBAIuB,KAAKja,gBAAL,CAAsB,iBAAtB,GAJvB;;AAAA;AAICka,cAAAA,aAJD;AAKCC,cAAAA,aALD,GAKiBF,aAAa,CAACva,GAAd,CAAkBwa,aAAlB,CALjB;AAAA,6BAOE,IAPF;AAAA,6BAQH/gB,OARG;AAAA,6BASHghB,aATG;AAAA;AAAA,qBAUG,KAAKna,gBAAL,CAAsB,mBAAtB,EAA2C7G,OAA3C,CAVH;;AAAA;AAAA;AAAA,6DAOOihB,eAPP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiFeC,cAjFf;AAAA,sFAiFS,kBACLC,aADK,EAELC,YAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICpgB,cAAAA,KAJD,GAISC,cAAc,CAACC,OAAf,CAAuBkgB,YAAvB,EAAqC,KAAKxgB,gBAA1C,CAJT;AAAA;AAAA,qBAKuBI,KAAK,CAAC4M,SAAN,CAAgB,KAAK5N,OAArB,CALvB;;AAAA;AAKC8gB,cAAAA,aALD;AAAA;AAAA,qBAMuB,KAAKja,gBAAL,CAAsB,wBAAtB,EAC1Bua,YAD0B,CANvB;;AAAA;AAMCL,cAAAA,aAND;AASCC,cAAAA,aATD,GASiBF,aAAa,CAACva,GAAd,CAAkBwa,aAAlB,CATjB;AAAA,6BAUe,IAVf;AAAA,6BAWHI,aAXG;AAAA,6BAYHH,aAZG;AAAA;AAAA,qBAaG,KAAKna,gBAAL,CAAsB,2BAAtB,EACJua,YADI,EAEJD,aAFI,CAbH;;AAAA;AAAA;AAAA;AAAA,kCAUoBF,eAVpB;;AAAA;AAUCxf,cAAAA,KAVD;AAAA;AAAA,qBAkBQF,gBAAgB,CAAC,KAAKX,gBAAN,EAAwBwgB,YAAxB,EAAsC3f,KAAtC,CAlBxB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsGe4f,QAtGf;AAAA,gFAsGS,kBAAerhB,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAKwH,eAAL,CAAqB,kBAArB,EAAyC,CAACxH,OAAD,CAAzC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0GgBihB,eA1GhB;AAAA,uFA0GU,kBACNjhB,OADM,EAENghB,aAFM,EAGNM,eAHM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAKkBN,aALlB;AAAA;AAAA,qBAME,KAAKna,gBAAL,CAAsB4M,MAAtB,CAA6BzT,OAA7B,CANF;;AAAA;AAAA;AAKAuhB,cAAAA,eALA,gBAKgCjY,GALhC;AAAA,6BAQwBiY,eARxB;AAAA;AAAA,qBASE,KAAK1a,gBAAL,CAAsB4Z,WAAtB,EATF;;AAAA;AAAA;AAQAe,cAAAA,qBARA,gBAQwCZ,GARxC;AAAA,gDAWCY,qBAAqB,CAAC/I,GAAtB,CAA0B6I,eAA1B,CAXD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1GV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwHeG,aAxHf;AAAA,qFAwHS,kBACLN,aADK,EAELC,YAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIC,KAAK5Z,eAAL,CAAqB,0BAArB,EAAiD,CACrD4Z,YADqD,EAErDD,aAFqD,CAAjD,CAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkIeO,UAlIf;AAAA,kFAkIS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAKla,eAAL,CAAqB,cAArB,EAAqC,EAArC,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsIema,eAtIf;AAAA,uFAsIS,mBAAsBP,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,KAAK5Z,eAAL,CAAqB,qBAArB,EAA4C,CAAC4Z,YAAD,CAA5C,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAkC5a,MAAlC;AAAa2Z,aACGhd,aAAyBP,UAAU,CAAC2Q;;AC1EpD;;;;;AAIA,IAAaqO,cAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACE;;;AADF,SAIY7a,eAJZ,GAIY;AACR,WAAO8a,iBAAiB,CAAC3gB,OAAlB,CAA0B,KAAKlB,OAA/B,EAAwC,KAAKY,gBAA7C,CAAP;AACD;AAED;;;AARF;;AAAA,SAWekhB,oBAXf;AAAA;AAAA;AAAA,4FAWS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACkB,KAAK/Z,gBAAL,EADlB;;AAAA;AACCga,cAAAA,QADD;AAAA;AAAA,qBAEoB,KAAKlb,gBAAL,CAAsBmb,uBAAtB,CACvBD,QADuB,CAFpB;;AAAA;AAECE,cAAAA,UAFD;AAKCC,cAAAA,QALD,GAKY/W,KAAK,CAAC7E,IAAN,CAAW6E,KAAK,CAAC8W,UAAU,CAAC/W,QAAX,EAAD,CAAL,CAA6BE,IAA7B,EAAX,EAAgD+W,OAAhD,EALZ;AAAA;AAAA,qBAMmBhhB,OAAO,CAACC,GAAR,CACtB8gB,QAAQ,CAAC7W,GAAT,CAAa,UAAC+W,CAAD;AAAA,uBACX,KAAI,CAACvb,gBAAL,CAAsBwb,kBAAtB,CAAyCN,QAAzC,EAAmD,CAACK,CAAC,GAAG,CAAL,EAAQ1gB,QAAR,EAAnD,CADW;AAAA,eAAb,CADsB,CANnB;;AAAA;AAMC8O,cAAAA,SAND;AAAA;AAAA,qBAWmBrP,OAAO,CAACC,GAAR,CACtBoP,SAAS,CAACnF,GAAV,CAAc,UAACrL,OAAD;AAAA,uBACZF,mBAAmB,CACjB,KAAI,CAACc,gBADY,EAEjBZ,OAFiB,EAGjB,KAAI,CAACC,cAHY,CAAnB,UAIQ;AAAA,yBAAMvC,SAAN;AAAA,iBAJR,CADY;AAAA,eAAd,CADsB,CAXnB;;AAAA;AAWC+S,cAAAA,SAXD;AAAA,+CAoBEyR,QAAQ,CAAC7W,GAAT,CAAa,UAAC+W,CAAD,EAAI9W,CAAJ;AAClB,uBAAO;AACLtL,kBAAAA,OAAO,EAAEwQ,SAAS,CAAClF,CAAD,CADb;AAEL3B,kBAAAA,OAAO,EAAEyY,CAFJ;AAGLnjB,kBAAAA,QAAQ,EAAEwR,SAAS,CAACnF,CAAD;AAHd,iBAAP;AAKD,eANM,CApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAoC9E,MAApC;;AC+EA;;;;;AAIA,IAAa8b,WAAb;AAqCE,uBACEC,iBADF,EAEEC,IAFF;SAnCQ/b;SACAgc,iBAA8B;AACpCxiB,MAAAA,cAAc,EAAE,mCADoB;AAEpCyiB,MAAAA,uBAAuB,EAAE,EAFW;AAGpCra,MAAAA,iBAAiB,EAAE,GAHiB;AAIpCD,MAAAA,QAAQ,EAAE,SAJ0B;AAKpCQ,MAAAA,qBAAqB,EAAE,EALa;AAMpCoB,MAAAA,8BAA8B,EAAE,KAAK2Y,0BAAL,CAAgCC,IAAhC,CAAqC,IAArC,CANI;AAOpCpZ,MAAAA,kCAAkC,EAAEpE,iBAPA;AAQpC4B,MAAAA,cAAc,EAAE;AARoB;SAU9B6b,UAAU,IAAIC,GAAJ;SACVliB;SAEAgG,UAAyB;SAazBmc,YAAmC;AAYzC,SAAKniB,gBAAL,GAAwB,KAAKkG,mBAAL,CAAyByb,iBAAzB,CAAxB;AACA,SAAK9b,OAAL,gBACK,KAAKgc,cADV,EAEKD,IAFL;AAID;;AA9CH;;AAAA,SA+CUQ,mBA/CV,GA+CU;AACN,yDAA0B,KAAKH,OAA/B,wCAAwC;AAAA;AAAA,UAA1BI,OAA0B;;AACtC,UAAI,KAAKC,UAAL,EAAJ,EAAuB;AACrBD,QAAAA,OAAO,CAACrb,WAAR;AACD;;AACDqb,MAAAA,OAAO,CAACnc,mBAAR,CAA4B,KAAKlG,gBAAjC;AACD;AACF,GAtDH;;AAAA,SAwDgBqH,UAxDhB;AAAA,kFAwDU;AAAA;;AAAA;AAAA;AAAA;AAAA;AACAlI,cAAAA,QADA,GACWojB,QAAQ,CAACC,UAAT,CAAoB,KAAKxiB,gBAAzB,IACb,KAAKA,gBADQ,GAEb,KAAKA,gBAAL,CAAsBb,QAHpB;AAIN,eAAUA,QAAV,2CAAA6F,SAAS,QAAW,qCAAX,CAAT,GAAAA,SAAS,OAAT;AAJM;AAAA,qBAMoB7F,QAAQ,CAACmI,UAAT,EANpB;;AAAA;AAAA;AAMExD,cAAAA,OANF,yBAMEA,OANF;AAAA,+CAOCA,OAPD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxDV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkEgB2e,kBAlEhB;AAAA,0FAkEU;AAAA;AAAA;AAAA;AAAA;AAAA,mBACF,KAAK5c,OAAL,CAAaic,uBADX;AAAA;AAAA;AAAA;;AAAA,gDAEG,KAAKjc,OAAL,CAAaic,uBAFhB;;AAAA;AAAA,6BAIC/c,2BAJD;AAAA;AAAA,qBAKG,KAAKsC,UAAL,EALH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlEV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0EE;;;;;;AA1EF;;AAAA,SAgFgBqb,iBAhFhB;AAAA;AAAA;AAAA,yFAgFU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgB,KAAKD,kBAAL,EADhB;;AAAA;AACArjB,cAAAA,OADA;AAEN,eAAUA,OAAV,2CAAA4F,SAAS,QAAU,mCAAV,CAAT,GAAAA,SAAS,OAAT;AAFM,gDAGE,KAAKN,QAAL,GAAgB,KAAKie,iBAAL,CAAuBvjB,OAAvB,EAAgC4hB,cAAhC,CAHlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhFV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsFU2B,iBAtFV,GAsFU,2BACNvjB,OADM,EAENwjB,OAFM;AAIN,QAAI,KAAKX,OAAL,CAAaY,GAAb,CAAiBzjB,OAAjB,CAAJ,EAA+B;AAC7B,aAAO,KAAK6iB,OAAL,CAAarV,GAAb,CAAiBxN,OAAjB,CAAP;AACD;;AACD,QAAM0jB,UAAU,GAAG,IAAIF,OAAJ,CACjB,KAAK5iB,gBADY,EAEjBZ,OAFiB,EAGjB,KAAKyG,OAHY,EAIjB,IAJiB,CAAnB;;AAMA,SAAKoc,OAAL,CAAac,GAAb,CAAiB3jB,OAAjB,EAA0B0jB,UAA1B;AACA,WAAOA,UAAP;AACD;AAED;;;;;AAvGF;;AAAA,SA4GevQ,mBA5Gf;AAAA;AAAA;AAAA,2FA4GS;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEH,KAAK7N,QAFF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEqB,KAAKge,iBAAL,EAFrB;;AAAA;AAAA;;AAAA;AAAA;AAAA,kCAGHzc,gBAHG,CAGcX,SAHd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5GT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkHE;;;;AAlHF;;AAAA,SAsHe0d,OAtHf;AAAA;AAAA;AAAA,+EAsHS;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEH,KAAKte,QAFF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEqB,KAAKge,iBAAL,EAFrB;;AAAA;AAAA;;AAAA;AAAA,6DAGHxB,oBAHG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtHT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA4HE;;;;;AA5HF;;AAAA,SAiIe+B,SAjIf;AAAA;AAAA;AAAA,iFAiIS,kBACL5kB,QADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAGqB,KAAKqG,QAH1B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAG6C,KAAKge,iBAAL,EAH7C;;AAAA;AAAA;;AAAA;AAGCQ,cAAAA,gBAHD,gBAIF5jB,QAJE;AAAA;AAAA,qBAKkB,KAAKmS,WAAL,EALlB;;AAAA;AAKC9J,cAAAA,QALD;AAMC+J,cAAAA,MAND,GAM+B,EAN/B;;AAQL,kBAAI,OAAO/J,QAAP,KAAoB,QAAxB,EAAkC;AAChC+J,gBAAAA,MAAM,CAAC/J,QAAP,GAAkBC,UAAU,CAACD,QAAQ,CAAC7G,QAAT,EAAD,EAAsB,MAAtB,CAA5B;AACD;;AAVI,6BAYa1C,cAZb;AAAA,6BAaHC,QAbG;AAAA,6BAcH6kB,gBAAgB,CAAC9jB,OAdd;AAAA;AAAA,qCAeI,KAAK2H,MAfT,qBAeI,aAAaK,UAAb,EAfJ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,6BAekCtK,SAflC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAYC2C,cAAAA,GAZD;AAAA;AAAA,qBAkBayjB,gBAAgB,CAACC,cAAjB,CAAgC1jB,GAAhC,EAAqCiS,MAArC,CAlBb;;AAAA;AAkBC0R,cAAAA,GAlBD;AAAA;AAAA,qBAmBQA,GAAG,CAAC/a,IAAJ,EAnBR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuJE;;;;;;AAvJF;;AAAA,SA6JeoJ,WA7Jf;AAAA;AAAA;AAAA,mFA6JS,kBACLzN,KADK,EAELqf,UAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAICC,cAAAA,MAJD,GAIUtf,KAAK,GAAGA,KAAH,GAAW,KAAK6B,OAAL,CAAa2B,QAJvC;AAKC+b,cAAAA,OALD,GAKWF,UAAU,GAAGA,UAAH,GAAgB,KAAKxd,OAAL,CAAa4B,iBALlD;AAAA,6BAMQ1D,mBANR;AAAA;AAAA,qBAMkC,KAAKsD,UAAL,EANlC;;AAAA;AAAA;AAAA,6BAMqDic,MANrD;AAAA,6BAM6DC,OAN7D;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7JT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsKE;;;;;AAtKF;;AAAA,SA2KSrd,mBA3KT,GA2KS,6BAAoBsd,yBAApB;AACL,QACEjB,QAAQ,CAACC,UAAT,CAAoBgB,yBAApB,KACA3c,MAAM,CAACC,QAAP,CAAgB0c,yBAAhB,CAFF,EAGE;AACA;AACA,WAAKxjB,gBAAL,GAAwBwjB,yBAAxB;AACD,KAND,MAMO;AACL;AACA,WAAKxjB,gBAAL,GAAwB0B,MAAM,CAAC2E,kBAAP,CACtBmd,yBADsB,CAAxB;AAGD;;;AAED,QAAI3c,MAAM,CAACC,QAAP,CAAgB0c,yBAAhB,CAAJ,EAAgD;AAC9C,WAAKzc,MAAL,GAAcyc,yBAAd;AACD,KAFD,MAEO;AACL,WAAKzc,MAAL,GAAc,IAAd;AACD;;AACD,SAAKqb,mBAAL;AACA,WAAO,KAAKpiB,gBAAZ;AACD;AAED;;;;;AAlMF;;AAAA,SAuMSsiB,UAvMT,GAuMS;AACL,WAAO,CAACzb,MAAM,CAACC,QAAP,CAAgB,KAAKC,MAArB,CAAR;AACD;AAED;;;;AA3MF;;AAAA,SA+Me7H,mBA/Mf;AAAA;AAAA;AAAA,4FA+MS,kBACLE,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIOF,mBAAmB,CAC3B,KAAKc,gBADsB,EAE3BZ,OAF2B,EAG3B,KAAKyG,OAAL,CAAaxG,cAHc,CAJ1B;;AAAA;AAAA;AAAA;AASHD,gBAAAA,OAAO,EAAPA;AATG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/MT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA4NE;;;;;AA5NF;;AAAA,SAiOSqkB,YAjOT,GAiOS,sBAAarkB,OAAb;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgCmP,SAAhC,CAAP;AACD;AAED;;;;;AArOF;;AAAA,SA0OS2E,YA1OT,GA0OS,sBAAa9T,OAAb;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgCwd,SAAhC,CAAP;AACD;AAED;;;;;;AA9OF;;AAAA,SAoPSnK,mBApPT,GAoPS,6BAAoBrT,OAApB;AACL,WAAO,KAAKskB,eAAL,CAAqBtkB,OAArB,CAAP;AACD;AAED;;;;;AAxPF;;AAAA,SA6PSskB,eA7PT,GA6PS,yBAAgBtkB,OAAhB;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgC8U,YAAhC,CAAP;AACD;AAED;;;;;AAjQF;;AAAA,SAsQSR,aAtQT,GAsQS,uBAActU,OAAd;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgC2d,UAAhC,CAAP;AACD;AAED;;;;;AA1QF;;AAAA,SA+QS3J,iBA/QT,GA+QS,2BAAkBhU,OAAlB;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgCsN,cAAhC,CAAP;AACD;AAED;;;;;AAnRF;;AAAA,SAwRSuH,kBAxRT,GAwRS,4BAAmB7U,OAAnB;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgC+X,eAAhC,CAAP;AACD;AAED;;;;;AA5RF;;AAAA,SAiSS5D,eAjST,GAiSS,yBAAgBnU,OAAhB;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgC2a,YAAhC,CAAP;AACD;AAED;;;;;AArSF;;AAAA,SA0SSjG,aA1ST,GA0SS,uBAAc1U,OAAd;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgCmY,UAAhC,CAAP;AACD;AAED;;;;;;AA9SF;;AAAA,SAoTSxE,eApTT,GAoTS,yBAAgB3T,OAAhB;AACL,WAAO,KAAKujB,iBAAL,CAAuBvjB,OAAvB,EAAgCmgB,YAAhC,CAAP;AACD;AAED;;;;;;;;;AAxTF;;AAAA,SAiUSoE,WAjUT,GAiUS,qBAAYC,KAAZ,EAA2BC,OAA3B;AACL,QAAMC,KAAK,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAd;;AAEA,QAAID,KAAK,CAACjZ,MAAN,GAAe,CAAf,IAAoBiZ,KAAK,CAAC,CAAD,CAAL,KAAa,UAArC,EAAiD;AAC/C,UAAIA,KAAK,CAACjZ,MAAN,KAAiB,CAArB,EAAwB;AAAA;;AACtB;AACA,YAAM3I,UAAU,GAAG4hB,KAAK,CAAC,CAAD,CAAxB;AACA,YAAM1S,aAAa,GAAG0S,KAAK,CAAC,CAAD,CAA3B;AACA,YAAME,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAtB;AACA,eAAQ,8BAAKG,eAAL,CAAqB/hB,UAArB,EAAiCkP,aAAjC,GACN4S,QADM,+BAEFH,OAAO,CAACK,SAAR,IAAqB,EAFnB,CAAR;AAGD,OARD,MAQO,IAAIJ,KAAK,CAACjZ,MAAN,KAAiB,CAArB,EAAwB;AAC7B;AACA,cAAM,IAAI3J,KAAJ,CAAU,4CAAV,CAAN;AACD,OAHM,MAGA,IAAI4iB,KAAK,CAACjZ,MAAN,KAAiB,CAArB,EAAwB;AAC7B;AACA,YAAMmZ,SAAQ,GAAGF,KAAK,CAAC,CAAD,CAAtB;AACA,eAAQ,KAAaE,SAAb,cAA2BH,OAAO,CAACK,SAAR,IAAqB,EAAhD,CAAR;AACD;AACF;;AAED,UAAM,IAAIhjB,KAAJ,CAAU,cAAV,CAAN;AACD,GAxVH;AAAA;;AAAA,SA2VU+iB,eA3VV,GA2VU,yBAAgBplB,IAAhB,EAA8BO,OAA9B;AACN,QAAIP,IAAI,KAAK,UAAb,EAAyB;AACvB,aAAO,KAAKuU,iBAAL,CAAuBhU,OAAvB,CAAP;AACD,KAFD,MAEO,IAAIP,IAAI,KAAK,KAAb,EAAoB;AACzB,aAAO,KAAKqU,YAAL,CAAkB9T,OAAlB,CAAP;AACD,KAFM,MAEA,IAAIP,IAAI,KAAK,QAAb,EAAuB;AAC5B,aAAO,KAAK0U,eAAL,CAAqBnU,OAArB,CAAP;AACD,KAFM,MAEA,IAAIP,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,YAAlC,EAAgD;AACrD,aAAO,KAAK4T,mBAAL,CAAyBrT,OAAzB,CAAP;AACD,KAFM,MAEA,IAAIP,IAAI,KAAK,MAAb,EAAqB;AAC1B,aAAO,KAAKiV,aAAL,CAAmB1U,OAAnB,CAAP;AACD,KAFM,MAEA,IAAIP,IAAI,KAAK,QAAb,EAAuB;AAC5B,aAAO,KAAKkU,eAAL,CAAqB3T,OAArB,CAAP;AACD,KAFM,MAEA,IAAIP,IAAI,KAAK,MAAb,EAAqB;AAC1B,aAAO,KAAK6U,aAAL,CAAmBtU,OAAnB,CAAP;AACD,KAFM,MAEA,IAAIP,IAAI,KAAK,WAAb,EAA0B;AAC/B,aAAO,KAAKoV,kBAAL,CAAwB7U,OAAxB,CAAP;AACD,KAFM,MAEA,IAAIP,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,SAA/B,EAA0C;AAC/C,aAAO,KAAK4kB,YAAL,CAAkBrkB,OAAlB,CAAP;AACD;;AACD,UAAM,IAAI8B,KAAJ,CAAU,oBAAV,CAAN;AACD,GAhXH;;AAAA,SAkXgB6gB,0BAlXhB;AAAA,kGAkXU,kBACN7c,OADM,EAENiE,SAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAIAnL,cAAAA,IAJA,GAIOM,IAAI,CAACC,SAAL,CAAe;AAC1B4lB,gBAAAA,OAAO,EAAEjf,OADiB;AAE1BiE,gBAAAA,SAAS,EAATA,SAF0B;AAG1BnK,gBAAAA,IAAI,EAAE;AAHoB,eAAf,CAJP;;AAAA;AAAA,qBAUiBlB,KAAK,CAAC,KAAK+H,OAAL,CAAamC,qBAAd,EAAqC;AAC/DjK,gBAAAA,MAAM,EAAE,MADuD;AAE/DC,gBAAAA,IAAI,EAAJA;AAF+D,eAArC,CAVtB;;AAAA;AAUAomB,cAAAA,QAVA;;AAAA,mBAcFA,QAAQ,CAACC,EAdP;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAeeD,QAAQ,CAAClmB,IAAT,EAff;;AAAA;AAeEomB,cAAAA,IAfF;AAgBEC,cAAAA,MAhBF,GAgBWjmB,IAAI,CAACkmB,KAAL,CAAWF,IAAI,CAACC,MAAhB,CAhBX;AAAA,gDAiBGA,MAAM,CAAClb,MAjBV;;AAAA;AAAA,oBAmBA,IAAInI,KAAJ,CAAU,0BAAV,CAnBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlXV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAkBE;;;;AAIA;AACE,aAAO,KAAK8E,OAAZ;AACD,KAxBH;AAAA,SAyBE,aAAmBnF,KAAnB;AACE,WAAKmF,OAAL,GAAenF,KAAf;AACD;AA3BH;AAAA;AAAA,SA8BE;AACE,aAAO,KAAKshB,SAAZ;AACD,KAhCH;AAAA,SAiCE,aAAqBthB,KAArB;AACE,WAAKshB,SAAL,GAAiBthB,KAAjB;AACD;AAnCH;;AAAA;AAAA;AAyYA;;;;;;AAKA,IAAa4jB,UAAU,GAAG/C,WAAnB;;AClfP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AAWA,IAAI,CAAC3kB,UAAU,CAACe,KAAhB,EAAuB;AACrB;AACA;AACAf,EAAAA,UAAU,CAACe,KAAX,GAAmBA,OAAnB;AACD;;;;"}