import { BytesLike, ContractReceipt, Signer } from "ethers";
import { AppModule } from "../modules/app";
import { CollectionModule } from "../modules/collection";
import { DatastoreModule } from "../modules/datastore";
import { DropModule } from "../modules/drop";
import { MarketModule } from "../modules/market";
import { NFTModule } from "../modules/nft";
import { PackModule } from "../modules/pack";
import { SplitsModule } from "../modules/royalty";
import { CurrencyModule } from "../modules/token";
import { ModuleMetadataNoType } from "../types/ModuleMetadata";
import { IAppModule, RegistryModule } from "./registry";
import { ForwardRequestMessage, MetadataURIOrObject, ProviderOrSigner, ValidProviderInput } from "./types";
/**
 * The optional options that can be passed to the SDK.
 * @public
 */
export interface ISDKOptions {
    /**
     * An optional IPFS Gateway. (Default: `https://cloudflare-ipfs.com/ipfs/`).
     */
    ipfsGatewayUrl: string;
    /**
     * Optional Registry Contract Address
     */
    registryContractAddress: string;
    /**
     * maxGasPrice for transactions
     */
    maxGasPriceInGwei: number;
    /**
     * Optional default speed setting for transactions
     */
    gasSpeed: string;
    /**
     * Optional relayer url to be used for gasless transaction
     */
    transactionRelayerUrl: string;
    /**
     * Optional function for sending transaction to relayer
     * @returns transaction hash of relayed transaction.
     */
    transactionRelayerSendFunction: (message: ForwardRequestMessage, signature: BytesLike) => Promise<string>;
    /**
     * Optional trusted forwarder address overwrite
     */
    transactionRelayerForwarderAddress: string;
    /**
     * Optional read only RPC url
     */
    readOnlyRpcUrl: string;
}
/**
 * @internal
 */
export declare type AnyContract = typeof AppModule | typeof CollectionModule | typeof NFTModule | typeof CurrencyModule | typeof MarketModule | typeof PackModule | typeof RegistryModule | typeof DropModule | typeof DatastoreModule | typeof SplitsModule;
/**
 * The entrypoint to the SDK.
 * @public
 */
export declare class ThirdwebSDK {
    private options;
    private defaultOptions;
    private modules;
    private providerOrSigner;
    private _signer;
    /**
     * The active Signer, you should not need to access this unless you are deploying new modules.
     * @internal
     */
    get signer(): Signer | null;
    private set signer(value);
    private _registry;
    private get registry();
    private set registry(value);
    constructor(providerOrNetwork: ValidProviderInput, opts?: Partial<ISDKOptions>);
    private updateModuleSigners;
    private getChainID;
    private getRegistryAddress;
    /**
     *
     * @param address - The contract address of the given Registry module.
     * @returns The Registry Module.
     * @internal
     */
    private getRegistryModule;
    private getOrCreateModule;
    /**
     * you should not need this unless you are creating new modules
     * @returns the active registry module forwarder address
     * @internal
     */
    getForwarderAddress(): Promise<string>;
    /**
     * Call this to get the current apps.
     * @returns All currently registered apps for the connected wallet
     */
    getApps(): Promise<IAppModule[]>;
    /**
     * Call this to create a new app
     * @param metadata - metadata URI or a JSON object
     * @returns The transaction receipt
     */
    createApp(metadata: MetadataURIOrObject): Promise<ContractReceipt>;
    /**
     *
     * @param speed - what speed to prefer, default: "fastest"
     * @param maxGas - how much gas to use at most, default: 100
     * @returns the optiomal gas price
     */
    getGasPrice(speed?: string, maxGasGwei?: number): Promise<number | null>;
    /**
     *
     * @param providerOrSignerOrNetwork - A valid "ethers" Provider, Signer or a Network address to create a Provider with.
     * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.
     */
    setProviderOrSigner(providerOrSignerOrNetwork: ValidProviderInput): ProviderOrSigner;
    /**
     *
     * @public
     * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid "Signer.")
     */
    isReadOnly(): boolean;
    /**
     * @public
     * @returns The contract metadata for the given contract address.
     */
    getContractMetadata(address: string): Promise<ModuleMetadataNoType>;
    /**
     *
     * @param address - The contract address of the given App module.
     * @returns The App Module.
     */
    getAppModule(address: string): AppModule;
    /**
     *
     * @param address - The contract address of the given NFT module.
     * @returns The NFT Module.
     */
    getNFTModule(address: string): NFTModule;
    /**
     *
     * @param address - The contract address of the given Collection module.
     * @returns The Collection Module.
     */
    getCollectionModule(address: string): CollectionModule;
    /**
     *
     * @param address - The contract address of the given Pack module.
     * @returns The Pack Module.
     */
    getPackModule(address: string): PackModule;
    /**
     *
     * @param address - The contract address of the given Currency module.
     * @returns The Currency Module.
     */
    getCurrencyModule(address: string): CurrencyModule;
    /**
     * @alpha
     * @param address - The contract address of the given Datastore module.
     * @returns The Datastore Module.
     */
    getDatastoreModule(address: string): DatastoreModule;
    /**
     *
     * @param address - The contract address of the given Market module.
     * @returns The Market Module.
     */
    getMarketModule(address: string): MarketModule;
    /**
     *
     * @param address - The contract address of the given Drop module.
     * @returns The Drop Module.
     */
    getDropModule(address: string): DropModule;
    /**
     * @alpha
     *
     * @param address - The contract address of the given Royalty module.
     * @returns The Splits Module.
     */
    getSplitsModule(address: string): SplitsModule;
    /**
     * Used for SDK that requires js bridging like Unity SDK.
     * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.
     *
     * @internal
     * @param route - sdk execution route
     * @param payload - request arguments for the function
     * @returns
     */
    invokeRoute(route: string, payload: Record<string, any>): any;
    private getModuleByName;
    private defaultRelayerSendFunction;
}
/**
 * Deprecated, please use ThirdwebSDK instead.
 * @public
 * @deprecated use ThirdwebSDK instead
 */
export declare const NFTLabsSDK: typeof ThirdwebSDK;
