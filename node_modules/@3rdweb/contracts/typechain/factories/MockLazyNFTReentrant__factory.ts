/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockLazyNFTReentrant,
  MockLazyNFTReentrantInterface,
} from "../MockLazyNFTReentrant";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_addy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_onReceive",
        type: "bool",
      },
    ],
    name: "setAttackOnReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106d23803806106d283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61063f806100936000396000f3fe6080604052600436106100385760003560e01c8063150b7a02146101195780639e5faafc1461016e578063b7991a841461018357600080fd5b3661011457600054600160a01b900460ff16156101125760408051600080825260208201909252905461010f906001600160a01b0316632f52ebb760e01b61008560018560448101610448565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050670de0b6b3a76400006040518060400160405280600681526020016511905253115160d21b8152506101d7565b50505b005b600080fd5b34801561012557600080fd5b506101396101343660046104b5565b610304565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b34801561017a57600080fd5b50610112610360565b34801561018f57600080fd5b5061011261019e366004610591565b60008054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60608247101561023d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b843b61028b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610234565b600080866001600160a01b031685876040516102a791906105e3565b60006040518083038185875af1925050503d80600081146102e4576040519150601f19603f3d011682016040523d82523d6000602084013e6102e9565b606091505b50915091506102f98282866103f2565b979650505050505050565b60008054600160a01b900460ff1661034f5760408051600080825260208201909252905461034c906001600160a01b0316632f52ebb760e01b61008560018560448101610448565b50505b50630a85bd0160e11b949350505050565b67d02ab486cedc00004710156103b85760405162461bcd60e51b815260206004820152600860248201527f3e3d2031356574680000000000000000000000000000000000000000000000006044820152606401610234565b6040805160008082526020820190925290546103ee906001600160a01b0316632f52ebb760e01b61008560018560448101610448565b5050565b6060831561040157508161042b565b8251156104115782518084602001fd5b8160405162461bcd60e51b815260040161023491906105ff565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006040820160ff851683526020604081850152818551808452606086019150828701935060005b8181101561048c57845183529383019391830191600101610470565b5090979650505050505050565b80356001600160a01b03811681146104b057600080fd5b919050565b600080600080608085870312156104cb57600080fd5b6104d485610499565b93506104e260208601610499565b925060408501359150606085013567ffffffffffffffff8082111561050657600080fd5b818701915087601f83011261051a57600080fd5b81358181111561052c5761052c610432565b604051601f8201601f19908116603f0116810190838211818310171561055457610554610432565b816040528281528a602084870101111561056d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000602082840312156105a357600080fd5b8135801515811461042b57600080fd5b60005b838110156105ce5781810151838201526020016105b6565b838111156105dd576000848401525b50505050565b600082516105f58184602087016105b3565b9190910192915050565b602081526000825180602084015261061e8160408501602087016105b3565b601f01601f1916919091016040019291505056fea164736f6c6343000809000a";

type MockLazyNFTReentrantConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLazyNFTReentrantConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLazyNFTReentrant__factory extends ContractFactory {
  constructor(...args: MockLazyNFTReentrantConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _addy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockLazyNFTReentrant> {
    return super.deploy(
      _addy,
      overrides || {}
    ) as Promise<MockLazyNFTReentrant>;
  }
  getDeployTransaction(
    _addy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_addy, overrides || {});
  }
  attach(address: string): MockLazyNFTReentrant {
    return super.attach(address) as MockLazyNFTReentrant;
  }
  connect(signer: Signer): MockLazyNFTReentrant__factory {
    return super.connect(signer) as MockLazyNFTReentrant__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLazyNFTReentrantInterface {
    return new utils.Interface(_abi) as MockLazyNFTReentrantInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLazyNFTReentrant {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockLazyNFTReentrant;
  }
}
