/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockRoyaltyReentrantDistribute,
  MockRoyaltyReentrantDistributeInterface,
} from "../MockRoyaltyReentrantDistribute";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_royalty",
        type: "address",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610137806100206000396000f3fe6080604052600436106100225760003560e01c80632801617e1461009457600080fd5b3661008f57600080546040805163e4fc6b6d60e01b8152905173ffffffffffffffffffffffffffffffffffffffff9092169263e4fc6b6d9260048084019382900301818387803b15801561007557600080fd5b505af1158015610089573d6000803e3d6000fd5b50505050005b600080fd5b3480156100a057600080fd5b506100eb6100af3660046100ed565b6000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b6000602082840312156100ff57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461012357600080fd5b939250505056fea164736f6c6343000809000a";

type MockRoyaltyReentrantDistributeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRoyaltyReentrantDistributeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRoyaltyReentrantDistribute__factory extends ContractFactory {
  constructor(...args: MockRoyaltyReentrantDistributeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockRoyaltyReentrantDistribute> {
    return super.deploy(
      overrides || {}
    ) as Promise<MockRoyaltyReentrantDistribute>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockRoyaltyReentrantDistribute {
    return super.attach(address) as MockRoyaltyReentrantDistribute;
  }
  connect(signer: Signer): MockRoyaltyReentrantDistribute__factory {
    return super.connect(signer) as MockRoyaltyReentrantDistribute__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRoyaltyReentrantDistributeInterface {
    return new utils.Interface(_abi) as MockRoyaltyReentrantDistributeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRoyaltyReentrantDistribute {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockRoyaltyReentrantDistribute;
  }
}
