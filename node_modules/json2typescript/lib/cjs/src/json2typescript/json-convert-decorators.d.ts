/**
 * Decorator of a class that is a custom converter.
 *
 * @param target the class
 */
export declare function JsonConverter(target: any): void;
/**
 * Decorator of a class that comes from a JSON object.
 *
 * @param target the class identifier or the class
 *
 * @returns
 *
 * @throws Error
 */
export declare function JsonObject(target: string | any): (target: any) => void;
/**
 * Decorator of a class property that comes from a JSON object.
 *
 * The second param can be either a type or a class of a custom converter.
 *
 * Use the following notation for the type:
 * - Primitive type: String|Number|Boolean
 * - Custom type: YourClassName
 * - Array type: [String|Number|Boolean|YourClassName]
 *
 * If you decide to use a custom converter, make sure this class implements the interface JsonCustomConvert from this package.
 *
 * @param jsonPropertyName optional param (default: classPropertyName) the property name in the expected JSON object
 * @param conversionOption optional param (default: Any), should be either the expected type (String|Boolean|Number|etc) or a custom converter class implementing JsonCustomConvert
 * @param convertingMode optional param (default: PropertyConvertingMode.MAP_NULLABLE), determines how nullable
 * property types should be serialized and deserialized
 *
 * @returns
 *
 * @throws Error
 */
export declare function JsonProperty(...params: any[]): {
    (target: any, classPropertyName: string): void;
};
